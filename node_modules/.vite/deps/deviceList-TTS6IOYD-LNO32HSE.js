import {
  w
} from "./chunk-TEXHGKQR.js";
import {
  i0
} from "./chunk-LGSFMKB7.js";
import {
  N
} from "./chunk-HFPUBT3M.js";
import {
  Vt
} from "./chunk-QHFOOEJW.js";
import "./chunk-52K3MTCP.js";
import {
  Na,
  getAuthorizationDApps,
  skeleton_default,
  useRequest_default,
  useTranslation,
  za
} from "./chunk-5K5SNHHZ.js";
import "./chunk-TL65SHMZ.js";
import "./chunk-XTL3VBNC.js";
import "./chunk-6SATDP2A.js";
import "./chunk-OKCYEHW4.js";
import "./chunk-YM32VLGM.js";
import "./chunk-E7F3KV4Y.js";
import "./chunk-WN444VHT.js";
import "./chunk-IXJJAVWB.js";
import "./chunk-GEJW2VKU.js";
import "./chunk-4YCFGIGR.js";
import "./chunk-XBOBPJUC.js";
import "./chunk-ZNXRVEFR.js";
import "./chunk-7Z7TKVC7.js";
import "./chunk-5JEUK2R2.js";
import "./chunk-QUUJLUTV.js";
import "./chunk-E4YFJ4DO.js";
import "./chunk-ZFG3MDGT.js";
import {
  require_dayjs_min
} from "./chunk-ZS6JYA4T.js";
import "./chunk-THPC5MR7.js";
import {
  require_react
} from "./chunk-YVDZNGKE.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@particle-network/auth-core-modal/esm/deviceList-TTS6IOYD.js
var import_dayjs = __toESM(require_dayjs_min(), 1);
var import_react = __toESM(require_react(), 1);
"use client";
var g = `.device-list-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  color: var(--text-color);
}
.device-list-container .scroll-wrapper {
  flex: 1;
  overflow: auto;
}
.device-list-container .devices-description {
  margin: 32px 18px 40px;
  font-weight: 400;
  font-size: 13px;
  color: var(--secondary-text-color);
}
.device-list-container .ant-spin-nested-loading > div > .ant-spin {
  top: 10vh;
}
.device-list-container .device-list {
  width: 100%;
  padding: 0 18px;
}
.device-list-container .device-list .ant-skeleton-content .ant-skeleton-title {
  display: none;
}
.device-list-container .device-list .item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 70px;
  padding: 0 12px 0 14px;
  margin-bottom: 10px;
  border-radius: var(--card-border-radius);
  background: var(--card-unclickable-background-color);
  cursor: pointer;
}
.device-list-container .device-list .item .device {
  font-weight: 500;
  font-size: 14px;
}
.device-list-container .device-list .item .created_at {
  margin-top: 4px;
  font-weight: 400;
  font-size: 12px;
  line-height: 1.2;
  color: var(--secondary-text-color);
}
.device-list-container .device-list .item .right {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 8px;
}
.device-list-container .device-list .item .right .arrow-right-icon {
  color: var(--text-color);
}
.device-list-container .device-list .item .right .arrow-right-icon svg {
  width: 12px;
  height: 12px;
}
.device-list-container .device-list .item .right .current-icon {
  position: relative;
  height: 20px;
  padding: 0 10px;
  border-radius: 30px;
  overflow: hidden;
  font-size: 13px;
  line-height: 20px;
  white-space: nowrap;
  color: var(--accent-color);
}
.device-list-container .device-list .item .right .current-icon::after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--accent-color);
  opacity: 0.15;
  content: '';
}
`;
var j = () => {
  let { t: o } = useTranslation(), m = Na(), { modalOptions: h } = za(), { language: f } = Vt(), { loading: x, data: r = [], run: w2 } = useRequest_default(() => getAuthorizationDApps().then((t) => t.map((e) => {
    var n, a;
    if (e.updated_at && (e.updated_at = (0, import_dayjs.default)(new Date(e.updated_at)).format("YYYY/MM/DD HH:mm")), h.projectId === e.project_app_uuid && (e.isCurrent = true), e.login_channel && (e.login_channel = e.login_channel.replace(/( |^)[a-z]/g, (s) => s.toUpperCase())), (n = e == null ? void 0 : e.location) != null && n.country_code)
      try {
        e.location.country_name = new Intl.DisplayNames([f || "en"], { type: "region" }).of((a = e == null ? void 0 : e.location) == null ? void 0 : a.country_code);
      } catch {
      }
    return e;
  })), { cacheKey: "getAuthorizations", manual: true });
  return (0, import_react.useEffect)(() => {
    w2();
  }, []), import_react.default.createElement("div", { className: "device-list-container" }, import_react.default.createElement("style", null, g), import_react.default.createElement(w, { displayBackBtn: true }, o("new.authorization")), import_react.default.createElement("div", { className: "scroll-wrapper" }, import_react.default.createElement("div", { className: "devices-description" }, o("new.authorization_tips")), x ? import_react.default.createElement("div", { className: "device-list" }, import_react.default.createElement(skeleton_default, null)) : import_react.default.createElement("div", { className: "device-list" }, r == null ? void 0 : r.map((t, e) => import_react.default.createElement("div", { className: "item", key: e, onClick: () => {
    m("/manageDevices/deviceDetails", { state: { loginDeviceInfo: t } });
  } }, import_react.default.createElement("div", { className: "left" }, import_react.default.createElement("div", { className: "wrap" }, import_react.default.createElement("div", { className: "s-row device" }, t.project_app_name), import_react.default.createElement("div", { className: "s-row created_at" }, t.updated_at))), import_react.default.createElement("div", { className: "right" }, t.isCurrent && import_react.default.createElement("div", { className: "current-icon" }, o("new.current")), import_react.default.createElement(i0, { className: "arrow-right-icon", name: "arrow_right_icon" })))))), import_react.default.createElement(N, { className: "footer-box-v2" }));
};
var K = j;
export {
  K as default
};
//# sourceMappingURL=deviceList-TTS6IOYD-LNO32HSE.js.map
