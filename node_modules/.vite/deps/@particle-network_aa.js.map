{
  "version": 3,
  "sources": ["../../@particle-network/aa/src/aaWrapProvider.ts", "../../@particle-network/aa/src/smartAccount.ts", "../../@particle-network/aa/src/types.ts", "../../@particle-network/aa/src/utils.ts"],
  "sourcesContent": ["import EventEmitter from 'events';\nimport { SmartAccount } from './smartAccount';\nimport type { IEthereumProvider, JsonRpcRequest, ResolveTransactionParams } from './types';\n\nexport enum SendTransactionMode {\n    UserSelect = 0,\n    Gasless = 1,\n    UserPaidNative = 2,\n}\n\nexport enum SendTransactionEvent {\n    Request = 'RequestSendTransaction',\n    Resolve = 'ResolveSendTransaction',\n    Reject = 'RejectSendTransaction',\n}\n\nexport class AAWrapProvider implements IEthereumProvider {\n    private events = new EventEmitter();\n    constructor(\n        private smartAccount: SmartAccount,\n        private sendTxMode: SendTransactionMode = SendTransactionMode.UserPaidNative\n    ) {\n        this.events.setMaxListeners(100);\n\n        if (!Object.values(SendTransactionMode).includes(sendTxMode)) {\n            throw new Error(`sendTxMode value error, must in ${Object.values(SendTransactionMode)}`);\n        }\n    }\n\n    /**\n     * when receive SendTransactionEvent.Request event, call this method to continue sending the transaction.\n     *\n     * @see SendTransactionEvent\n     * @param params\n     */\n    resolveSendTransaction(params: ResolveTransactionParams) {\n        this.events.emit(SendTransactionEvent.Resolve, params);\n    }\n\n    /**\n     * when receive SendTransactionEvent.Request event, call this method to reject the transaction.\n     *\n     * @param error reject error message\n     */\n    rejectSendTransaction(error: Error) {\n        this.events.emit(SendTransactionEvent.Reject, error);\n    }\n\n    on(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.on(event, listener);\n        } else {\n            this.smartAccount.provider.on(event, listener);\n        }\n        return this;\n    }\n\n    once(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.once(event, listener);\n        } else {\n            this.smartAccount.provider.once(event, listener);\n        }\n        return this;\n    }\n\n    off(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.off(event, listener);\n        } else {\n            this.smartAccount.provider.off(event, listener);\n        }\n        return this;\n    }\n\n    removeListener(event: string, listener: any): this {\n        if (SendTransactionEvent.Request === event) {\n            this.events.removeListener(event, listener);\n        } else {\n            this.smartAccount.provider.removeListener(event, listener);\n        }\n        return this;\n    }\n\n    enable(): Promise<string[]> {\n        return this.request({\n            method: 'eth_requestAccounts',\n        });\n    }\n\n    async request(payload: Partial<JsonRpcRequest>): Promise<any> {\n        if (payload.method === 'eth_requestAccounts' || payload.method === 'eth_accounts') {\n            await this.smartAccount.provider.request(payload);\n            const address = await this.smartAccount.getAddress();\n            return [address];\n        } else if (payload.method === 'eth_sendTransaction') {\n            if (!payload.params) {\n                return Promise.reject(new Error('send transaction param error'));\n            }\n            const txData = payload.params[0];\n\n            const feeQuotesResult = await this.smartAccount.getFeeQuotes(txData);\n            if (this.sendTxMode === SendTransactionMode.Gasless) {\n                const { userOp, userOpHash } =\n                    feeQuotesResult.verifyingPaymasterGasless || feeQuotesResult.verifyingPaymasterNative;\n                return this.smartAccount.sendUserOperation({ userOp, userOpHash });\n            } else if (this.sendTxMode === SendTransactionMode.UserPaidNative) {\n                const { userOp, userOpHash } = feeQuotesResult.verifyingPaymasterNative;\n                return this.smartAccount.sendUserOperation({ userOp, userOpHash });\n            }\n\n            return new Promise((resolve, reject) => {\n                this.events.removeAllListeners(SendTransactionEvent.Reject);\n                this.events.removeAllListeners(SendTransactionEvent.Resolve);\n                this.events.once(SendTransactionEvent.Resolve, async (params: ResolveTransactionParams) => {\n                    try {\n                        const sendParams = { ...params, tx: txData };\n                        const txHash = await this.smartAccount.sendTransaction(sendParams);\n                        resolve(txHash);\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n                this.events.once(SendTransactionEvent.Reject, reject);\n                this.events.emit(SendTransactionEvent.Request, feeQuotesResult);\n            });\n        }\n\n        return this.smartAccount.provider.request(payload);\n    }\n}\n", "import axios from 'axios';\nimport type {\n    Account,\n    AccountConfig,\n    FeeQuotesResponse,\n    IEthereumProvider,\n    RequestArguments,\n    SendTransactionParams,\n    SmartAccountConfig,\n    Transaction,\n    UserOp,\n    UserOpBundle,\n    UserOpParams,\n} from './types';\nimport { SmartAccountType } from './types';\nimport { payloadId, rpcUrl } from './utils';\n\nexport class SmartAccount {\n    private connection;\n\n    private smartAccountType = SmartAccountType.BICONOMY;\n\n    constructor(public provider: IEthereumProvider, private config: SmartAccountConfig) {\n        if (this.config.aaOptions.biconomy && this.config.aaOptions.biconomy.length > 0) {\n            this.smartAccountType = SmartAccountType.BICONOMY;\n        } else if (this.config.aaOptions.cyberConnect && this.config.aaOptions.cyberConnect.length > 0) {\n            this.smartAccountType = SmartAccountType.CYBERCONNECT;\n        } else if (this.config.aaOptions.simple && this.config.aaOptions.simple.length > 0) {\n            this.smartAccountType = SmartAccountType.SIMPLE;\n        } else {\n            throw new Error('aaOptions is not configured correctly');\n        }\n\n        this.connection = axios.create({\n            baseURL: `${rpcUrl()}/evm-chain`,\n            timeout: 60_000,\n        });\n\n        this.connection.interceptors.request.use((config) => {\n            if (config?.data?.method) {\n                config.baseURL = `${config.baseURL}${config.baseURL?.includes('?') ? '&' : '?'}method=${\n                    config?.data?.method\n                }`;\n            }\n            return config;\n        });\n    }\n\n    setSmartAccountType(type: SmartAccountType) {\n        this.smartAccountType = type;\n    }\n\n    private getChainId = async (): Promise<string> => {\n        return await this.provider.request({ method: 'eth_chainId' });\n    };\n\n    private async getAccountConfig(): Promise<AccountConfig> {\n        const chainId = await this.getChainId();\n        const apiKey = await this.getPaymasterApiKey();\n        const ownerAddress = (await this.provider.request({ method: 'eth_accounts' }))[0];\n        if (this.smartAccountType === SmartAccountType.BICONOMY) {\n            const networkConfig = this.config.aaOptions.biconomy?.find((item) => item.chainId === Number(chainId));\n            if (networkConfig) {\n                return {\n                    name: SmartAccountType.BICONOMY,\n                    version: networkConfig.version,\n                    biconomyApiKey: apiKey,\n                    ownerAddress,\n                };\n            }\n        } else if (this.smartAccountType === SmartAccountType.CYBERCONNECT) {\n            const networkConfig = this.config.aaOptions.cyberConnect?.find((item) => item.chainId === Number(chainId));\n            if (networkConfig) {\n                return {\n                    name: SmartAccountType.CYBERCONNECT,\n                    version: networkConfig.version,\n                    biconomyApiKey: apiKey,\n                    ownerAddress,\n                };\n            }\n        } else if (this.smartAccountType === SmartAccountType.SIMPLE) {\n            const networkConfig = this.config.aaOptions.simple?.find((item) => item.chainId === Number(chainId));\n            if (networkConfig) {\n                return {\n                    name: SmartAccountType.SIMPLE,\n                    version: networkConfig.version,\n                    biconomyApiKey: apiKey,\n                    ownerAddress,\n                };\n            }\n        } else {\n            throw new Error(`smart account type error, unsupport type: ${this.smartAccountType}`);\n        }\n        throw new Error(`Current chain is not supported, chainId: ${chainId}, please configure it first`);\n    }\n\n    async getPaymasterApiKey(): Promise<string | undefined> {\n        const chainId = await this.getChainId();\n        const apiKeyConfig = this.config.aaOptions.paymasterApiKeys?.find((item) => item.chainId === Number(chainId));\n        return apiKeyConfig?.apiKey;\n    }\n\n    async getFeeQuotes(tx: Transaction | Transaction[]): Promise<FeeQuotesResponse> {\n        const accountConfig = await this.getAccountConfig();\n        return this.sendRpc<FeeQuotesResponse>({\n            method: 'particle_aa_getFeeQuotes',\n            params: [accountConfig, Array.isArray(tx) ? tx : [tx]],\n        });\n    }\n\n    async buildUserOperation({ tx, feeQuote, tokenPaymasterAddress }: UserOpParams): Promise<UserOpBundle> {\n        const accountConfig = await this.getAccountConfig();\n        return await this.sendRpc<UserOpBundle>({\n            method: 'particle_aa_createUserOp',\n            params: [accountConfig, Array.isArray(tx) ? tx : [tx], feeQuote, tokenPaymasterAddress].filter(\n                (val) => !!val\n            ),\n        });\n    }\n\n    async signUserOperation({ userOpHash, userOp }: UserOpBundle): Promise<UserOp> {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        const signature = await this.provider.request({\n            method: 'personal_sign',\n            params: [userOpHash, eoas[0]],\n        });\n        return { ...userOp, signature };\n    }\n\n    async sendUserOperation({ userOpHash, userOp }: UserOpBundle): Promise<string> {\n        const signedUserOp = await this.signUserOperation({ userOpHash, userOp });\n        return this.sendSignedUserOperation(signedUserOp);\n    }\n\n    async sendSignedUserOperation(userOp: UserOp): Promise<string> {\n        const accountConfig = await this.getAccountConfig();\n        return this.sendRpc<string>({\n            method: 'particle_aa_sendUserOp',\n            params: [accountConfig, userOp],\n        });\n    }\n\n    async sendTransaction(params: SendTransactionParams): Promise<string> {\n        if (\n            Object.prototype.hasOwnProperty.call(params, 'userOpHash') &&\n            Object.prototype.hasOwnProperty.call(params, 'userOp')\n        ) {\n            const { userOpHash, userOp } = params as UserOpBundle;\n            if (userOpHash && userOp) {\n                return this.sendUserOperation({ userOpHash, userOp });\n            }\n        }\n\n        const { tx, feeQuote, tokenPaymasterAddress } = params as UserOpParams;\n        const userOpBundle = await this.buildUserOperation({ tx, feeQuote, tokenPaymasterAddress });\n        return this.sendUserOperation(userOpBundle);\n    }\n\n    async getAccount(): Promise<Account> {\n        const accountConfig = await this.getAccountConfig();\n        const accounts = await this.sendRpc<Account[]>({\n            method: 'particle_aa_getSmartAccount',\n            params: [accountConfig],\n        });\n        return accounts[0];\n    }\n\n    async getAddress(): Promise<string> {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        if (!eoas || eoas.length === 0) {\n            return '';\n        }\n        const accountConfig = await this.getAccountConfig();\n        const localKey = `particle_${accountConfig.name}_${accountConfig.version}_${eoas[0]}`;\n        if (typeof window !== 'undefined' && localStorage) {\n            const localAA = localStorage.getItem(localKey);\n            if (localAA) {\n                return localAA;\n            }\n        }\n\n        const account = await this.getAccount();\n        const address = account.smartAccountAddress;\n        if (typeof window !== 'undefined' && localStorage) {\n            localStorage.setItem(localKey, address);\n        }\n        return address;\n    }\n\n    async getOwner(): Promise<string> {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        return eoas[0];\n    }\n\n    async isDeployed(): Promise<boolean> {\n        const account = await this.getAccount();\n        return account.isDeployed;\n    }\n\n    async deployWalletContract(): Promise<string> {\n        return this.sendTransaction({\n            tx: {\n                to: '0x0000000000000000000000000000000000000000',\n                data: '0x',\n            },\n        });\n    }\n\n    async sendRpc<T>(arg: RequestArguments): Promise<T> {\n        const chainId = await this.getChainId();\n        const response = await this.connection\n            .post(\n                '',\n                {\n                    ...arg,\n                    id: payloadId(),\n                    jsonrpc: '2.0',\n                },\n                {\n                    params: {\n                        chainId: Number(chainId),\n                        projectUuid: this.config.projectId,\n                        projectKey: this.config.clientKey,\n                    },\n                }\n            )\n            .then((res) => res.data);\n        if (response.error) {\n            return Promise.reject(response.error);\n        } else {\n            return response.result;\n        }\n    }\n}\n", "export type Transaction = {\n    to: string;\n    value?: string;\n    data?: string;\n    nonce?: number | string;\n    gasLimit?: number | string;\n};\n\nexport interface RequestArguments {\n    method: string;\n    params?: any[];\n}\n\nexport interface JsonRpcRequest extends RequestArguments {\n    id: number | string;\n    jsonrpc: string;\n}\n\nexport interface IEthereumProvider {\n    on(event: string, listener: any): this;\n\n    once(event: string, listener: any): this;\n\n    off(event: string, listener: any): this;\n\n    removeListener(event: string, listener: any): this;\n\n    request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport interface Account {\n    isDeployed: boolean;\n    chainId: number;\n    eoaAddress: string;\n    factoryAddress: string;\n    entryPointAddress: string;\n    smartAccountAddress: string;\n    owner: string;\n    index: number;\n    implementationAddress: string;\n    fallBackHandlerAddress: string;\n    version: string;\n}\n\nexport type AccountConfig = {\n    name: SmartAccountType;\n    version: string;\n    biconomyApiKey?: string;\n    ownerAddress: string;\n};\n\nexport interface NetworkConfig {\n    chainId: number;\n    version: string;\n}\n\nexport interface ApiKeyConfig {\n    chainId: number;\n    apiKey: string;\n}\n\nexport interface SmartAccountConfig {\n    projectId: string;\n    clientKey: string;\n    appId: string;\n    aaOptions: AAOptions;\n}\n\nexport interface AAOptions {\n    biconomy?: NetworkConfig[];\n    cyberConnect?: NetworkConfig[];\n    simple?: NetworkConfig[];\n    paymasterApiKeys?: ApiKeyConfig[];\n}\n\nexport interface TokenInfo {\n    chainId: number;\n    address: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    logoURI: string;\n}\n\nexport interface FeeQuote {\n    tokenInfo: TokenInfo;\n    fee: string;\n    balance: string;\n    premiumPercentage?: string;\n}\n\nexport interface UserOpBundle {\n    userOp: UserOp;\n    userOpHash: string;\n}\n\nexport interface VerifyingPaymaster extends UserOpBundle {\n    feeQuote?: FeeQuote;\n}\n\nexport interface UserOp {\n    sender: string;\n    nonce: string;\n    initCode: string;\n    callData: string;\n    signature: string;\n    maxFeePerGas: string;\n    maxPriorityFeePerGas: string;\n    verificationGasLimit: string;\n    callGasLimit: string;\n    preVerificationGas: string;\n    paymasterAndData: string;\n    [key: string]: any;\n}\n\nexport interface TokenPaymaster {\n    tokenPaymasterAddress: string;\n    feeQuotes: FeeQuote[];\n}\n\nexport interface FeeQuotesResponse {\n    verifyingPaymasterGasless?: VerifyingPaymaster;\n    verifyingPaymasterNative: VerifyingPaymaster;\n    tokenPaymaster?: TokenPaymaster;\n}\n\nexport interface UserOpParams {\n    tx: Transaction | Transaction[];\n    feeQuote?: FeeQuote;\n    tokenPaymasterAddress?: string;\n}\n\nexport type SendTransactionParams = UserOpBundle | UserOpParams;\n\nexport type ResolveTransactionParams = UserOpBundle | Omit<UserOpParams, 'tx'>;\n\nexport enum SmartAccountType {\n    SIMPLE = 'SIMPLE',\n    CYBERCONNECT = 'CYBERCONNECT',\n    BICONOMY = 'BICONOMY',\n}\n", "export const rpcUrl = (): string => {\n    const productionApi = 'https://rpc.particle.network';\n    const developmentApi = 'https://rpc-debug.particle.network';\n    //@ts-ignore\n    const dev = typeof window !== 'undefined' && window.__PARTICLE_ENVIRONMENT__ === 'development';\n    return dev ? developmentApi : productionApi;\n};\n\nexport function payloadId(): number {\n    const date = Date.now() * Math.pow(10, 3);\n    const extra = Math.floor(Math.random() * Math.pow(10, 3));\n    return date + extra;\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,oBAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIlB,IAAK,uBAAL,CAAKA,yBAAL;AACHA,uBAAAA,qBAAA,gBAAa,KAAb;AACAA,uBAAAA,qBAAA,aAAU,KAAV;AACAA,uBAAAA,qBAAA,oBAAiB,KAAjB;AAHQ,SAAAA;AAAA,GAAA,uBAAA,CAAA,CAAA;AAML,IAAK,wBAAL,CAAKC,0BAAL;AACHA,wBAAA,aAAU;AACVA,wBAAA,aAAU;AACVA,wBAAA,YAAS;AAHD,SAAAA;AAAA,GAAA,wBAAA,CAAA,CAAA;AAML,IAAM,iBAAN,MAAkD;EAErD,YACY,cACA,aAAkC,GAC5C;AAFU,SAAA,eAAA;AACA,SAAA,aAAA;AAHZ,SAAQ,SAAS,IAAI,cAAAC,QAAa;AAK9B,SAAK,OAAO,gBAAgB,GAAG;AAE/B,QAAI,CAAC,OAAO,OAAO,mBAAmB,EAAE,SAAS,UAAU,GAAG;AAC1D,YAAM,IAAI,MAAM,mCAAmC,OAAO,OAAO,mBAAmB,GAAG;IAC3F;EACJ;EAQA,uBAAuB,QAAkC;AACrD,SAAK,OAAO,KAAK,0BAA8B,MAAM;EACzD;EAOA,sBAAsB,OAAc;AAChC,SAAK,OAAO,KAAK,yBAA6B,KAAK;EACvD;EAEA,GAAG,OAAe,UAAqB;AACnC,QAAI,6BAAiC,OAAO;AACxC,WAAK,OAAO,GAAG,OAAO,QAAQ;IAClC,OAAO;AACH,WAAK,aAAa,SAAS,GAAG,OAAO,QAAQ;IACjD;AACA,WAAO;EACX;EAEA,KAAK,OAAe,UAAqB;AACrC,QAAI,6BAAiC,OAAO;AACxC,WAAK,OAAO,KAAK,OAAO,QAAQ;IACpC,OAAO;AACH,WAAK,aAAa,SAAS,KAAK,OAAO,QAAQ;IACnD;AACA,WAAO;EACX;EAEA,IAAI,OAAe,UAAqB;AACpC,QAAI,6BAAiC,OAAO;AACxC,WAAK,OAAO,IAAI,OAAO,QAAQ;IACnC,OAAO;AACH,WAAK,aAAa,SAAS,IAAI,OAAO,QAAQ;IAClD;AACA,WAAO;EACX;EAEA,eAAe,OAAe,UAAqB;AAC/C,QAAI,6BAAiC,OAAO;AACxC,WAAK,OAAO,eAAe,OAAO,QAAQ;IAC9C,OAAO;AACH,WAAK,aAAa,SAAS,eAAe,OAAO,QAAQ;IAC7D;AACA,WAAO;EACX;EAEA,SAA4B;AACxB,WAAO,KAAK,QAAQ;MAChB,QAAQ;IACZ,CAAC;EACL;EAEM,QAAQ,SAAgD;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAC1D,UAAI,QAAQ,WAAW,yBAAyB,QAAQ,WAAW,gBAAgB;AAC/E,cAAM,KAAK,aAAa,SAAS,QAAQ,OAAO;AAChD,cAAM,UAAU,MAAM,KAAK,aAAa,WAAW;AACnD,eAAO,CAAC,OAAO;MACnB,WAAW,QAAQ,WAAW,uBAAuB;AACjD,YAAI,CAAC,QAAQ,QAAQ;AACjB,iBAAO,QAAQ,OAAO,IAAI,MAAM,8BAA8B,CAAC;QACnE;AACA,cAAM,SAAS,QAAQ,OAAO;AAE9B,cAAM,kBAAkB,MAAM,KAAK,aAAa,aAAa,MAAM;AACnE,YAAI,KAAK,eAAe,GAA6B;AACjD,gBAAM,EAAE,QAAQ,WAAW,IACvB,gBAAgB,6BAA6B,gBAAgB;AACjE,iBAAO,KAAK,aAAa,kBAAkB,EAAE,QAAQ,WAAW,CAAC;QACrE,WAAW,KAAK,eAAe,GAAoC;AAC/D,gBAAM,EAAE,QAAQ,WAAW,IAAI,gBAAgB;AAC/C,iBAAO,KAAK,aAAa,kBAAkB,EAAE,QAAQ,WAAW,CAAC;QACrE;AAEA,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,eAAK,OAAO,mBAAmB,uBAA2B;AAC1D,eAAK,OAAO,mBAAmB,wBAA4B;AAC3D,eAAK,OAAO,KAAK,0BAA8B,CAAO,WAAqC,QAAA,MAAA,MAAA,aAAA;AACvF,gBAAI;AACA,oBAAM,aAAa,cAAA,eAAA,CAAA,GAAK,MAAA,GAAL,EAAa,IAAI,OAAO,CAAA;AAC3C,oBAAM,SAAS,MAAM,KAAK,aAAa,gBAAgB,UAAU;AACjE,sBAAQ,MAAM;YAClB,SAAS,OAAT;AACI,qBAAO,KAAK;YAChB;UACJ,CAAA,CAAC;AACD,eAAK,OAAO,KAAK,yBAA6B,MAAM;AACpD,eAAK,OAAO,KAAK,0BAA8B,eAAe;QAClE,CAAC;MACL;AAEA,aAAO,KAAK,aAAa,SAAS,QAAQ,OAAO;IACrD,CAAA;EAAA;AACJ;AEMO,IAAK,oBAAL,CAAKC,sBAAL;AACHA,oBAAA,YAAS;AACTA,oBAAA,kBAAe;AACfA,oBAAA,cAAW;AAHH,SAAAA;AAAA,GAAA,oBAAA,CAAA,CAAA;ACxIL,IAAM,SAAS,MAAc;AAChC,QAAM,gBAAgB;AACtB,QAAM,iBAAiB;AAEvB,QAAM,MAAM,OAAO,WAAW,eAAe,OAAO,6BAA6B;AACjF,SAAO,MAAM,iBAAiB;AAClC;AAEO,SAAS,YAAoB;AAChC,QAAM,OAAO,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,CAAC;AACxC,QAAM,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC;AACxD,SAAO,OAAO;AAClB;AFKO,IAAM,eAAN,MAAmB;EAKtB,YAAmB,UAAqC,QAA4B;AAAjE,SAAA,WAAA;AAAqC,SAAA,SAAA;AAFxD,SAAQ,mBAAA;AAgCR,SAAQ,aAAa,MAA6B,QAAA,MAAA,MAAA,aAAA;AAC9C,aAAO,MAAM,KAAK,SAAS,QAAQ,EAAE,QAAQ,cAAc,CAAC;IAChE,CAAA;AA/BI,QAAI,KAAK,OAAO,UAAU,YAAY,KAAK,OAAO,UAAU,SAAS,SAAS,GAAG;AAC7E,WAAK,mBAAA;IACT,WAAW,KAAK,OAAO,UAAU,gBAAgB,KAAK,OAAO,UAAU,aAAa,SAAS,GAAG;AAC5F,WAAK,mBAAA;IACT,WAAW,KAAK,OAAO,UAAU,UAAU,KAAK,OAAO,UAAU,OAAO,SAAS,GAAG;AAChF,WAAK,mBAAA;IACT,OAAO;AACH,YAAM,IAAI,MAAM,uCAAuC;IAC3D;AAEA,SAAK,aAAa,cAAM,OAAO;MAC3B,SAAS,GAAG,OAAO;MACnB,SAAS;IACb,CAAC;AAED,SAAK,WAAW,aAAa,QAAQ,IAAI,CAACC,YAAW;AAtC7D,UAAA,IAAA,IAAA;AAuCY,WAAI,KAAAA,WAAA,OAAA,SAAAA,QAAQ,SAAR,OAAA,SAAA,GAAc,QAAQ;AACtBA,gBAAO,UAAU,GAAGA,QAAO,YAAU,KAAAA,QAAO,YAAP,OAAA,SAAA,GAAgB,SAAS,GAAA,KAAO,MAAM,cACvE,KAAAA,WAAA,OAAA,SAAAA,QAAQ,SAAR,OAAA,SAAA,GAAc;MAEtB;AACA,aAAOA;IACX,CAAC;EACL;EAEA,oBAAoB,MAAwB;AACxC,SAAK,mBAAmB;EAC5B;EAMc,mBAA2C;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAxD7D,UAAA,IAAA,IAAA;AAyDQ,YAAM,UAAU,MAAM,KAAK,WAAW;AACtC,YAAM,SAAS,MAAM,KAAK,mBAAmB;AAC7C,YAAM,gBAAgB,MAAM,KAAK,SAAS,QAAQ,EAAE,QAAQ,eAAe,CAAC,GAAG;AAC/E,UAAI,KAAK,qBAAA,YAAgD;AACrD,cAAM,iBAAgB,KAAA,KAAK,OAAO,UAAU,aAAtB,OAAA,SAAA,GAAgC,KAAK,CAAC,SAAS,KAAK,YAAY,OAAO,OAAO,CAAA;AACpG,YAAI,eAAe;AACf,iBAAO;YACH,MAAA;YACA,SAAS,cAAc;YACvB,gBAAgB;YAChB;UACJ;QACJ;MACJ,WAAW,KAAK,qBAAA,gBAAoD;AAChE,cAAM,iBAAgB,KAAA,KAAK,OAAO,UAAU,iBAAtB,OAAA,SAAA,GAAoC,KAAK,CAAC,SAAS,KAAK,YAAY,OAAO,OAAO,CAAA;AACxG,YAAI,eAAe;AACf,iBAAO;YACH,MAAA;YACA,SAAS,cAAc;YACvB,gBAAgB;YAChB;UACJ;QACJ;MACJ,WAAW,KAAK,qBAAA,UAA8C;AAC1D,cAAM,iBAAgB,KAAA,KAAK,OAAO,UAAU,WAAtB,OAAA,SAAA,GAA8B,KAAK,CAAC,SAAS,KAAK,YAAY,OAAO,OAAO,CAAA;AAClG,YAAI,eAAe;AACf,iBAAO;YACH,MAAA;YACA,SAAS,cAAc;YACvB,gBAAgB;YAChB;UACJ;QACJ;MACJ,OAAO;AACH,cAAM,IAAI,MAAM,6CAA6C,KAAK,kBAAkB;MACxF;AACA,YAAM,IAAI,MAAM,4CAA4C,oCAAoC;IACpG,CAAA;EAAA;EAEM,qBAAkD;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAhG5D,UAAA;AAiGQ,YAAM,UAAU,MAAM,KAAK,WAAW;AACtC,YAAM,gBAAe,KAAA,KAAK,OAAO,UAAU,qBAAtB,OAAA,SAAA,GAAwC,KAAK,CAAC,SAAS,KAAK,YAAY,OAAO,OAAO,CAAA;AAC3G,aAAO,gBAAA,OAAA,SAAA,aAAc;IACzB,CAAA;EAAA;EAEM,aAAa,IAA6D;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAC5E,YAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAClD,aAAO,KAAK,QAA2B;QACnC,QAAQ;QACR,QAAQ,CAAC,eAAe,MAAM,QAAQ,EAAE,IAAI,KAAK,CAAC,EAAE,CAAC;MACzD,CAAC;IACL,CAAA;EAAA;EAEM,mBAAmB,IAA8E;AAAA,WAAA,QAAA,MAAA,WAAA,WAA9E,EAAE,IAAI,UAAU,sBAAsB,GAAwC;AACnG,YAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAClD,aAAO,MAAM,KAAK,QAAsB;QACpC,QAAQ;QACR,QAAQ,CAAC,eAAe,MAAM,QAAQ,EAAE,IAAI,KAAK,CAAC,EAAE,GAAG,UAAU,qBAAqB,EAAE;UACpF,CAAC,QAAQ,CAAC,CAAC;QACf;MACJ,CAAC;IACL,CAAA;EAAA;EAEM,kBAAkB,IAAuD;AAAA,WAAA,QAAA,MAAA,WAAA,WAAvD,EAAE,YAAY,OAAO,GAAkC;AAC3E,YAAM,OAAO,MAAM,KAAK,SAAS,QAAQ,EAAE,QAAQ,eAAe,CAAC;AACnE,YAAM,YAAY,MAAM,KAAK,SAAS,QAAQ;QAC1C,QAAQ;QACR,QAAQ,CAAC,YAAY,KAAK,EAAE;MAChC,CAAC;AACD,aAAO,cAAA,eAAA,CAAA,GAAK,MAAA,GAAL,EAAa,UAAU,CAAA;IAClC,CAAA;EAAA;EAEM,kBAAkB,IAAuD;AAAA,WAAA,QAAA,MAAA,WAAA,WAAvD,EAAE,YAAY,OAAO,GAAkC;AAC3E,YAAM,eAAe,MAAM,KAAK,kBAAkB,EAAE,YAAY,OAAO,CAAC;AACxE,aAAO,KAAK,wBAAwB,YAAY;IACpD,CAAA;EAAA;EAEM,wBAAwB,QAAiC;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAC3D,YAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAClD,aAAO,KAAK,QAAgB;QACxB,QAAQ;QACR,QAAQ,CAAC,eAAe,MAAM;MAClC,CAAC;IACL,CAAA;EAAA;EAEM,gBAAgB,QAAgD;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAClE,UACI,OAAO,UAAU,eAAe,KAAK,QAAQ,YAAY,KACzD,OAAO,UAAU,eAAe,KAAK,QAAQ,QAAQ,GACvD;AACE,cAAM,EAAE,YAAY,OAAO,IAAI;AAC/B,YAAI,cAAc,QAAQ;AACtB,iBAAO,KAAK,kBAAkB,EAAE,YAAY,OAAO,CAAC;QACxD;MACJ;AAEA,YAAM,EAAE,IAAI,UAAU,sBAAsB,IAAI;AAChD,YAAM,eAAe,MAAM,KAAK,mBAAmB,EAAE,IAAI,UAAU,sBAAsB,CAAC;AAC1F,aAAO,KAAK,kBAAkB,YAAY;IAC9C,CAAA;EAAA;EAEM,aAA+B;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AACjC,YAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAClD,YAAM,WAAW,MAAM,KAAK,QAAmB;QAC3C,QAAQ;QACR,QAAQ,CAAC,aAAa;MAC1B,CAAC;AACD,aAAO,SAAS;IACpB,CAAA;EAAA;EAEM,aAA8B;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAChC,YAAM,OAAO,MAAM,KAAK,SAAS,QAAQ,EAAE,QAAQ,eAAe,CAAC;AACnE,UAAI,CAAC,QAAQ,KAAK,WAAW,GAAG;AAC5B,eAAO;MACX;AACA,YAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAClD,YAAM,WAAW,YAAY,cAAc,QAAQ,cAAc,WAAW,KAAK;AACjF,UAAI,OAAO,WAAW,eAAe,cAAc;AAC/C,cAAM,UAAU,aAAa,QAAQ,QAAQ;AAC7C,YAAI,SAAS;AACT,iBAAO;QACX;MACJ;AAEA,YAAM,UAAU,MAAM,KAAK,WAAW;AACtC,YAAM,UAAU,QAAQ;AACxB,UAAI,OAAO,WAAW,eAAe,cAAc;AAC/C,qBAAa,QAAQ,UAAU,OAAO;MAC1C;AACA,aAAO;IACX,CAAA;EAAA;EAEM,WAA4B;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAC9B,YAAM,OAAO,MAAM,KAAK,SAAS,QAAQ,EAAE,QAAQ,eAAe,CAAC;AACnE,aAAO,KAAK;IAChB,CAAA;EAAA;EAEM,aAA+B;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AACjC,YAAM,UAAU,MAAM,KAAK,WAAW;AACtC,aAAO,QAAQ;IACnB,CAAA;EAAA;EAEM,uBAAwC;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAC1C,aAAO,KAAK,gBAAgB;QACxB,IAAI;UACA,IAAI;UACJ,MAAM;QACV;MACJ,CAAC;IACL,CAAA;EAAA;EAEM,QAAW,KAAmC;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AAChD,YAAM,UAAU,MAAM,KAAK,WAAW;AACtC,YAAM,WAAW,MAAM,KAAK,WACvB;QACG;QACA,cAAA,eAAA,CAAA,GACO,GAAA,GADP;UAEI,IAAI,UAAU;UACd,SAAS;QACb,CAAA;QACA;UACI,QAAQ;YACJ,SAAS,OAAO,OAAO;YACvB,aAAa,KAAK,OAAO;YACzB,YAAY,KAAK,OAAO;UAC5B;QACJ;MACJ,EACC,KAAK,CAAC,QAAQ,IAAI,IAAI;AAC3B,UAAI,SAAS,OAAO;AAChB,eAAO,QAAQ,OAAO,SAAS,KAAK;MACxC,OAAO;AACH,eAAO,SAAS;MACpB;IACJ,CAAA;EAAA;AACJ;",
  "names": ["SendTransactionMode", "SendTransactionEvent", "EventEmitter", "SmartAccountType", "config"]
}
