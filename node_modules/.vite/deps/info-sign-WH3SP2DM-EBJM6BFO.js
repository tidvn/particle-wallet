import {
  D,
  L,
  V,
  nn,
  require_lib
} from "./chunk-4I7OSYU6.js";
import {
  C
} from "./chunk-2DY4KXZF.js";
import {
  x
} from "./chunk-3KDTPZMW.js";
import "./chunk-LGSFMKB7.js";
import {
  N
} from "./chunk-HFPUBT3M.js";
import {
  kn
} from "./chunk-QHFOOEJW.js";
import "./chunk-52K3MTCP.js";
import {
  Fa,
  Ia,
  Na,
  Pe,
  RecordType,
  SolanaEnhancedMethod,
  SolanaRpcMethod,
  Xo,
  Zo,
  analyticsRecord,
  button_default,
  ee,
  f,
  isNeedRestoreWallet,
  modal_default,
  particleAuth,
  syncUserInfo,
  tabs_default,
  useTranslation,
  za
} from "./chunk-5K5SNHHZ.js";
import "./chunk-TL65SHMZ.js";
import "./chunk-XTL3VBNC.js";
import "./chunk-6SATDP2A.js";
import "./chunk-OKCYEHW4.js";
import "./chunk-YM32VLGM.js";
import "./chunk-E7F3KV4Y.js";
import {
  require_bs58
} from "./chunk-WN444VHT.js";
import "./chunk-IXJJAVWB.js";
import "./chunk-GEJW2VKU.js";
import "./chunk-4YCFGIGR.js";
import "./chunk-XBOBPJUC.js";
import "./chunk-ZNXRVEFR.js";
import "./chunk-7Z7TKVC7.js";
import "./chunk-5JEUK2R2.js";
import "./chunk-QUUJLUTV.js";
import "./chunk-E4YFJ4DO.js";
import "./chunk-ZFG3MDGT.js";
import "./chunk-ZS6JYA4T.js";
import "./chunk-THPC5MR7.js";
import {
  require_react
} from "./chunk-YVDZNGKE.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@particle-network/auth-core-modal/esm/info-sign-WH3SP2DM.js
var import_bs58 = __toESM(require_bs58(), 1);
var import_react = __toESM(require_react(), 1);
var import_react_copy_to_clipboard = __toESM(require_lib(), 1);
"use client";
var Ts = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
var Ns = { async findAssociatedTokenAddress(C2, i) {
  let { TOKEN_PROGRAM_ID: d } = await import("./esm-VGTMTMXN.js"), { PublicKey: p } = await import("./index.browser.esm-ZIQA3Q5F.js");
  return p.findProgramAddressSync([new p(C2).toBuffer(), d.toBuffer(), new p(i).toBuffer()], new p(Ts))[0];
} };
var E = Ns;
function Ps(C2) {
  let { method: i, param: d, chainId: p } = C2, { t: o } = useTranslation(), A = Na(), { setPaymentVerify: os, userInfo: m, setPaymentPassword: is } = Fa(), { events: rs } = Ia(), { modalOptions: w } = za(), { authCoreModal: ts } = ee(), { errorHandle: ds } = C(), [U, _] = (0, import_react.useState)(false), z = x(), [c, ls] = (0, import_react.useState)(), [S, cs] = (0, import_react.useState)(), [k, ms] = (0, import_react.useState)(), [gs, u] = (0, import_react.useState)(""), [ps, h] = (0, import_react.useState)(""), { hasSetPaymentPassword: P, showSetPaymentPasswordOrConfirm: vs } = V(), g = (0, import_react.useMemo)(() => ({ id: p || particleAuth.solana.chainId, name: "Solana" }), []), fs = (0, import_react.useMemo)(() => {
    let n = particleAuth.solana.selectedAddress;
    return Pe(n);
  }, []);
  (0, import_react.useEffect)(() => {
    syncUserInfo().catch((n) => {
    }), isNeedRestoreWallet() && A("account/master-password/verify");
  }, [A]);
  let us = () => {
    syncUserInfo().then(() => {
      F();
    }).catch((n) => {
      var s;
      _(false), z.error((s = n.message) != null ? s : "Sign Error");
    });
  }, B = (n, s) => {
    rs.emit("signResponse", { result: n, error: s });
  };
  async function V2(n, s) {
    if (!s)
      return [];
    let a = await Promise.all(s.map(n));
    return s.filter((v, l) => a[l]);
  }
  let F = async () => {
    var n, s;
    !i || (analyticsRecord({ record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK }), (n = m == null ? void 0 : m.security_account) != null && n.has_set_payment_password ? os({ visible: true, onVerifyCompleted: I }) : i === SolanaRpcMethod.signAndSendTransaction || i === SolanaRpcMethod.signTransaction || i === SolanaRpcMethod.signAllTransactions || ((s = w == null ? void 0 : w.promptSettingConfig) == null ? void 0 : s.promptPaymentPasswordSettingWhenSign) === 3 ? vs(I) : I());
  }, I = async () => {
    var s;
    if (!i)
      return;
    _(true);
    let n;
    try {
      if (i === SolanaRpcMethod.signMessage)
        n = await particleAuth.solana.signMessage(d);
      else if (i === SolanaRpcMethod.signAndSendTransaction)
        n = await particleAuth.solana.signAndSendTransaction(d, g.id);
      else if (i === SolanaRpcMethod.signTransaction)
        n = await particleAuth.solana.signTransaction(d, g.id);
      else if (i === SolanaRpcMethod.signAllTransactions)
        n = await particleAuth.solana.signAllTransactions(d, g.id);
      else
        throw new Error("Unknown method");
      analyticsRecord({ record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_SUCCESS });
    } catch (a) {
      analyticsRecord({ record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_FAILURE }), (a == null ? void 0 : a.error_code) === 50103 && !((s = m == null ? void 0 : m.security_account) != null && s.has_set_payment_password) ? us() : (a == null ? void 0 : a.message) === "Local Key not found" || (a == null ? void 0 : a.message) === "Master password decryption error" ? A("account/master-password/verify") : ds(a);
    } finally {
      _(false);
    }
    n && B(n);
  };
  (0, import_react.useEffect)(() => {
    if (i === SolanaRpcMethod.signMessage)
      u(o("sign.signature_message")), h(o("sign.signature_title"));
    else if (i === SolanaRpcMethod.signAndSendTransaction) {
      u(o("sign.send_transaction")), h(o("sign.approve_and").format(Zo(g)));
      let n = d.serialize({ requireAllSignatures: false, verifySignatures: false });
      y([import_bs58.default.encode(n)]);
    } else if (i === SolanaRpcMethod.signTransaction) {
      u(o("sign.sign_transaction")), h(o("sign.sign_but"));
      let n = d.serialize({ requireAllSignatures: false, verifySignatures: false });
      y([import_bs58.default.encode(n)]);
    } else if (i === SolanaRpcMethod.signAllTransactions) {
      u(o("sign.sign_transaction")), h(o("sign.sign_but"));
      let n = d.map((s) => import_bs58.default.encode(s.serialize({ requireAllSignatures: false, verifySignatures: false })));
      y(n);
    } else
      throw new Error("Unknown method");
  }, [d]), (0, import_react.useEffect)(() => {
    particleAuth.solana.connect();
  }, []);
  let y = (n) => {
    particleAuth.solana.request({ chainId: g.id, method: SolanaEnhancedMethod.enhancedDeserializeTransaction, params: n }).then((s) => {
      var a, v;
      ls(s), V2(async (l) => {
        let b = await E.findAssociatedTokenAddress(particleAuth.solana.selectedAddress, l.mint);
        return l.associatedTokenAddress === b.toBase58();
      }, (a = s == null ? void 0 : s.estimatedChanges) == null ? void 0 : a.nfts).then((l) => {
        cs(l);
      }), V2(async (l) => {
        let b = await E.findAssociatedTokenAddress(particleAuth.solana.selectedAddress, l.mint);
        return l.associatedTokenAddress === b.toBase58();
      }, (v = s == null ? void 0 : s.estimatedChanges) == null ? void 0 : v.tokens).then((l) => {
        ms(l);
      });
    }).catch((s) => {
      var a;
      modal_default.error({ title: (a = s.message) != null ? a : "Deserialize Transaction Error", okCancel: true, cancelText: o("common.cancel"), okText: o("common.retry"), wrapClassName: "auth-core-modal-error", getContainer: () => ts.rootBody, onOk: () => {
        y(n);
      } });
    });
  }, hs = () => {
    let s = new TextDecoder().decode(d);
    return import_react.default.createElement("div", { className: "sign-message" }, import_react.default.createElement("div", { className: "message" + (P ? "" : " no-password-tip") }, import_react.default.createElement("div", { className: "pre-wrap personal-message" }, s)));
  }, ys = () => {
    var n;
    return import_react.default.createElement(tabs_default, { defaultActiveKey: "1", items: [{ label: o("sign.details"), key: "1", children: import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement("div", { className: "balance-change" }, import_react.default.createElement("div", { className: "title" }, o("sign.estimated_balance_change")), import_react.default.createElement("div", { className: "change-body" }, (n = c == null ? void 0 : c.estimatedChanges) == null ? void 0 : n.sols.filter((s) => {
      var a, v;
      return s.address === ((v = (a = particleAuth) == null ? void 0 : a.solana) == null ? void 0 : v.selectedAddress);
    }).map((s, a) => import_react.default.createElement("div", { className: "change-title", key: `sol-change-${a}` }, "SOL", import_react.default.createElement("div", { className: "change-val", style: s.lamportsChange < 0 ? { color: "#ea4335" } : {} }, s.lamportsChange < 0 ? "" : "+", kn(s.lamportsChange, 9)))), S == null ? void 0 : S.map((s, a) => import_react.default.createElement("div", { className: "change-title", key: `nft-change-${a}` }, s.name ? s.name : "Unknown NFT", import_react.default.createElement("div", { className: "change-val", style: s.amountChange < 0 ? { color: "#ea4335" } : {} }, s.amountChange < 0 ? "" : "+", s.amountChange))), k == null ? void 0 : k.map((s, a) => import_react.default.createElement("div", { className: "change-title", key: `token-change-${a}` }, s.name ? s.name : "Unknown Token", import_react.default.createElement("div", { className: "change-val", style: s.amountChange < 0 ? { color: "#ea4335" } : {} }, s.amountChange < 0 ? "" : "+", kn(s.amountChange, s.decimals)))))), import_react.default.createElement("div", { className: "net-fee solana" }, import_react.default.createElement("div", { className: "title" }, o("sign.network_fee"), c && import_react.default.createElement("div", { className: "fee-val" }, kn(c.estimatedLamportsFee, 9), " SOL")))) }, { label: o("sign.data"), key: "2", children: import_react.default.createElement("div", null, c == null ? void 0 : c.instructions.map((s, a) => import_react.default.createElement("div", { className: "inner-instruction", key: `instruction-${a}` }, import_react.default.createElement("div", { className: "inner-content" }, import_react.default.createElement("div", { className: "content-item" }, import_react.default.createElement("div", { className: "item" }, import_react.default.createElement("div", { className: "item-0" }, "#", a + 1, " - ", o(`program.${s.type}`)), import_react.default.createElement("div", { className: "item-1 mt10" }, o("sign.program_id"), import_react.default.createElement("span", null, Pe(s.programId))), import_react.default.createElement("div", { className: "item-1 mt15" }, o("sign.data"), import_react.default.createElement("span", null, Pe(s.data))))))))) }] });
  };
  return import_react.default.createElement("div", { className: "info-sign" }, import_react.default.createElement("style", null, L), !P && import_react.default.createElement("div", { className: "has-payment-password" }, import_react.default.createElement("div", { className: "has-payment-password-icon" }), import_react.default.createElement("div", { className: "has-payment-password-tip" }, o("account.waring_tip1")), import_react.default.createElement("div", { className: "has-payment-password-set", onClick: is }, o("account.set"))), import_react.default.createElement("div", { className: "scroll-part" + (P ? "" : " no-password-tip") }, import_react.default.createElement(nn, { userInfo: m, transactionInfo: c }), import_react.default.createElement("div", { className: "info-request" }, gs), import_react.default.createElement("div", { className: "info-title" }, import_react.default.createElement("img", { src: Xo(g), alt: "" }), Zo(g)), import_react.default.createElement(import_react_copy_to_clipboard.default, { text: particleAuth.solana.selectedAddress, onCopy: () => z.success(o("new.copied_to")) }, import_react.default.createElement("div", { className: "info-address" }, fs, import_react.default.createElement("div", { className: "copy-icon" }, import_react.default.createElement(D, null)))), import_react.default.createElement("div", { className: "info-des" }, ps), import_react.default.createElement("div", { className: "apart-line" }), i === SolanaRpcMethod.signMessage && hs(), i !== SolanaRpcMethod.signMessage && ys()), import_react.default.createElement("div", { className: "btn-box" }, import_react.default.createElement("div", null, import_react.default.createElement(button_default, { className: "btn-cancel", onClick: () => {
    U || B(void 0, f.userRejectedRequest());
  } }, o("common.cancel")), import_react.default.createElement(button_default, { className: "btn-approve", onClick: F, loading: U }, o("common.confirm"))), import_react.default.createElement(N, null)));
}
var Zs = Ps;
export {
  Zs as default
};
//# sourceMappingURL=info-sign-WH3SP2DM-EBJM6BFO.js.map
