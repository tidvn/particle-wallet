import {
  AwsSdkSigV4Signer,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  calculateBodyLength,
  createPaginator,
  defaultUserAgent,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  normalizeProvider,
  parseUrl,
  require_build,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig
} from "./chunk-QDWEKOT4.js";
import {
  Client,
  Command,
  FetchHttpHandler,
  HttpRequest,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  _json,
  collectBody,
  createAggregatedClient,
  decorateServiceException,
  expectBoolean,
  expectInt32,
  expectNonNull,
  expectNumber,
  expectString,
  fromBase64,
  fromUtf8,
  getDefaultExtensionConfiguration,
  getHttpHandlerExtensionConfiguration,
  loadConfigsForDefaultMode,
  parseEpochTimestamp,
  resolveDefaultRuntimeConfig,
  resolveHttpHandlerRuntimeConfig,
  streamCollector,
  take,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-22A723SB.js";
import "./chunk-7Z7TKVC7.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@aws-sdk/client-kms/dist-es/auth/httpAuthSchemeProvider.js
var defaultKMSHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "kms",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultKMSHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-kms/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "kms"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-kms/package.json
var package_default = {
  name: "@aws-sdk/client-kms",
  description: "AWS SDK for JavaScript Kms Client for Node.js, Browser and React Native",
  version: "3.515.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-kms",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo kms"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "3.0.0",
    "@aws-crypto/sha256-js": "3.0.0",
    "@aws-sdk/client-sts": "3.515.0",
    "@aws-sdk/core": "3.513.0",
    "@aws-sdk/credential-provider-node": "3.515.0",
    "@aws-sdk/middleware-host-header": "3.515.0",
    "@aws-sdk/middleware-logger": "3.515.0",
    "@aws-sdk/middleware-recursion-detection": "3.515.0",
    "@aws-sdk/middleware-user-agent": "3.515.0",
    "@aws-sdk/region-config-resolver": "3.515.0",
    "@aws-sdk/types": "3.515.0",
    "@aws-sdk/util-endpoints": "3.515.0",
    "@aws-sdk/util-user-agent-browser": "3.515.0",
    "@aws-sdk/util-user-agent-node": "3.515.0",
    "@smithy/config-resolver": "^2.1.1",
    "@smithy/core": "^1.3.2",
    "@smithy/fetch-http-handler": "^2.4.1",
    "@smithy/hash-node": "^2.1.1",
    "@smithy/invalid-dependency": "^2.1.1",
    "@smithy/middleware-content-length": "^2.1.1",
    "@smithy/middleware-endpoint": "^2.4.1",
    "@smithy/middleware-retry": "^2.1.1",
    "@smithy/middleware-serde": "^2.1.1",
    "@smithy/middleware-stack": "^2.1.1",
    "@smithy/node-config-provider": "^2.2.1",
    "@smithy/node-http-handler": "^2.3.1",
    "@smithy/protocol-http": "^3.1.1",
    "@smithy/smithy-client": "^2.3.1",
    "@smithy/types": "^2.9.1",
    "@smithy/url-parser": "^2.1.1",
    "@smithy/util-base64": "^2.1.1",
    "@smithy/util-body-length-browser": "^2.1.1",
    "@smithy/util-body-length-node": "^2.2.1",
    "@smithy/util-defaults-mode-browser": "^2.1.1",
    "@smithy/util-defaults-mode-node": "^2.2.0",
    "@smithy/util-endpoints": "^1.1.1",
    "@smithy/util-middleware": "^2.1.1",
    "@smithy/util-retry": "^2.1.1",
    "@smithy/util-utf8": "^2.1.1",
    tslib: "^2.5.0"
  },
  devDependencies: {
    "@smithy/service-client-documentation-generator": "^2.1.1",
    "@tsconfig/node14": "1.0.3",
    "@types/node": "^14.14.31",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~4.9.5"
  },
  engines: {
    node: ">=14.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-kms",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-kms"
  }
};

// node_modules/@aws-sdk/client-kms/dist-es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build());

// node_modules/@aws-sdk/client-kms/dist-es/endpoint/ruleset.js
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = { [s]: false, "type": "String" };
var i = { [s]: true, "default": false, "type": "Boolean" };
var j = { [v]: "Endpoint" };
var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
var m = {};
var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
var p = [k];
var q = [l];
var r = [{ [v]: "Region" }];
var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }, { conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ endpoint: { url: "https://kms-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ endpoint: { url: "https://kms-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ endpoint: { url: "https://kms.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://kms.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-kms/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  });
};

// node_modules/@aws-sdk/client-kms/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2014-11-01",
    base64Decoder: config?.base64Decoder ?? fromBase64,
    base64Encoder: config?.base64Encoder ?? toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
    extensions: config?.extensions ?? [],
    httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultKMSHttpAuthSchemeProvider,
    httpAuthSchemes: config?.httpAuthSchemes ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: config?.logger ?? new NoOpLogger(),
    serviceId: config?.serviceId ?? "KMS",
    urlParser: config?.urlParser ?? parseUrl,
    utf8Decoder: config?.utf8Decoder ?? fromUtf8,
    utf8Encoder: config?.utf8Encoder ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-kms/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
    credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,
    region: config?.region ?? invalidProvider("Region is missing"),
    requestHandler: config?.requestHandler ?? new FetchHttpHandler(defaultConfigProvider),
    retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: config?.sha256 ?? import_sha256_browser.Sha256,
    streamCollector: config?.streamCollector ?? streamCollector,
    useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-kms/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-kms/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-kms/dist-es/KMSClient.js
var KMSClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveRegionConfig(_config_1);
    const _config_3 = resolveEndpointConfig(_config_2);
    const _config_4 = resolveRetryConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveUserAgentConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
      identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return defaultKMSHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};

// node_modules/@aws-sdk/client-kms/dist-es/models/KMSServiceException.js
var KMSServiceException = class extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, KMSServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-kms/dist-es/models/models_0.js
var AlgorithmSpec = {
  RSAES_OAEP_SHA_1: "RSAES_OAEP_SHA_1",
  RSAES_OAEP_SHA_256: "RSAES_OAEP_SHA_256",
  RSAES_PKCS1_V1_5: "RSAES_PKCS1_V1_5",
  RSA_AES_KEY_WRAP_SHA_1: "RSA_AES_KEY_WRAP_SHA_1",
  RSA_AES_KEY_WRAP_SHA_256: "RSA_AES_KEY_WRAP_SHA_256"
};
var AlreadyExistsException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "AlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "AlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, AlreadyExistsException.prototype);
  }
};
var DependencyTimeoutException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "DependencyTimeoutException",
      $fault: "server",
      ...opts
    });
    this.name = "DependencyTimeoutException";
    this.$fault = "server";
    Object.setPrototypeOf(this, DependencyTimeoutException.prototype);
  }
};
var InvalidArnException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidArnException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidArnException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidArnException.prototype);
  }
};
var KMSInternalException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "KMSInternalException",
      $fault: "server",
      ...opts
    });
    this.name = "KMSInternalException";
    this.$fault = "server";
    Object.setPrototypeOf(this, KMSInternalException.prototype);
  }
};
var KMSInvalidStateException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "KMSInvalidStateException",
      $fault: "client",
      ...opts
    });
    this.name = "KMSInvalidStateException";
    this.$fault = "client";
    Object.setPrototypeOf(this, KMSInvalidStateException.prototype);
  }
};
var NotFoundException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, NotFoundException.prototype);
  }
};
var CloudHsmClusterInUseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CloudHsmClusterInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "CloudHsmClusterInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CloudHsmClusterInUseException.prototype);
  }
};
var CloudHsmClusterInvalidConfigurationException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CloudHsmClusterInvalidConfigurationException",
      $fault: "client",
      ...opts
    });
    this.name = "CloudHsmClusterInvalidConfigurationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CloudHsmClusterInvalidConfigurationException.prototype);
  }
};
var CloudHsmClusterNotActiveException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CloudHsmClusterNotActiveException",
      $fault: "client",
      ...opts
    });
    this.name = "CloudHsmClusterNotActiveException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CloudHsmClusterNotActiveException.prototype);
  }
};
var CloudHsmClusterNotFoundException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CloudHsmClusterNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "CloudHsmClusterNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CloudHsmClusterNotFoundException.prototype);
  }
};
var CloudHsmClusterNotRelatedException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CloudHsmClusterNotRelatedException",
      $fault: "client",
      ...opts
    });
    this.name = "CloudHsmClusterNotRelatedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CloudHsmClusterNotRelatedException.prototype);
  }
};
var CustomKeyStoreInvalidStateException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CustomKeyStoreInvalidStateException",
      $fault: "client",
      ...opts
    });
    this.name = "CustomKeyStoreInvalidStateException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CustomKeyStoreInvalidStateException.prototype);
  }
};
var CustomKeyStoreNotFoundException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CustomKeyStoreNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "CustomKeyStoreNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CustomKeyStoreNotFoundException.prototype);
  }
};
var ConnectionErrorCodeType = {
  CLUSTER_NOT_FOUND: "CLUSTER_NOT_FOUND",
  INSUFFICIENT_CLOUDHSM_HSMS: "INSUFFICIENT_CLOUDHSM_HSMS",
  INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET: "INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET",
  INTERNAL_ERROR: "INTERNAL_ERROR",
  INVALID_CREDENTIALS: "INVALID_CREDENTIALS",
  NETWORK_ERRORS: "NETWORK_ERRORS",
  SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND",
  USER_LOCKED_OUT: "USER_LOCKED_OUT",
  USER_LOGGED_IN: "USER_LOGGED_IN",
  USER_NOT_FOUND: "USER_NOT_FOUND",
  XKS_PROXY_ACCESS_DENIED: "XKS_PROXY_ACCESS_DENIED",
  XKS_PROXY_INVALID_CONFIGURATION: "XKS_PROXY_INVALID_CONFIGURATION",
  XKS_PROXY_INVALID_RESPONSE: "XKS_PROXY_INVALID_RESPONSE",
  XKS_PROXY_INVALID_TLS_CONFIGURATION: "XKS_PROXY_INVALID_TLS_CONFIGURATION",
  XKS_PROXY_NOT_REACHABLE: "XKS_PROXY_NOT_REACHABLE",
  XKS_PROXY_TIMED_OUT: "XKS_PROXY_TIMED_OUT",
  XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION: "XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION",
  XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND: "XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND"
};
var ConnectionStateType = {
  CONNECTED: "CONNECTED",
  CONNECTING: "CONNECTING",
  DISCONNECTED: "DISCONNECTED",
  DISCONNECTING: "DISCONNECTING",
  FAILED: "FAILED"
};
var InvalidAliasNameException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidAliasNameException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidAliasNameException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidAliasNameException.prototype);
  }
};
var LimitExceededException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, LimitExceededException.prototype);
  }
};
var CustomKeyStoreType = {
  AWS_CLOUDHSM: "AWS_CLOUDHSM",
  EXTERNAL_KEY_STORE: "EXTERNAL_KEY_STORE"
};
var XksProxyConnectivityType = {
  PUBLIC_ENDPOINT: "PUBLIC_ENDPOINT",
  VPC_ENDPOINT_SERVICE: "VPC_ENDPOINT_SERVICE"
};
var CustomKeyStoreNameInUseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CustomKeyStoreNameInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "CustomKeyStoreNameInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CustomKeyStoreNameInUseException.prototype);
  }
};
var IncorrectTrustAnchorException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "IncorrectTrustAnchorException",
      $fault: "client",
      ...opts
    });
    this.name = "IncorrectTrustAnchorException";
    this.$fault = "client";
    Object.setPrototypeOf(this, IncorrectTrustAnchorException.prototype);
  }
};
var XksProxyIncorrectAuthenticationCredentialException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyIncorrectAuthenticationCredentialException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyIncorrectAuthenticationCredentialException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyIncorrectAuthenticationCredentialException.prototype);
  }
};
var XksProxyInvalidConfigurationException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyInvalidConfigurationException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyInvalidConfigurationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyInvalidConfigurationException.prototype);
  }
};
var XksProxyInvalidResponseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyInvalidResponseException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyInvalidResponseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyInvalidResponseException.prototype);
  }
};
var XksProxyUriEndpointInUseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyUriEndpointInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyUriEndpointInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyUriEndpointInUseException.prototype);
  }
};
var XksProxyUriInUseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyUriInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyUriInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyUriInUseException.prototype);
  }
};
var XksProxyUriUnreachableException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyUriUnreachableException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyUriUnreachableException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyUriUnreachableException.prototype);
  }
};
var XksProxyVpcEndpointServiceInUseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyVpcEndpointServiceInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyVpcEndpointServiceInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyVpcEndpointServiceInUseException.prototype);
  }
};
var XksProxyVpcEndpointServiceInvalidConfigurationException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyVpcEndpointServiceInvalidConfigurationException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyVpcEndpointServiceInvalidConfigurationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyVpcEndpointServiceInvalidConfigurationException.prototype);
  }
};
var XksProxyVpcEndpointServiceNotFoundException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksProxyVpcEndpointServiceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "XksProxyVpcEndpointServiceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksProxyVpcEndpointServiceNotFoundException.prototype);
  }
};
var GrantOperation = {
  CreateGrant: "CreateGrant",
  Decrypt: "Decrypt",
  DescribeKey: "DescribeKey",
  Encrypt: "Encrypt",
  GenerateDataKey: "GenerateDataKey",
  GenerateDataKeyPair: "GenerateDataKeyPair",
  GenerateDataKeyPairWithoutPlaintext: "GenerateDataKeyPairWithoutPlaintext",
  GenerateDataKeyWithoutPlaintext: "GenerateDataKeyWithoutPlaintext",
  GenerateMac: "GenerateMac",
  GetPublicKey: "GetPublicKey",
  ReEncryptFrom: "ReEncryptFrom",
  ReEncryptTo: "ReEncryptTo",
  RetireGrant: "RetireGrant",
  Sign: "Sign",
  Verify: "Verify",
  VerifyMac: "VerifyMac"
};
var DisabledException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "DisabledException",
      $fault: "client",
      ...opts
    });
    this.name = "DisabledException";
    this.$fault = "client";
    Object.setPrototypeOf(this, DisabledException.prototype);
  }
};
var DryRunOperationException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "DryRunOperationException",
      $fault: "client",
      ...opts
    });
    this.name = "DryRunOperationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, DryRunOperationException.prototype);
  }
};
var InvalidGrantTokenException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidGrantTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidGrantTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidGrantTokenException.prototype);
  }
};
var CustomerMasterKeySpec = {
  ECC_NIST_P256: "ECC_NIST_P256",
  ECC_NIST_P384: "ECC_NIST_P384",
  ECC_NIST_P521: "ECC_NIST_P521",
  ECC_SECG_P256K1: "ECC_SECG_P256K1",
  HMAC_224: "HMAC_224",
  HMAC_256: "HMAC_256",
  HMAC_384: "HMAC_384",
  HMAC_512: "HMAC_512",
  RSA_2048: "RSA_2048",
  RSA_3072: "RSA_3072",
  RSA_4096: "RSA_4096",
  SM2: "SM2",
  SYMMETRIC_DEFAULT: "SYMMETRIC_DEFAULT"
};
var KeySpec = {
  ECC_NIST_P256: "ECC_NIST_P256",
  ECC_NIST_P384: "ECC_NIST_P384",
  ECC_NIST_P521: "ECC_NIST_P521",
  ECC_SECG_P256K1: "ECC_SECG_P256K1",
  HMAC_224: "HMAC_224",
  HMAC_256: "HMAC_256",
  HMAC_384: "HMAC_384",
  HMAC_512: "HMAC_512",
  RSA_2048: "RSA_2048",
  RSA_3072: "RSA_3072",
  RSA_4096: "RSA_4096",
  SM2: "SM2",
  SYMMETRIC_DEFAULT: "SYMMETRIC_DEFAULT"
};
var KeyUsageType = {
  ENCRYPT_DECRYPT: "ENCRYPT_DECRYPT",
  GENERATE_VERIFY_MAC: "GENERATE_VERIFY_MAC",
  SIGN_VERIFY: "SIGN_VERIFY"
};
var OriginType = {
  AWS_CLOUDHSM: "AWS_CLOUDHSM",
  AWS_KMS: "AWS_KMS",
  EXTERNAL: "EXTERNAL",
  EXTERNAL_KEY_STORE: "EXTERNAL_KEY_STORE"
};
var EncryptionAlgorithmSpec = {
  RSAES_OAEP_SHA_1: "RSAES_OAEP_SHA_1",
  RSAES_OAEP_SHA_256: "RSAES_OAEP_SHA_256",
  SM2PKE: "SM2PKE",
  SYMMETRIC_DEFAULT: "SYMMETRIC_DEFAULT"
};
var ExpirationModelType = {
  KEY_MATERIAL_DOES_NOT_EXPIRE: "KEY_MATERIAL_DOES_NOT_EXPIRE",
  KEY_MATERIAL_EXPIRES: "KEY_MATERIAL_EXPIRES"
};
var KeyManagerType = {
  AWS: "AWS",
  CUSTOMER: "CUSTOMER"
};
var KeyState = {
  Creating: "Creating",
  Disabled: "Disabled",
  Enabled: "Enabled",
  PendingDeletion: "PendingDeletion",
  PendingImport: "PendingImport",
  PendingReplicaDeletion: "PendingReplicaDeletion",
  Unavailable: "Unavailable",
  Updating: "Updating"
};
var MacAlgorithmSpec = {
  HMAC_SHA_224: "HMAC_SHA_224",
  HMAC_SHA_256: "HMAC_SHA_256",
  HMAC_SHA_384: "HMAC_SHA_384",
  HMAC_SHA_512: "HMAC_SHA_512"
};
var MultiRegionKeyType = {
  PRIMARY: "PRIMARY",
  REPLICA: "REPLICA"
};
var SigningAlgorithmSpec = {
  ECDSA_SHA_256: "ECDSA_SHA_256",
  ECDSA_SHA_384: "ECDSA_SHA_384",
  ECDSA_SHA_512: "ECDSA_SHA_512",
  RSASSA_PKCS1_V1_5_SHA_256: "RSASSA_PKCS1_V1_5_SHA_256",
  RSASSA_PKCS1_V1_5_SHA_384: "RSASSA_PKCS1_V1_5_SHA_384",
  RSASSA_PKCS1_V1_5_SHA_512: "RSASSA_PKCS1_V1_5_SHA_512",
  RSASSA_PSS_SHA_256: "RSASSA_PSS_SHA_256",
  RSASSA_PSS_SHA_384: "RSASSA_PSS_SHA_384",
  RSASSA_PSS_SHA_512: "RSASSA_PSS_SHA_512",
  SM2DSA: "SM2DSA"
};
var MalformedPolicyDocumentException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "MalformedPolicyDocumentException",
      $fault: "client",
      ...opts
    });
    this.name = "MalformedPolicyDocumentException";
    this.$fault = "client";
    Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
  }
};
var TagException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "TagException",
      $fault: "client",
      ...opts
    });
    this.name = "TagException";
    this.$fault = "client";
    Object.setPrototypeOf(this, TagException.prototype);
  }
};
var UnsupportedOperationException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "UnsupportedOperationException",
      $fault: "client",
      ...opts
    });
    this.name = "UnsupportedOperationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
  }
};
var XksKeyAlreadyInUseException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksKeyAlreadyInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "XksKeyAlreadyInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksKeyAlreadyInUseException.prototype);
  }
};
var XksKeyInvalidConfigurationException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksKeyInvalidConfigurationException",
      $fault: "client",
      ...opts
    });
    this.name = "XksKeyInvalidConfigurationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksKeyInvalidConfigurationException.prototype);
  }
};
var XksKeyNotFoundException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "XksKeyNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "XksKeyNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, XksKeyNotFoundException.prototype);
  }
};
var CustomKeyStoreHasCMKsException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "CustomKeyStoreHasCMKsException",
      $fault: "client",
      ...opts
    });
    this.name = "CustomKeyStoreHasCMKsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, CustomKeyStoreHasCMKsException.prototype);
  }
};
var DataKeyPairSpec = {
  ECC_NIST_P256: "ECC_NIST_P256",
  ECC_NIST_P384: "ECC_NIST_P384",
  ECC_NIST_P521: "ECC_NIST_P521",
  ECC_SECG_P256K1: "ECC_SECG_P256K1",
  RSA_2048: "RSA_2048",
  RSA_3072: "RSA_3072",
  RSA_4096: "RSA_4096",
  SM2: "SM2"
};
var DataKeySpec = {
  AES_128: "AES_128",
  AES_256: "AES_256"
};
var KeyEncryptionMechanism = {
  RSAES_OAEP_SHA_256: "RSAES_OAEP_SHA_256"
};
var IncorrectKeyException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "IncorrectKeyException",
      $fault: "client",
      ...opts
    });
    this.name = "IncorrectKeyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, IncorrectKeyException.prototype);
  }
};
var InvalidCiphertextException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidCiphertextException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidCiphertextException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidCiphertextException.prototype);
  }
};
var InvalidKeyUsageException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidKeyUsageException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidKeyUsageException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidKeyUsageException.prototype);
  }
};
var KeyUnavailableException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "KeyUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "KeyUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, KeyUnavailableException.prototype);
  }
};
var InvalidMarkerException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidMarkerException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidMarkerException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidMarkerException.prototype);
  }
};
var ExpiredImportTokenException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "ExpiredImportTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "ExpiredImportTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ExpiredImportTokenException.prototype);
  }
};
var WrappingKeySpec = {
  RSA_2048: "RSA_2048",
  RSA_3072: "RSA_3072",
  RSA_4096: "RSA_4096"
};
var IncorrectKeyMaterialException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "IncorrectKeyMaterialException",
      $fault: "client",
      ...opts
    });
    this.name = "IncorrectKeyMaterialException";
    this.$fault = "client";
    Object.setPrototypeOf(this, IncorrectKeyMaterialException.prototype);
  }
};
var InvalidImportTokenException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidImportTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidImportTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidImportTokenException.prototype);
  }
};
var InvalidGrantIdException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "InvalidGrantIdException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidGrantIdException";
    this.$fault = "client";
    Object.setPrototypeOf(this, InvalidGrantIdException.prototype);
  }
};
var KMSInvalidMacException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "KMSInvalidMacException",
      $fault: "client",
      ...opts
    });
    this.name = "KMSInvalidMacException";
    this.$fault = "client";
    Object.setPrototypeOf(this, KMSInvalidMacException.prototype);
  }
};
var KMSInvalidSignatureException = class extends KMSServiceException {
  constructor(opts) {
    super({
      name: "KMSInvalidSignatureException",
      $fault: "client",
      ...opts
    });
    this.name = "KMSInvalidSignatureException";
    this.$fault = "client";
    Object.setPrototypeOf(this, KMSInvalidSignatureException.prototype);
  }
};
var MessageType = {
  DIGEST: "DIGEST",
  RAW: "RAW"
};
var XksProxyAuthenticationCredentialTypeFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AccessKeyId && { AccessKeyId: SENSITIVE_STRING },
  ...obj.RawSecretAccessKey && { RawSecretAccessKey: SENSITIVE_STRING }
});
var CreateCustomKeyStoreRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.KeyStorePassword && { KeyStorePassword: SENSITIVE_STRING },
  ...obj.XksProxyAuthenticationCredential && {
    XksProxyAuthenticationCredential: XksProxyAuthenticationCredentialTypeFilterSensitiveLog(obj.XksProxyAuthenticationCredential)
  }
});
var XksProxyConfigurationTypeFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AccessKeyId && { AccessKeyId: SENSITIVE_STRING }
});
var CustomKeyStoresListEntryFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.XksProxyConfiguration && {
    XksProxyConfiguration: XksProxyConfigurationTypeFilterSensitiveLog(obj.XksProxyConfiguration)
  }
});
var DecryptResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Plaintext && { Plaintext: SENSITIVE_STRING }
});
var DescribeCustomKeyStoresResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.CustomKeyStores && {
    CustomKeyStores: obj.CustomKeyStores.map((item) => CustomKeyStoresListEntryFilterSensitiveLog(item))
  }
});
var EncryptRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Plaintext && { Plaintext: SENSITIVE_STRING }
});
var GenerateDataKeyResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Plaintext && { Plaintext: SENSITIVE_STRING }
});
var GenerateDataKeyPairResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PrivateKeyPlaintext && { PrivateKeyPlaintext: SENSITIVE_STRING }
});
var GenerateMacRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Message && { Message: SENSITIVE_STRING }
});
var GenerateRandomResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Plaintext && { Plaintext: SENSITIVE_STRING }
});
var GetParametersForImportResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PublicKey && { PublicKey: SENSITIVE_STRING }
});
var SignRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Message && { Message: SENSITIVE_STRING }
});
var UpdateCustomKeyStoreRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.KeyStorePassword && { KeyStorePassword: SENSITIVE_STRING },
  ...obj.XksProxyAuthenticationCredential && {
    XksProxyAuthenticationCredential: XksProxyAuthenticationCredentialTypeFilterSensitiveLog(obj.XksProxyAuthenticationCredential)
  }
});
var VerifyRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Message && { Message: SENSITIVE_STRING }
});
var VerifyMacRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Message && { Message: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-kms/dist-es/protocols/Aws_json1_1.js
var se_CancelKeyDeletionCommand = async (input, context) => {
  const headers = sharedHeaders("CancelKeyDeletion");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ConnectCustomKeyStoreCommand = async (input, context) => {
  const headers = sharedHeaders("ConnectCustomKeyStore");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateAliasCommand = async (input, context) => {
  const headers = sharedHeaders("CreateAlias");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCustomKeyStoreCommand = async (input, context) => {
  const headers = sharedHeaders("CreateCustomKeyStore");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateGrantCommand = async (input, context) => {
  const headers = sharedHeaders("CreateGrant");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateKeyCommand = async (input, context) => {
  const headers = sharedHeaders("CreateKey");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DecryptCommand = async (input, context) => {
  const headers = sharedHeaders("Decrypt");
  let body;
  body = JSON.stringify(se_DecryptRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteAliasCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteAlias");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCustomKeyStoreCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteCustomKeyStore");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteImportedKeyMaterialCommand = async (input, context) => {
  const headers = sharedHeaders("DeleteImportedKeyMaterial");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCustomKeyStoresCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeCustomKeyStores");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeKeyCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeKey");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableKeyCommand = async (input, context) => {
  const headers = sharedHeaders("DisableKey");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableKeyRotationCommand = async (input, context) => {
  const headers = sharedHeaders("DisableKeyRotation");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisconnectCustomKeyStoreCommand = async (input, context) => {
  const headers = sharedHeaders("DisconnectCustomKeyStore");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableKeyCommand = async (input, context) => {
  const headers = sharedHeaders("EnableKey");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableKeyRotationCommand = async (input, context) => {
  const headers = sharedHeaders("EnableKeyRotation");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EncryptCommand = async (input, context) => {
  const headers = sharedHeaders("Encrypt");
  let body;
  body = JSON.stringify(se_EncryptRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateDataKeyCommand = async (input, context) => {
  const headers = sharedHeaders("GenerateDataKey");
  let body;
  body = JSON.stringify(se_GenerateDataKeyRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateDataKeyPairCommand = async (input, context) => {
  const headers = sharedHeaders("GenerateDataKeyPair");
  let body;
  body = JSON.stringify(se_GenerateDataKeyPairRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateDataKeyPairWithoutPlaintextCommand = async (input, context) => {
  const headers = sharedHeaders("GenerateDataKeyPairWithoutPlaintext");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateDataKeyWithoutPlaintextCommand = async (input, context) => {
  const headers = sharedHeaders("GenerateDataKeyWithoutPlaintext");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateMacCommand = async (input, context) => {
  const headers = sharedHeaders("GenerateMac");
  let body;
  body = JSON.stringify(se_GenerateMacRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateRandomCommand = async (input, context) => {
  const headers = sharedHeaders("GenerateRandom");
  let body;
  body = JSON.stringify(se_GenerateRandomRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetKeyPolicyCommand = async (input, context) => {
  const headers = sharedHeaders("GetKeyPolicy");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetKeyRotationStatusCommand = async (input, context) => {
  const headers = sharedHeaders("GetKeyRotationStatus");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetParametersForImportCommand = async (input, context) => {
  const headers = sharedHeaders("GetParametersForImport");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetPublicKeyCommand = async (input, context) => {
  const headers = sharedHeaders("GetPublicKey");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportKeyMaterialCommand = async (input, context) => {
  const headers = sharedHeaders("ImportKeyMaterial");
  let body;
  body = JSON.stringify(se_ImportKeyMaterialRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListAliasesCommand = async (input, context) => {
  const headers = sharedHeaders("ListAliases");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListGrantsCommand = async (input, context) => {
  const headers = sharedHeaders("ListGrants");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListKeyPoliciesCommand = async (input, context) => {
  const headers = sharedHeaders("ListKeyPolicies");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListKeysCommand = async (input, context) => {
  const headers = sharedHeaders("ListKeys");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListResourceTagsCommand = async (input, context) => {
  const headers = sharedHeaders("ListResourceTags");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListRetirableGrantsCommand = async (input, context) => {
  const headers = sharedHeaders("ListRetirableGrants");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PutKeyPolicyCommand = async (input, context) => {
  const headers = sharedHeaders("PutKeyPolicy");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReEncryptCommand = async (input, context) => {
  const headers = sharedHeaders("ReEncrypt");
  let body;
  body = JSON.stringify(se_ReEncryptRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplicateKeyCommand = async (input, context) => {
  const headers = sharedHeaders("ReplicateKey");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RetireGrantCommand = async (input, context) => {
  const headers = sharedHeaders("RetireGrant");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RevokeGrantCommand = async (input, context) => {
  const headers = sharedHeaders("RevokeGrant");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ScheduleKeyDeletionCommand = async (input, context) => {
  const headers = sharedHeaders("ScheduleKeyDeletion");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SignCommand = async (input, context) => {
  const headers = sharedHeaders("Sign");
  let body;
  body = JSON.stringify(se_SignRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagResourceCommand = async (input, context) => {
  const headers = sharedHeaders("TagResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagResourceCommand = async (input, context) => {
  const headers = sharedHeaders("UntagResource");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateAliasCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateAlias");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateCustomKeyStoreCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateCustomKeyStore");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateKeyDescriptionCommand = async (input, context) => {
  const headers = sharedHeaders("UpdateKeyDescription");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdatePrimaryRegionCommand = async (input, context) => {
  const headers = sharedHeaders("UpdatePrimaryRegion");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_VerifyCommand = async (input, context) => {
  const headers = sharedHeaders("Verify");
  let body;
  body = JSON.stringify(se_VerifyRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_VerifyMacCommand = async (input, context) => {
  const headers = sharedHeaders("VerifyMac");
  let body;
  body = JSON.stringify(se_VerifyMacRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var de_CancelKeyDeletionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ConnectCustomKeyStoreCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateAliasCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CreateCustomKeyStoreCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateGrantCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_CreateKeyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DecryptCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_DecryptResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteAliasCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteCustomKeyStoreCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteImportedKeyMaterialCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DescribeCustomKeyStoresCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_DescribeCustomKeyStoresResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_DescribeKeyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisableKeyRotationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisconnectCustomKeyStoreCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_EnableKeyRotationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_EncryptCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_EncryptResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateDataKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GenerateDataKeyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateDataKeyPairCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GenerateDataKeyPairResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateDataKeyPairWithoutPlaintextCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GenerateDataKeyPairWithoutPlaintextResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateDataKeyWithoutPlaintextCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GenerateDataKeyWithoutPlaintextResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateMacCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GenerateMacResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateRandomCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GenerateRandomResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetKeyPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetKeyRotationStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetParametersForImportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GetParametersForImportResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetPublicKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_GetPublicKeyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportKeyMaterialCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListAliasesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ListAliasesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListGrantsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ListGrantsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListKeyPoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListKeysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListResourceTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListRetirableGrantsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ListGrantsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PutKeyPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ReEncryptCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ReEncryptResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplicateKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ReplicateKeyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RetireGrantCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RevokeGrantCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ScheduleKeyDeletionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_ScheduleKeyDeletionResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SignCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_SignResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_TagResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagResourceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateAliasCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateCustomKeyStoreCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateKeyDescriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdatePrimaryRegionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_VerifyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_VerifyMacCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DependencyTimeoutException":
    case "com.amazonaws.kms#DependencyTimeoutException":
      throw await de_DependencyTimeoutExceptionRes(parsedOutput, context);
    case "InvalidArnException":
    case "com.amazonaws.kms#InvalidArnException":
      throw await de_InvalidArnExceptionRes(parsedOutput, context);
    case "KMSInternalException":
    case "com.amazonaws.kms#KMSInternalException":
      throw await de_KMSInternalExceptionRes(parsedOutput, context);
    case "KMSInvalidStateException":
    case "com.amazonaws.kms#KMSInvalidStateException":
      throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.kms#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "CloudHsmClusterInvalidConfigurationException":
    case "com.amazonaws.kms#CloudHsmClusterInvalidConfigurationException":
      throw await de_CloudHsmClusterInvalidConfigurationExceptionRes(parsedOutput, context);
    case "CloudHsmClusterNotActiveException":
    case "com.amazonaws.kms#CloudHsmClusterNotActiveException":
      throw await de_CloudHsmClusterNotActiveExceptionRes(parsedOutput, context);
    case "CustomKeyStoreInvalidStateException":
    case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
      throw await de_CustomKeyStoreInvalidStateExceptionRes(parsedOutput, context);
    case "CustomKeyStoreNotFoundException":
    case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
      throw await de_CustomKeyStoreNotFoundExceptionRes(parsedOutput, context);
    case "AlreadyExistsException":
    case "com.amazonaws.kms#AlreadyExistsException":
      throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
    case "InvalidAliasNameException":
    case "com.amazonaws.kms#InvalidAliasNameException":
      throw await de_InvalidAliasNameExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.kms#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "CloudHsmClusterInUseException":
    case "com.amazonaws.kms#CloudHsmClusterInUseException":
      throw await de_CloudHsmClusterInUseExceptionRes(parsedOutput, context);
    case "CloudHsmClusterNotFoundException":
    case "com.amazonaws.kms#CloudHsmClusterNotFoundException":
      throw await de_CloudHsmClusterNotFoundExceptionRes(parsedOutput, context);
    case "CustomKeyStoreNameInUseException":
    case "com.amazonaws.kms#CustomKeyStoreNameInUseException":
      throw await de_CustomKeyStoreNameInUseExceptionRes(parsedOutput, context);
    case "IncorrectTrustAnchorException":
    case "com.amazonaws.kms#IncorrectTrustAnchorException":
      throw await de_IncorrectTrustAnchorExceptionRes(parsedOutput, context);
    case "XksProxyIncorrectAuthenticationCredentialException":
    case "com.amazonaws.kms#XksProxyIncorrectAuthenticationCredentialException":
      throw await de_XksProxyIncorrectAuthenticationCredentialExceptionRes(parsedOutput, context);
    case "XksProxyInvalidConfigurationException":
    case "com.amazonaws.kms#XksProxyInvalidConfigurationException":
      throw await de_XksProxyInvalidConfigurationExceptionRes(parsedOutput, context);
    case "XksProxyInvalidResponseException":
    case "com.amazonaws.kms#XksProxyInvalidResponseException":
      throw await de_XksProxyInvalidResponseExceptionRes(parsedOutput, context);
    case "XksProxyUriEndpointInUseException":
    case "com.amazonaws.kms#XksProxyUriEndpointInUseException":
      throw await de_XksProxyUriEndpointInUseExceptionRes(parsedOutput, context);
    case "XksProxyUriInUseException":
    case "com.amazonaws.kms#XksProxyUriInUseException":
      throw await de_XksProxyUriInUseExceptionRes(parsedOutput, context);
    case "XksProxyUriUnreachableException":
    case "com.amazonaws.kms#XksProxyUriUnreachableException":
      throw await de_XksProxyUriUnreachableExceptionRes(parsedOutput, context);
    case "XksProxyVpcEndpointServiceInUseException":
    case "com.amazonaws.kms#XksProxyVpcEndpointServiceInUseException":
      throw await de_XksProxyVpcEndpointServiceInUseExceptionRes(parsedOutput, context);
    case "XksProxyVpcEndpointServiceInvalidConfigurationException":
    case "com.amazonaws.kms#XksProxyVpcEndpointServiceInvalidConfigurationException":
      throw await de_XksProxyVpcEndpointServiceInvalidConfigurationExceptionRes(parsedOutput, context);
    case "XksProxyVpcEndpointServiceNotFoundException":
    case "com.amazonaws.kms#XksProxyVpcEndpointServiceNotFoundException":
      throw await de_XksProxyVpcEndpointServiceNotFoundExceptionRes(parsedOutput, context);
    case "DisabledException":
    case "com.amazonaws.kms#DisabledException":
      throw await de_DisabledExceptionRes(parsedOutput, context);
    case "DryRunOperationException":
    case "com.amazonaws.kms#DryRunOperationException":
      throw await de_DryRunOperationExceptionRes(parsedOutput, context);
    case "InvalidGrantTokenException":
    case "com.amazonaws.kms#InvalidGrantTokenException":
      throw await de_InvalidGrantTokenExceptionRes(parsedOutput, context);
    case "MalformedPolicyDocumentException":
    case "com.amazonaws.kms#MalformedPolicyDocumentException":
      throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
    case "TagException":
    case "com.amazonaws.kms#TagException":
      throw await de_TagExceptionRes(parsedOutput, context);
    case "UnsupportedOperationException":
    case "com.amazonaws.kms#UnsupportedOperationException":
      throw await de_UnsupportedOperationExceptionRes(parsedOutput, context);
    case "XksKeyAlreadyInUseException":
    case "com.amazonaws.kms#XksKeyAlreadyInUseException":
      throw await de_XksKeyAlreadyInUseExceptionRes(parsedOutput, context);
    case "XksKeyInvalidConfigurationException":
    case "com.amazonaws.kms#XksKeyInvalidConfigurationException":
      throw await de_XksKeyInvalidConfigurationExceptionRes(parsedOutput, context);
    case "XksKeyNotFoundException":
    case "com.amazonaws.kms#XksKeyNotFoundException":
      throw await de_XksKeyNotFoundExceptionRes(parsedOutput, context);
    case "IncorrectKeyException":
    case "com.amazonaws.kms#IncorrectKeyException":
      throw await de_IncorrectKeyExceptionRes(parsedOutput, context);
    case "InvalidCiphertextException":
    case "com.amazonaws.kms#InvalidCiphertextException":
      throw await de_InvalidCiphertextExceptionRes(parsedOutput, context);
    case "InvalidKeyUsageException":
    case "com.amazonaws.kms#InvalidKeyUsageException":
      throw await de_InvalidKeyUsageExceptionRes(parsedOutput, context);
    case "KeyUnavailableException":
    case "com.amazonaws.kms#KeyUnavailableException":
      throw await de_KeyUnavailableExceptionRes(parsedOutput, context);
    case "CustomKeyStoreHasCMKsException":
    case "com.amazonaws.kms#CustomKeyStoreHasCMKsException":
      throw await de_CustomKeyStoreHasCMKsExceptionRes(parsedOutput, context);
    case "InvalidMarkerException":
    case "com.amazonaws.kms#InvalidMarkerException":
      throw await de_InvalidMarkerExceptionRes(parsedOutput, context);
    case "ExpiredImportTokenException":
    case "com.amazonaws.kms#ExpiredImportTokenException":
      throw await de_ExpiredImportTokenExceptionRes(parsedOutput, context);
    case "IncorrectKeyMaterialException":
    case "com.amazonaws.kms#IncorrectKeyMaterialException":
      throw await de_IncorrectKeyMaterialExceptionRes(parsedOutput, context);
    case "InvalidImportTokenException":
    case "com.amazonaws.kms#InvalidImportTokenException":
      throw await de_InvalidImportTokenExceptionRes(parsedOutput, context);
    case "InvalidGrantIdException":
    case "com.amazonaws.kms#InvalidGrantIdException":
      throw await de_InvalidGrantIdExceptionRes(parsedOutput, context);
    case "CloudHsmClusterNotRelatedException":
    case "com.amazonaws.kms#CloudHsmClusterNotRelatedException":
      throw await de_CloudHsmClusterNotRelatedExceptionRes(parsedOutput, context);
    case "KMSInvalidSignatureException":
    case "com.amazonaws.kms#KMSInvalidSignatureException":
      throw await de_KMSInvalidSignatureExceptionRes(parsedOutput, context);
    case "KMSInvalidMacException":
    case "com.amazonaws.kms#KMSInvalidMacException":
      throw await de_KMSInvalidMacExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new AlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CloudHsmClusterInUseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CloudHsmClusterInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CloudHsmClusterInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CloudHsmClusterInvalidConfigurationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CloudHsmClusterNotActiveExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CloudHsmClusterNotActiveException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CloudHsmClusterNotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CloudHsmClusterNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CloudHsmClusterNotRelatedExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CloudHsmClusterNotRelatedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CustomKeyStoreHasCMKsExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CustomKeyStoreHasCMKsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CustomKeyStoreInvalidStateExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CustomKeyStoreInvalidStateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CustomKeyStoreNameInUseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CustomKeyStoreNameInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CustomKeyStoreNotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new CustomKeyStoreNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DependencyTimeoutExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new DependencyTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DisabledExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new DisabledException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DryRunOperationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new DryRunOperationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ExpiredImportTokenExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ExpiredImportTokenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_IncorrectKeyExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new IncorrectKeyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_IncorrectKeyMaterialExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new IncorrectKeyMaterialException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_IncorrectTrustAnchorExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new IncorrectTrustAnchorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidAliasNameExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidAliasNameException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidArnExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidArnException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidCiphertextExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidCiphertextException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidGrantIdExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidGrantIdException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidGrantTokenExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidGrantTokenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidImportTokenExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidImportTokenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidKeyUsageExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidKeyUsageException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidMarkerExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidMarkerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_KeyUnavailableExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new KeyUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_KMSInternalExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new KMSInternalException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_KMSInvalidMacExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new KMSInvalidMacException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_KMSInvalidSignatureExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new KMSInvalidSignatureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_KMSInvalidStateExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new KMSInvalidStateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new MalformedPolicyDocumentException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_NotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_TagExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new TagException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new UnsupportedOperationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksKeyAlreadyInUseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksKeyAlreadyInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksKeyInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksKeyInvalidConfigurationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksKeyNotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksKeyNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyIncorrectAuthenticationCredentialExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyIncorrectAuthenticationCredentialException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyInvalidConfigurationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyInvalidResponseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyInvalidResponseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyUriEndpointInUseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyUriEndpointInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyUriInUseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyUriInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyUriUnreachableExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyUriUnreachableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyVpcEndpointServiceInUseExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyVpcEndpointServiceInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyVpcEndpointServiceInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyVpcEndpointServiceInvalidConfigurationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_XksProxyVpcEndpointServiceNotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new XksProxyVpcEndpointServiceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var se_DecryptRequest = (input, context) => {
  return take(input, {
    CiphertextBlob: context.base64Encoder,
    DryRun: [],
    EncryptionAlgorithm: [],
    EncryptionContext: _json,
    GrantTokens: _json,
    KeyId: [],
    Recipient: (_) => se_RecipientInfo(_, context)
  });
};
var se_EncryptRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    EncryptionAlgorithm: [],
    EncryptionContext: _json,
    GrantTokens: _json,
    KeyId: [],
    Plaintext: context.base64Encoder
  });
};
var se_GenerateDataKeyPairRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    EncryptionContext: _json,
    GrantTokens: _json,
    KeyId: [],
    KeyPairSpec: [],
    Recipient: (_) => se_RecipientInfo(_, context)
  });
};
var se_GenerateDataKeyRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    EncryptionContext: _json,
    GrantTokens: _json,
    KeyId: [],
    KeySpec: [],
    NumberOfBytes: [],
    Recipient: (_) => se_RecipientInfo(_, context)
  });
};
var se_GenerateMacRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    GrantTokens: _json,
    KeyId: [],
    MacAlgorithm: [],
    Message: context.base64Encoder
  });
};
var se_GenerateRandomRequest = (input, context) => {
  return take(input, {
    CustomKeyStoreId: [],
    NumberOfBytes: [],
    Recipient: (_) => se_RecipientInfo(_, context)
  });
};
var se_ImportKeyMaterialRequest = (input, context) => {
  return take(input, {
    EncryptedKeyMaterial: context.base64Encoder,
    ExpirationModel: [],
    ImportToken: context.base64Encoder,
    KeyId: [],
    ValidTo: (_) => Math.round(_.getTime() / 1e3)
  });
};
var se_RecipientInfo = (input, context) => {
  return take(input, {
    AttestationDocument: context.base64Encoder,
    KeyEncryptionAlgorithm: []
  });
};
var se_ReEncryptRequest = (input, context) => {
  return take(input, {
    CiphertextBlob: context.base64Encoder,
    DestinationEncryptionAlgorithm: [],
    DestinationEncryptionContext: _json,
    DestinationKeyId: [],
    DryRun: [],
    GrantTokens: _json,
    SourceEncryptionAlgorithm: [],
    SourceEncryptionContext: _json,
    SourceKeyId: []
  });
};
var se_SignRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    GrantTokens: _json,
    KeyId: [],
    Message: context.base64Encoder,
    MessageType: [],
    SigningAlgorithm: []
  });
};
var se_VerifyMacRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    GrantTokens: _json,
    KeyId: [],
    Mac: context.base64Encoder,
    MacAlgorithm: [],
    Message: context.base64Encoder
  });
};
var se_VerifyRequest = (input, context) => {
  return take(input, {
    DryRun: [],
    GrantTokens: _json,
    KeyId: [],
    Message: context.base64Encoder,
    MessageType: [],
    Signature: context.base64Encoder,
    SigningAlgorithm: []
  });
};
var de_AliasList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AliasListEntry(entry, context);
  });
  return retVal;
};
var de_AliasListEntry = (output, context) => {
  return take(output, {
    AliasArn: expectString,
    AliasName: expectString,
    CreationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    LastUpdatedDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    TargetKeyId: expectString
  });
};
var de_CreateKeyResponse = (output, context) => {
  return take(output, {
    KeyMetadata: (_) => de_KeyMetadata(_, context)
  });
};
var de_CustomKeyStoresList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CustomKeyStoresListEntry(entry, context);
  });
  return retVal;
};
var de_CustomKeyStoresListEntry = (output, context) => {
  return take(output, {
    CloudHsmClusterId: expectString,
    ConnectionErrorCode: expectString,
    ConnectionState: expectString,
    CreationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    CustomKeyStoreId: expectString,
    CustomKeyStoreName: expectString,
    CustomKeyStoreType: expectString,
    TrustAnchorCertificate: expectString,
    XksProxyConfiguration: _json
  });
};
var de_DecryptResponse = (output, context) => {
  return take(output, {
    CiphertextForRecipient: context.base64Decoder,
    EncryptionAlgorithm: expectString,
    KeyId: expectString,
    Plaintext: context.base64Decoder
  });
};
var de_DescribeCustomKeyStoresResponse = (output, context) => {
  return take(output, {
    CustomKeyStores: (_) => de_CustomKeyStoresList(_, context),
    NextMarker: expectString,
    Truncated: expectBoolean
  });
};
var de_DescribeKeyResponse = (output, context) => {
  return take(output, {
    KeyMetadata: (_) => de_KeyMetadata(_, context)
  });
};
var de_EncryptResponse = (output, context) => {
  return take(output, {
    CiphertextBlob: context.base64Decoder,
    EncryptionAlgorithm: expectString,
    KeyId: expectString
  });
};
var de_GenerateDataKeyPairResponse = (output, context) => {
  return take(output, {
    CiphertextForRecipient: context.base64Decoder,
    KeyId: expectString,
    KeyPairSpec: expectString,
    PrivateKeyCiphertextBlob: context.base64Decoder,
    PrivateKeyPlaintext: context.base64Decoder,
    PublicKey: context.base64Decoder
  });
};
var de_GenerateDataKeyPairWithoutPlaintextResponse = (output, context) => {
  return take(output, {
    KeyId: expectString,
    KeyPairSpec: expectString,
    PrivateKeyCiphertextBlob: context.base64Decoder,
    PublicKey: context.base64Decoder
  });
};
var de_GenerateDataKeyResponse = (output, context) => {
  return take(output, {
    CiphertextBlob: context.base64Decoder,
    CiphertextForRecipient: context.base64Decoder,
    KeyId: expectString,
    Plaintext: context.base64Decoder
  });
};
var de_GenerateDataKeyWithoutPlaintextResponse = (output, context) => {
  return take(output, {
    CiphertextBlob: context.base64Decoder,
    KeyId: expectString
  });
};
var de_GenerateMacResponse = (output, context) => {
  return take(output, {
    KeyId: expectString,
    Mac: context.base64Decoder,
    MacAlgorithm: expectString
  });
};
var de_GenerateRandomResponse = (output, context) => {
  return take(output, {
    CiphertextForRecipient: context.base64Decoder,
    Plaintext: context.base64Decoder
  });
};
var de_GetParametersForImportResponse = (output, context) => {
  return take(output, {
    ImportToken: context.base64Decoder,
    KeyId: expectString,
    ParametersValidTo: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    PublicKey: context.base64Decoder
  });
};
var de_GetPublicKeyResponse = (output, context) => {
  return take(output, {
    CustomerMasterKeySpec: expectString,
    EncryptionAlgorithms: _json,
    KeyId: expectString,
    KeySpec: expectString,
    KeyUsage: expectString,
    PublicKey: context.base64Decoder,
    SigningAlgorithms: _json
  });
};
var de_GrantList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GrantListEntry(entry, context);
  });
  return retVal;
};
var de_GrantListEntry = (output, context) => {
  return take(output, {
    Constraints: _json,
    CreationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    GrantId: expectString,
    GranteePrincipal: expectString,
    IssuingAccount: expectString,
    KeyId: expectString,
    Name: expectString,
    Operations: _json,
    RetiringPrincipal: expectString
  });
};
var de_KeyMetadata = (output, context) => {
  return take(output, {
    AWSAccountId: expectString,
    Arn: expectString,
    CloudHsmClusterId: expectString,
    CreationDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    CustomKeyStoreId: expectString,
    CustomerMasterKeySpec: expectString,
    DeletionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    Description: expectString,
    Enabled: expectBoolean,
    EncryptionAlgorithms: _json,
    ExpirationModel: expectString,
    KeyId: expectString,
    KeyManager: expectString,
    KeySpec: expectString,
    KeyState: expectString,
    KeyUsage: expectString,
    MacAlgorithms: _json,
    MultiRegion: expectBoolean,
    MultiRegionConfiguration: _json,
    Origin: expectString,
    PendingDeletionWindowInDays: expectInt32,
    SigningAlgorithms: _json,
    ValidTo: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    XksKeyConfiguration: _json
  });
};
var de_ListAliasesResponse = (output, context) => {
  return take(output, {
    Aliases: (_) => de_AliasList(_, context),
    NextMarker: expectString,
    Truncated: expectBoolean
  });
};
var de_ListGrantsResponse = (output, context) => {
  return take(output, {
    Grants: (_) => de_GrantList(_, context),
    NextMarker: expectString,
    Truncated: expectBoolean
  });
};
var de_ReEncryptResponse = (output, context) => {
  return take(output, {
    CiphertextBlob: context.base64Decoder,
    DestinationEncryptionAlgorithm: expectString,
    KeyId: expectString,
    SourceEncryptionAlgorithm: expectString,
    SourceKeyId: expectString
  });
};
var de_ReplicateKeyResponse = (output, context) => {
  return take(output, {
    ReplicaKeyMetadata: (_) => de_KeyMetadata(_, context),
    ReplicaPolicy: expectString,
    ReplicaTags: _json
  });
};
var de_ScheduleKeyDeletionResponse = (output, context) => {
  return take(output, {
    DeletionDate: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    KeyId: expectString,
    KeyState: expectString,
    PendingWindowInDays: expectInt32
  });
};
var de_SignResponse = (output, context) => {
  return take(output, {
    KeyId: expectString,
    Signature: context.base64Decoder,
    SigningAlgorithm: expectString
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
var throwDefaultError = withBaseException(KMSServiceException);
var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `TrentService.${operation}`
  };
}
var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
});
var parseErrorBody = async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/CancelKeyDeletionCommand.js
var CancelKeyDeletionCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "CancelKeyDeletion", {}).n("KMSClient", "CancelKeyDeletionCommand").f(void 0, void 0).ser(se_CancelKeyDeletionCommand).de(de_CancelKeyDeletionCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ConnectCustomKeyStoreCommand.js
var ConnectCustomKeyStoreCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ConnectCustomKeyStore", {}).n("KMSClient", "ConnectCustomKeyStoreCommand").f(void 0, void 0).ser(se_ConnectCustomKeyStoreCommand).de(de_ConnectCustomKeyStoreCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/CreateAliasCommand.js
var CreateAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "CreateAlias", {}).n("KMSClient", "CreateAliasCommand").f(void 0, void 0).ser(se_CreateAliasCommand).de(de_CreateAliasCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/CreateCustomKeyStoreCommand.js
var CreateCustomKeyStoreCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "CreateCustomKeyStore", {}).n("KMSClient", "CreateCustomKeyStoreCommand").f(CreateCustomKeyStoreRequestFilterSensitiveLog, void 0).ser(se_CreateCustomKeyStoreCommand).de(de_CreateCustomKeyStoreCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/CreateGrantCommand.js
var CreateGrantCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "CreateGrant", {}).n("KMSClient", "CreateGrantCommand").f(void 0, void 0).ser(se_CreateGrantCommand).de(de_CreateGrantCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/CreateKeyCommand.js
var CreateKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "CreateKey", {}).n("KMSClient", "CreateKeyCommand").f(void 0, void 0).ser(se_CreateKeyCommand).de(de_CreateKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DecryptCommand.js
var DecryptCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "Decrypt", {}).n("KMSClient", "DecryptCommand").f(void 0, DecryptResponseFilterSensitiveLog).ser(se_DecryptCommand).de(de_DecryptCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DeleteAliasCommand.js
var DeleteAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DeleteAlias", {}).n("KMSClient", "DeleteAliasCommand").f(void 0, void 0).ser(se_DeleteAliasCommand).de(de_DeleteAliasCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DeleteCustomKeyStoreCommand.js
var DeleteCustomKeyStoreCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DeleteCustomKeyStore", {}).n("KMSClient", "DeleteCustomKeyStoreCommand").f(void 0, void 0).ser(se_DeleteCustomKeyStoreCommand).de(de_DeleteCustomKeyStoreCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DeleteImportedKeyMaterialCommand.js
var DeleteImportedKeyMaterialCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DeleteImportedKeyMaterial", {}).n("KMSClient", "DeleteImportedKeyMaterialCommand").f(void 0, void 0).ser(se_DeleteImportedKeyMaterialCommand).de(de_DeleteImportedKeyMaterialCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DescribeCustomKeyStoresCommand.js
var DescribeCustomKeyStoresCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DescribeCustomKeyStores", {}).n("KMSClient", "DescribeCustomKeyStoresCommand").f(void 0, DescribeCustomKeyStoresResponseFilterSensitiveLog).ser(se_DescribeCustomKeyStoresCommand).de(de_DescribeCustomKeyStoresCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DescribeKeyCommand.js
var DescribeKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DescribeKey", {}).n("KMSClient", "DescribeKeyCommand").f(void 0, void 0).ser(se_DescribeKeyCommand).de(de_DescribeKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DisableKeyCommand.js
var DisableKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DisableKey", {}).n("KMSClient", "DisableKeyCommand").f(void 0, void 0).ser(se_DisableKeyCommand).de(de_DisableKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DisableKeyRotationCommand.js
var DisableKeyRotationCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DisableKeyRotation", {}).n("KMSClient", "DisableKeyRotationCommand").f(void 0, void 0).ser(se_DisableKeyRotationCommand).de(de_DisableKeyRotationCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/DisconnectCustomKeyStoreCommand.js
var DisconnectCustomKeyStoreCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "DisconnectCustomKeyStore", {}).n("KMSClient", "DisconnectCustomKeyStoreCommand").f(void 0, void 0).ser(se_DisconnectCustomKeyStoreCommand).de(de_DisconnectCustomKeyStoreCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/EnableKeyCommand.js
var EnableKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "EnableKey", {}).n("KMSClient", "EnableKeyCommand").f(void 0, void 0).ser(se_EnableKeyCommand).de(de_EnableKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/EnableKeyRotationCommand.js
var EnableKeyRotationCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "EnableKeyRotation", {}).n("KMSClient", "EnableKeyRotationCommand").f(void 0, void 0).ser(se_EnableKeyRotationCommand).de(de_EnableKeyRotationCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/EncryptCommand.js
var EncryptCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "Encrypt", {}).n("KMSClient", "EncryptCommand").f(EncryptRequestFilterSensitiveLog, void 0).ser(se_EncryptCommand).de(de_EncryptCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GenerateDataKeyCommand.js
var GenerateDataKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GenerateDataKey", {}).n("KMSClient", "GenerateDataKeyCommand").f(void 0, GenerateDataKeyResponseFilterSensitiveLog).ser(se_GenerateDataKeyCommand).de(de_GenerateDataKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GenerateDataKeyPairCommand.js
var GenerateDataKeyPairCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GenerateDataKeyPair", {}).n("KMSClient", "GenerateDataKeyPairCommand").f(void 0, GenerateDataKeyPairResponseFilterSensitiveLog).ser(se_GenerateDataKeyPairCommand).de(de_GenerateDataKeyPairCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GenerateDataKeyPairWithoutPlaintextCommand.js
var GenerateDataKeyPairWithoutPlaintextCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GenerateDataKeyPairWithoutPlaintext", {}).n("KMSClient", "GenerateDataKeyPairWithoutPlaintextCommand").f(void 0, void 0).ser(se_GenerateDataKeyPairWithoutPlaintextCommand).de(de_GenerateDataKeyPairWithoutPlaintextCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GenerateDataKeyWithoutPlaintextCommand.js
var GenerateDataKeyWithoutPlaintextCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GenerateDataKeyWithoutPlaintext", {}).n("KMSClient", "GenerateDataKeyWithoutPlaintextCommand").f(void 0, void 0).ser(se_GenerateDataKeyWithoutPlaintextCommand).de(de_GenerateDataKeyWithoutPlaintextCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GenerateMacCommand.js
var GenerateMacCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GenerateMac", {}).n("KMSClient", "GenerateMacCommand").f(GenerateMacRequestFilterSensitiveLog, void 0).ser(se_GenerateMacCommand).de(de_GenerateMacCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GenerateRandomCommand.js
var GenerateRandomCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GenerateRandom", {}).n("KMSClient", "GenerateRandomCommand").f(void 0, GenerateRandomResponseFilterSensitiveLog).ser(se_GenerateRandomCommand).de(de_GenerateRandomCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GetKeyPolicyCommand.js
var GetKeyPolicyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GetKeyPolicy", {}).n("KMSClient", "GetKeyPolicyCommand").f(void 0, void 0).ser(se_GetKeyPolicyCommand).de(de_GetKeyPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GetKeyRotationStatusCommand.js
var GetKeyRotationStatusCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GetKeyRotationStatus", {}).n("KMSClient", "GetKeyRotationStatusCommand").f(void 0, void 0).ser(se_GetKeyRotationStatusCommand).de(de_GetKeyRotationStatusCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GetParametersForImportCommand.js
var GetParametersForImportCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GetParametersForImport", {}).n("KMSClient", "GetParametersForImportCommand").f(void 0, GetParametersForImportResponseFilterSensitiveLog).ser(se_GetParametersForImportCommand).de(de_GetParametersForImportCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/GetPublicKeyCommand.js
var GetPublicKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "GetPublicKey", {}).n("KMSClient", "GetPublicKeyCommand").f(void 0, void 0).ser(se_GetPublicKeyCommand).de(de_GetPublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ImportKeyMaterialCommand.js
var ImportKeyMaterialCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ImportKeyMaterial", {}).n("KMSClient", "ImportKeyMaterialCommand").f(void 0, void 0).ser(se_ImportKeyMaterialCommand).de(de_ImportKeyMaterialCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ListAliasesCommand.js
var ListAliasesCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ListAliases", {}).n("KMSClient", "ListAliasesCommand").f(void 0, void 0).ser(se_ListAliasesCommand).de(de_ListAliasesCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ListGrantsCommand.js
var ListGrantsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ListGrants", {}).n("KMSClient", "ListGrantsCommand").f(void 0, void 0).ser(se_ListGrantsCommand).de(de_ListGrantsCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ListKeyPoliciesCommand.js
var ListKeyPoliciesCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ListKeyPolicies", {}).n("KMSClient", "ListKeyPoliciesCommand").f(void 0, void 0).ser(se_ListKeyPoliciesCommand).de(de_ListKeyPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ListKeysCommand.js
var ListKeysCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ListKeys", {}).n("KMSClient", "ListKeysCommand").f(void 0, void 0).ser(se_ListKeysCommand).de(de_ListKeysCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ListResourceTagsCommand.js
var ListResourceTagsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ListResourceTags", {}).n("KMSClient", "ListResourceTagsCommand").f(void 0, void 0).ser(se_ListResourceTagsCommand).de(de_ListResourceTagsCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ListRetirableGrantsCommand.js
var ListRetirableGrantsCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ListRetirableGrants", {}).n("KMSClient", "ListRetirableGrantsCommand").f(void 0, void 0).ser(se_ListRetirableGrantsCommand).de(de_ListRetirableGrantsCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/PutKeyPolicyCommand.js
var PutKeyPolicyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "PutKeyPolicy", {}).n("KMSClient", "PutKeyPolicyCommand").f(void 0, void 0).ser(se_PutKeyPolicyCommand).de(de_PutKeyPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ReEncryptCommand.js
var ReEncryptCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ReEncrypt", {}).n("KMSClient", "ReEncryptCommand").f(void 0, void 0).ser(se_ReEncryptCommand).de(de_ReEncryptCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ReplicateKeyCommand.js
var ReplicateKeyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ReplicateKey", {}).n("KMSClient", "ReplicateKeyCommand").f(void 0, void 0).ser(se_ReplicateKeyCommand).de(de_ReplicateKeyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/RetireGrantCommand.js
var RetireGrantCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "RetireGrant", {}).n("KMSClient", "RetireGrantCommand").f(void 0, void 0).ser(se_RetireGrantCommand).de(de_RetireGrantCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/RevokeGrantCommand.js
var RevokeGrantCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "RevokeGrant", {}).n("KMSClient", "RevokeGrantCommand").f(void 0, void 0).ser(se_RevokeGrantCommand).de(de_RevokeGrantCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/ScheduleKeyDeletionCommand.js
var ScheduleKeyDeletionCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "ScheduleKeyDeletion", {}).n("KMSClient", "ScheduleKeyDeletionCommand").f(void 0, void 0).ser(se_ScheduleKeyDeletionCommand).de(de_ScheduleKeyDeletionCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/SignCommand.js
var SignCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "Sign", {}).n("KMSClient", "SignCommand").f(SignRequestFilterSensitiveLog, void 0).ser(se_SignCommand).de(de_SignCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "TagResource", {}).n("KMSClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "UntagResource", {}).n("KMSClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/UpdateAliasCommand.js
var UpdateAliasCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "UpdateAlias", {}).n("KMSClient", "UpdateAliasCommand").f(void 0, void 0).ser(se_UpdateAliasCommand).de(de_UpdateAliasCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/UpdateCustomKeyStoreCommand.js
var UpdateCustomKeyStoreCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "UpdateCustomKeyStore", {}).n("KMSClient", "UpdateCustomKeyStoreCommand").f(UpdateCustomKeyStoreRequestFilterSensitiveLog, void 0).ser(se_UpdateCustomKeyStoreCommand).de(de_UpdateCustomKeyStoreCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/UpdateKeyDescriptionCommand.js
var UpdateKeyDescriptionCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "UpdateKeyDescription", {}).n("KMSClient", "UpdateKeyDescriptionCommand").f(void 0, void 0).ser(se_UpdateKeyDescriptionCommand).de(de_UpdateKeyDescriptionCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/UpdatePrimaryRegionCommand.js
var UpdatePrimaryRegionCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "UpdatePrimaryRegion", {}).n("KMSClient", "UpdatePrimaryRegionCommand").f(void 0, void 0).ser(se_UpdatePrimaryRegionCommand).de(de_UpdatePrimaryRegionCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/VerifyCommand.js
var VerifyCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "Verify", {}).n("KMSClient", "VerifyCommand").f(VerifyRequestFilterSensitiveLog, void 0).ser(se_VerifyCommand).de(de_VerifyCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/commands/VerifyMacCommand.js
var VerifyMacCommand = class extends Command.classBuilder().ep({
  ...commonParams
}).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("TrentService", "VerifyMac", {}).n("KMSClient", "VerifyMacCommand").f(VerifyMacRequestFilterSensitiveLog, void 0).ser(se_VerifyMacCommand).de(de_VerifyMacCommand).build() {
};

// node_modules/@aws-sdk/client-kms/dist-es/KMS.js
var commands = {
  CancelKeyDeletionCommand,
  ConnectCustomKeyStoreCommand,
  CreateAliasCommand,
  CreateCustomKeyStoreCommand,
  CreateGrantCommand,
  CreateKeyCommand,
  DecryptCommand,
  DeleteAliasCommand,
  DeleteCustomKeyStoreCommand,
  DeleteImportedKeyMaterialCommand,
  DescribeCustomKeyStoresCommand,
  DescribeKeyCommand,
  DisableKeyCommand,
  DisableKeyRotationCommand,
  DisconnectCustomKeyStoreCommand,
  EnableKeyCommand,
  EnableKeyRotationCommand,
  EncryptCommand,
  GenerateDataKeyCommand,
  GenerateDataKeyPairCommand,
  GenerateDataKeyPairWithoutPlaintextCommand,
  GenerateDataKeyWithoutPlaintextCommand,
  GenerateMacCommand,
  GenerateRandomCommand,
  GetKeyPolicyCommand,
  GetKeyRotationStatusCommand,
  GetParametersForImportCommand,
  GetPublicKeyCommand,
  ImportKeyMaterialCommand,
  ListAliasesCommand,
  ListGrantsCommand,
  ListKeyPoliciesCommand,
  ListKeysCommand,
  ListResourceTagsCommand,
  ListRetirableGrantsCommand,
  PutKeyPolicyCommand,
  ReEncryptCommand,
  ReplicateKeyCommand,
  RetireGrantCommand,
  RevokeGrantCommand,
  ScheduleKeyDeletionCommand,
  SignCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateAliasCommand,
  UpdateCustomKeyStoreCommand,
  UpdateKeyDescriptionCommand,
  UpdatePrimaryRegionCommand,
  VerifyCommand,
  VerifyMacCommand
};
var KMS = class extends KMSClient {
};
createAggregatedClient(commands, KMS);

// node_modules/@aws-sdk/client-kms/dist-es/pagination/DescribeCustomKeyStoresPaginator.js
var paginateDescribeCustomKeyStores = createPaginator(KMSClient, DescribeCustomKeyStoresCommand, "Marker", "NextMarker", "Limit");

// node_modules/@aws-sdk/client-kms/dist-es/pagination/ListAliasesPaginator.js
var paginateListAliases = createPaginator(KMSClient, ListAliasesCommand, "Marker", "NextMarker", "Limit");

// node_modules/@aws-sdk/client-kms/dist-es/pagination/ListGrantsPaginator.js
var paginateListGrants = createPaginator(KMSClient, ListGrantsCommand, "Marker", "NextMarker", "Limit");

// node_modules/@aws-sdk/client-kms/dist-es/pagination/ListKeyPoliciesPaginator.js
var paginateListKeyPolicies = createPaginator(KMSClient, ListKeyPoliciesCommand, "Marker", "NextMarker", "Limit");

// node_modules/@aws-sdk/client-kms/dist-es/pagination/ListKeysPaginator.js
var paginateListKeys = createPaginator(KMSClient, ListKeysCommand, "Marker", "NextMarker", "Limit");

// node_modules/@aws-sdk/client-kms/dist-es/pagination/ListResourceTagsPaginator.js
var paginateListResourceTags = createPaginator(KMSClient, ListResourceTagsCommand, "Marker", "NextMarker", "Limit");

// node_modules/@aws-sdk/client-kms/dist-es/pagination/ListRetirableGrantsPaginator.js
var paginateListRetirableGrants = createPaginator(KMSClient, ListRetirableGrantsCommand, "Marker", "NextMarker", "Limit");
export {
  Command as $Command,
  AlgorithmSpec,
  AlreadyExistsException,
  CancelKeyDeletionCommand,
  CloudHsmClusterInUseException,
  CloudHsmClusterInvalidConfigurationException,
  CloudHsmClusterNotActiveException,
  CloudHsmClusterNotFoundException,
  CloudHsmClusterNotRelatedException,
  ConnectCustomKeyStoreCommand,
  ConnectionErrorCodeType,
  ConnectionStateType,
  CreateAliasCommand,
  CreateCustomKeyStoreCommand,
  CreateCustomKeyStoreRequestFilterSensitiveLog,
  CreateGrantCommand,
  CreateKeyCommand,
  CustomKeyStoreHasCMKsException,
  CustomKeyStoreInvalidStateException,
  CustomKeyStoreNameInUseException,
  CustomKeyStoreNotFoundException,
  CustomKeyStoreType,
  CustomKeyStoresListEntryFilterSensitiveLog,
  CustomerMasterKeySpec,
  DataKeyPairSpec,
  DataKeySpec,
  DecryptCommand,
  DecryptResponseFilterSensitiveLog,
  DeleteAliasCommand,
  DeleteCustomKeyStoreCommand,
  DeleteImportedKeyMaterialCommand,
  DependencyTimeoutException,
  DescribeCustomKeyStoresCommand,
  DescribeCustomKeyStoresResponseFilterSensitiveLog,
  DescribeKeyCommand,
  DisableKeyCommand,
  DisableKeyRotationCommand,
  DisabledException,
  DisconnectCustomKeyStoreCommand,
  DryRunOperationException,
  EnableKeyCommand,
  EnableKeyRotationCommand,
  EncryptCommand,
  EncryptRequestFilterSensitiveLog,
  EncryptionAlgorithmSpec,
  ExpirationModelType,
  ExpiredImportTokenException,
  GenerateDataKeyCommand,
  GenerateDataKeyPairCommand,
  GenerateDataKeyPairResponseFilterSensitiveLog,
  GenerateDataKeyPairWithoutPlaintextCommand,
  GenerateDataKeyResponseFilterSensitiveLog,
  GenerateDataKeyWithoutPlaintextCommand,
  GenerateMacCommand,
  GenerateMacRequestFilterSensitiveLog,
  GenerateRandomCommand,
  GenerateRandomResponseFilterSensitiveLog,
  GetKeyPolicyCommand,
  GetKeyRotationStatusCommand,
  GetParametersForImportCommand,
  GetParametersForImportResponseFilterSensitiveLog,
  GetPublicKeyCommand,
  GrantOperation,
  ImportKeyMaterialCommand,
  IncorrectKeyException,
  IncorrectKeyMaterialException,
  IncorrectTrustAnchorException,
  InvalidAliasNameException,
  InvalidArnException,
  InvalidCiphertextException,
  InvalidGrantIdException,
  InvalidGrantTokenException,
  InvalidImportTokenException,
  InvalidKeyUsageException,
  InvalidMarkerException,
  KMS,
  KMSClient,
  KMSInternalException,
  KMSInvalidMacException,
  KMSInvalidSignatureException,
  KMSInvalidStateException,
  KMSServiceException,
  KeyEncryptionMechanism,
  KeyManagerType,
  KeySpec,
  KeyState,
  KeyUnavailableException,
  KeyUsageType,
  LimitExceededException,
  ListAliasesCommand,
  ListGrantsCommand,
  ListKeyPoliciesCommand,
  ListKeysCommand,
  ListResourceTagsCommand,
  ListRetirableGrantsCommand,
  MacAlgorithmSpec,
  MalformedPolicyDocumentException,
  MessageType,
  MultiRegionKeyType,
  NotFoundException,
  OriginType,
  PutKeyPolicyCommand,
  ReEncryptCommand,
  ReplicateKeyCommand,
  RetireGrantCommand,
  RevokeGrantCommand,
  ScheduleKeyDeletionCommand,
  SignCommand,
  SignRequestFilterSensitiveLog,
  SigningAlgorithmSpec,
  TagException,
  TagResourceCommand,
  UnsupportedOperationException,
  UntagResourceCommand,
  UpdateAliasCommand,
  UpdateCustomKeyStoreCommand,
  UpdateCustomKeyStoreRequestFilterSensitiveLog,
  UpdateKeyDescriptionCommand,
  UpdatePrimaryRegionCommand,
  VerifyCommand,
  VerifyMacCommand,
  VerifyMacRequestFilterSensitiveLog,
  VerifyRequestFilterSensitiveLog,
  WrappingKeySpec,
  XksKeyAlreadyInUseException,
  XksKeyInvalidConfigurationException,
  XksKeyNotFoundException,
  XksProxyAuthenticationCredentialTypeFilterSensitiveLog,
  XksProxyConfigurationTypeFilterSensitiveLog,
  XksProxyConnectivityType,
  XksProxyIncorrectAuthenticationCredentialException,
  XksProxyInvalidConfigurationException,
  XksProxyInvalidResponseException,
  XksProxyUriEndpointInUseException,
  XksProxyUriInUseException,
  XksProxyUriUnreachableException,
  XksProxyVpcEndpointServiceInUseException,
  XksProxyVpcEndpointServiceInvalidConfigurationException,
  XksProxyVpcEndpointServiceNotFoundException,
  Client as __Client,
  paginateDescribeCustomKeyStores,
  paginateListAliases,
  paginateListGrants,
  paginateListKeyPolicies,
  paginateListKeys,
  paginateListResourceTags,
  paginateListRetirableGrants
};
//# sourceMappingURL=dist-es-CHGYXLT6.js.map
