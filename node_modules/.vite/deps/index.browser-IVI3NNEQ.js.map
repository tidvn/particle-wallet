{
  "version": 3,
  "sources": ["../../@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js", "../../@aws-sdk/credential-providers/dist-es/fromCognitoIdentity.js", "../../@aws-sdk/credential-providers/dist-es/fromCognitoIdentityPool.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.browser.js", "../../@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.js", "../../@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js", "../../@aws-sdk/credential-providers/dist-es/fromWebToken.js"],
  "sourcesContent": ["export function resolveLogins(logins) {\n    return Promise.all(Object.keys(logins).reduce((arr, name) => {\n        const tokenOrProvider = logins[name];\n        if (typeof tokenOrProvider === \"string\") {\n            arr.push([name, tokenOrProvider]);\n        }\n        else {\n            arr.push(tokenOrProvider().then((token) => [name, token]));\n        }\n        return arr;\n    }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins, [key, value]) => {\n        logins[key] = value;\n        return logins;\n    }, {}));\n}\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentity(parameters) {\n    return async () => {\n        parameters.logger?.debug(\"@aws-sdk/credential-provider-cognito-identity\", \"fromCognitoIdentity\");\n        const { GetCredentialsForIdentityCommand, CognitoIdentityClient } = await import(\"./loadCognitoIdentity\");\n        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(), Expiration, SecretKey = throwOnMissingSecretKey(), SessionToken, } = throwOnMissingCredentials(), } = await (parameters.client ??\n            new CognitoIdentityClient(Object.assign({}, parameters.clientConfig ?? {}, {\n                region: parameters.clientConfig?.region ?? parameters.parentClientConfig?.region,\n            }))).send(new GetCredentialsForIdentityCommand({\n            CustomRoleArn: parameters.customRoleArn,\n            IdentityId: parameters.identityId,\n            Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n        }));\n        return {\n            identityId: parameters.identityId,\n            accessKeyId: AccessKeyId,\n            secretAccessKey: SecretKey,\n            sessionToken: SessionToken,\n            expiration: Expiration,\n        };\n    };\n}\nfunction throwOnMissingAccessKeyId() {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\nfunction throwOnMissingCredentials() {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\nfunction throwOnMissingSecretKey() {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no secret key\");\n}\n", "const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n    constructor(dbName = \"aws:cognito-identity-ids\") {\n        this.dbName = dbName;\n    }\n    getItem(key) {\n        return this.withObjectStore(\"readonly\", (store) => {\n            const req = store.get(key);\n            return new Promise((resolve) => {\n                req.onerror = () => resolve(null);\n                req.onsuccess = () => resolve(req.result ? req.result.value : null);\n            });\n        }).catch(() => null);\n    }\n    removeItem(key) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.delete(key);\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    setItem(id, value) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.put({ id, value });\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    getDb() {\n        const openDbRequest = self.indexedDB.open(this.dbName, 1);\n        return new Promise((resolve, reject) => {\n            openDbRequest.onsuccess = () => {\n                resolve(openDbRequest.result);\n            };\n            openDbRequest.onerror = () => {\n                reject(openDbRequest.error);\n            };\n            openDbRequest.onblocked = () => {\n                reject(new Error(\"Unable to access DB\"));\n            };\n            openDbRequest.onupgradeneeded = () => {\n                const db = openDbRequest.result;\n                db.onerror = () => {\n                    reject(new Error(\"Failed to create object store\"));\n                };\n                db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n            };\n        });\n    }\n    withObjectStore(mode, action) {\n        return this.getDb().then((db) => {\n            const tx = db.transaction(STORE_NAME, mode);\n            tx.oncomplete = () => db.close();\n            return new Promise((resolve, reject) => {\n                tx.onerror = () => reject(tx.error);\n                resolve(action(tx.objectStore(STORE_NAME)));\n            }).catch((err) => {\n                db.close();\n                throw err;\n            });\n        });\n    }\n}\n", "export class InMemoryStorage {\n    constructor(store = {}) {\n        this.store = store;\n    }\n    getItem(key) {\n        if (key in this.store) {\n            return this.store[key];\n        }\n        return null;\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n", "import { IndexedDbStorage } from \"./IndexedDbStorage\";\nimport { InMemoryStorage } from \"./InMemoryStorage\";\nconst inMemoryStorage = new InMemoryStorage();\nexport function localStorage() {\n    if (typeof self === \"object\" && self.indexedDB) {\n        return new IndexedDbStorage();\n    }\n    if (typeof window === \"object\" && window.localStorage) {\n        return window.localStorage;\n    }\n    return inMemoryStorage;\n}\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, clientConfig, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined, logger, parentClientConfig, }) {\n    logger?.debug(\"@aws-sdk/credential-provider-cognito-identity\", \"fromCognitoIdentity\");\n    const cacheKey = userIdentifier\n        ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}`\n        : undefined;\n    let provider = async () => {\n        const { GetIdCommand, CognitoIdentityClient } = await import(\"./loadCognitoIdentity\");\n        const _client = client ??\n            new CognitoIdentityClient(Object.assign({}, clientConfig ?? {}, { region: clientConfig?.region ?? parentClientConfig?.region }));\n        let identityId = (cacheKey && (await cache.getItem(cacheKey)));\n        if (!identityId) {\n            const { IdentityId = throwOnMissingId() } = await _client.send(new GetIdCommand({\n                AccountId: accountId,\n                IdentityPoolId: identityPoolId,\n                Logins: logins ? await resolveLogins(logins) : undefined,\n            }));\n            identityId = IdentityId;\n            if (cacheKey) {\n                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });\n            }\n        }\n        provider = fromCognitoIdentity({\n            client: _client,\n            customRoleArn,\n            logins,\n            identityId,\n        });\n        return provider();\n    };\n    return () => provider().catch(async (err) => {\n        if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });\n        }\n        throw err;\n    });\n}\nfunction throwOnMissingId() {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n", "import { fromCognitoIdentity as _fromCognitoIdentity, } from \"@aws-sdk/credential-provider-cognito-identity\";\nexport const fromCognitoIdentity = (options) => _fromCognitoIdentity({\n    ...options,\n});\n", "import { fromCognitoIdentityPool as _fromCognitoIdentityPool, } from \"@aws-sdk/credential-provider-cognito-identity\";\nexport const fromCognitoIdentityPool = (options) => _fromCognitoIdentityPool({\n    ...options,\n});\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nconst LOOPBACK_CIDR_IPv4 = \"127.0.0.0/8\";\nconst LOOPBACK_CIDR_IPv6 = \"::1/128\";\nconst ECS_CONTAINER_HOST = \"169.254.170.2\";\nconst EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\nconst EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\nexport const checkUrl = (url) => {\n    if (url.protocol === \"https:\") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes(\"[\")) {\n        if (url.hostname === \"[::1]\" || url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === \"localhost\") {\n            return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === \"127\" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`);\n};\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { parseRfc3339DateTime } from \"@smithy/smithy-client\";\nimport { sdkStreamMixin } from \"@smithy/util-stream\";\nexport function createGetRequest(url) {\n    return new HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nexport async function getCredentials(response) {\n    const contentType = response?.headers[\"content-type\"] ?? response?.headers[\"Content-Type\"] ?? \"\";\n    if (!contentType.includes(\"json\")) {\n        console.warn(\"HTTP credential provider response header content-type was not application/json. Observed: \" + contentType + \".\");\n    }\n    const stream = sdkStreamMixin(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== \"string\" ||\n            typeof parsed.SecretAccessKey !== \"string\" ||\n            typeof parsed.Token !== \"string\" ||\n            typeof parsed.Expiration !== \"string\") {\n            throw new CredentialsProviderError(\"HTTP credential provider response not of the required format, an object matching: \" +\n                \"{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\");\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: parseRfc3339DateTime(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`);\n}\n", "export const retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n", "import { FetchHttpHandler } from \"@smithy/fetch-http-handler\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { checkUrl } from \"./checkUrl\";\nimport { createGetRequest, getCredentials } from \"./requestHelpers\";\nimport { retryWrapper } from \"./retry-wrapper\";\nexport const fromHttp = (options) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-http\", \"fromHttp\");\n    let host;\n    const full = options.credentialsFullUri;\n    if (full) {\n        host = full;\n    }\n    else {\n        throw new CredentialsProviderError(\"No HTTP credential provider host provided.\");\n    }\n    const url = new URL(host);\n    checkUrl(url);\n    const requestHandler = new FetchHttpHandler();\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (options.authorizationToken) {\n            request.headers.Authorization = options.authorizationToken;\n        }\n        const result = await requestHandler.handle(request);\n        return getCredentials(result.response);\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const fromTemporaryCredentials = (options) => {\n    let stsClient;\n    return async () => {\n        options.logger?.debug(\"@aws-sdk/credential-providers\", \"fromTemporaryCredentials (STS)\");\n        const params = { ...options.params, RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now() };\n        if (params?.SerialNumber) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n            }\n            params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n        }\n        const { AssumeRoleCommand, STSClient } = await import(\"./loadSts\");\n        if (!stsClient)\n            stsClient = new STSClient({ ...options.clientConfig, credentials: options.masterCredentials });\n        if (options.clientPlugins) {\n            for (const plugin of options.clientPlugins) {\n                stsClient.middlewareStack.use(plugin);\n            }\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\n", "export const fromWebToken = (init) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"./loadSts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n", "import { fromWebToken as _fromWebToken } from \"@aws-sdk/credential-provider-web-identity\";\nexport const fromWebToken = (init) => _fromWebToken({\n    ...init,\n});\n"],
  "mappings": "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",
  "names": ["logins", "fromCognitoIdentity", "fromCognitoIdentityPool", "fromWebToken"]
}
