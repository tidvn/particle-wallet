import type { Chain } from '@particle-network/chains';
import type { Transaction, VersionedTransaction } from '@solana/web3.js';
import type { CurrencyUnit } from './currency';
import type { Theme } from './theme';
export declare const IframeWalletMessageType = "particle-auth-core-iframe-wallet-message";
export declare const walletIframeId = "particle-auth-core-iframe-wallet";
export type ERC4337Options = {
    name: string;
    version: string;
};
export declare enum EntryPosition {
    BR = "bottom-right",
    BL = "bottom-left",
    TR = "top-right",
    TL = "top-left"
}
export interface ModeStyle {
    colorAccent?: string;
    colorPrimary?: string;
    colorOnPrimary?: string;
    primaryButtonBackgroundColors?: [string, string];
    primaryIconButtonBackgroundColors?: [string, string];
    primaryIconTextColor?: string;
    primaryButtonTextColor?: string;
    cancelButtonBackgroundColor?: string;
    backgroundColors?: [string, [[string, string], [string, string]]];
    messageColors?: string[];
    borderGlowColors?: string[];
    modalMaskBackgroundColor?: string;
    cardBorderRadius?: number;
}
export interface WalletCustomStyle {
    supportChains?: Chain[];
    supportAddToken?: boolean;
    displayTokenAddresses?: string[];
    displayNFTContractAddresses?: string[];
    priorityTokenAddresses?: string[];
    priorityNFTContractAddresses?: string[];
    fiatCoin?: CurrencyUnit;
    evmSupportWalletConnect?: boolean;
    supportUIModeSwitch?: boolean;
    supportLanguageSwitch?: boolean;
    light?: ModeStyle;
    dark?: ModeStyle;
}
export interface WalletOption {
    visible?: boolean;
    preload?: boolean;
    entryPosition?: EntryPosition;
    themeType?: Theme;
    language?: string;
    erc4337?: ERC4337Options;
    topMenuType?: 'close' | 'fullscreen';
    customStyle?: WalletCustomStyle;
}
export interface WalletConfig {
    topMenuType?: 'close' | 'fullscreen';
    pathName?: string;
    query?: {
        [key: string]: string | number;
    };
}
export interface ProjectConfig {
    projectId: string;
    clientKey: string;
    appId: string;
}
export interface WalletCore {
    ethereum?: EthereumProvider;
    solana?: SolanaWallet;
}
export interface EthereumProvider {
    request(payload: {
        method: string;
        params?: unknown[];
        chainId?: number;
    }): Promise<any>;
    on(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
}
export interface SolanaWallet {
    chainId: number;
    selectedAddress: string | null;
    on(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
    connect(): Promise<void>;
    signTransaction<T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<T>;
    signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[], chainId?: number): Promise<T[]>;
    signAndSendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<string>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
    switchChain?: (chainId: number) => Promise<void>;
}
export declare enum MessageType {
    EthereumRpc = "ethereum-rpc",
    EthereumEvent = "ethereum-event",
    SolanaRpc = "solana-rpc",
    SolanaEvent = "solana-event",
    OpenAccountAndSecurity = "open-account-and-security",
    GetUserInfo = "get-user-info"
}
export interface MessageResponse<T> {
    id: string;
    messageType: MessageType;
    data: T;
}
export type CustomEventHandler = (messageType: string, data?: unknown) => Promise<any>;
