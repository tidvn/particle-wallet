import type { Chain, ChainInfo, ParticleConnect, Provider } from '@particle-network/connectors';
import type { ReactNode } from 'react';
export type ParticleKitChain = Chain;
interface ParticleKitChainProviderProps {
    chains: Chain[];
    chain?: Chain;
    setChain: (chain: Chain) => void;
    initialChain?: Chain | undefined;
    children: ReactNode;
    userChains: Chain[];
    provider: Provider | undefined;
    connectKit?: ParticleConnect;
    connectId?: string;
}
export declare function ParticleKitChainProvider({ chains, children, chain, setChain, userChains, provider, connectKit, connectId, }: ParticleKitChainProviderProps): JSX.Element;
export declare const useParticleKitChains: () => Chain[];
export declare const useInitialChainId: () => number | undefined;
export declare const useIsEvm: () => {
    updateIsEvm: ((bool: boolean) => void) | undefined;
    isEvm: boolean;
    changeNetWork: (type: string) => void;
};
export declare const useIsSolana: () => {
    updateIsSolana: ((bool: boolean) => void) | undefined;
    isSolana: boolean;
    changeNetWork: (type: string) => void;
};
export declare const useSwitchChains: () => {
    isSwitchChain: boolean;
    renderChains: any[];
    switchChain: (chain: Chain) => Promise<void>;
};
export declare const useCurrentChain: () => ChainInfo | undefined;
export {};
