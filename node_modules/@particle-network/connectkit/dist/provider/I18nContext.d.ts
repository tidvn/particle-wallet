import React from 'react';
declare const useTranslation: () => {
    i18n: import("i18next").i18n;
    t: import("i18next").TFunction<string[], undefined>;
    init(callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): Promise<import("i18next").TFunction<"translation", undefined>>;
    init(options: import("i18next").InitOptions, callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): Promise<import("i18next").TFunction<"translation", undefined>>;
    loadResources(callback?: ((err: any) => void) | undefined): void;
    use<T extends import("i18next").Module>(module: T | import("i18next").NewableModule<T> | import("i18next").Newable<T>): import("i18next").i18n;
    modules: import("i18next").Modules;
    services: import("i18next").Services;
    store: import("i18next").ResourceStore;
    exists: import("i18next").ExistsFunction<string, {
        [key: string]: any;
    }>;
    getDataByLanguage(lng: string): {
        [key: string]: {
            [key: string]: string;
        };
    } | undefined;
    getFixedT<N extends import("i18next").Namespace<string> = "translation", TKPrefix extends import("i18next").KeyPrefix<N> = undefined>(lng: string | readonly string[], ns?: N | undefined, keyPrefix?: TKPrefix | undefined): import("i18next").TFunction<N, TKPrefix>;
    getFixedT<N_1 extends import("i18next").Namespace<string> | null, TKPrefix_1 extends import("i18next").KeyPrefix<ActualNS>, ActualNS extends import("i18next").Namespace<string> = N_1 extends null ? "translation" : N_1>(lng: null, ns: N_1, keyPrefix?: TKPrefix_1 | undefined): import("i18next").TFunction<ActualNS, TKPrefix_1>;
    changeLanguage(lng?: string | undefined, callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): Promise<import("i18next").TFunction<"translation", undefined>>;
    language: string;
    languages: readonly string[];
    resolvedLanguage: string;
    loadNamespaces(ns: string | readonly string[], callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): Promise<void>;
    loadLanguages(lngs: string | readonly string[], callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): Promise<void>;
    reloadResources(lngs?: string | readonly string[] | undefined, ns?: string | readonly string[] | undefined, callback?: (() => void) | undefined): Promise<void>;
    reloadResources(lngs: null, ns: string | readonly string[], callback?: (() => void) | undefined): Promise<void>;
    setDefaultNamespace(ns: string): void;
    hasLoadedNamespace(ns: string, options?: Pick<import("i18next").InitOptions, "fallbackLng"> | undefined): boolean;
    dir(lng?: string | undefined): "ltr" | "rtl";
    format: (value: any, format?: string | undefined, lng?: string | undefined, options?: (import("i18next").InterpolationOptions & {
        [key: string]: any;
    }) | undefined) => string;
    createInstance(options?: import("i18next").InitOptions | undefined, callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): import("i18next").i18n;
    cloneInstance(options?: import("i18next").InitOptions | undefined, callback?: ((error: any, t: import("i18next").TFunction<"translation", undefined>) => void) | undefined): import("i18next").i18n;
    on(event: "initialized", callback: (options: import("i18next").InitOptions) => void): void;
    on(event: "loaded", callback: (loaded: {
        [language: string]: {
            [namespace: string]: boolean;
        };
    }) => void): void;
    on(event: "failedLoading", callback: (lng: string, ns: string, msg: string) => void): void;
    on(event: "missingKey", callback: (lngs: readonly string[], namespace: string, key: string, res: string) => void): void;
    on(event: "added" | "removed", callback: (lng: string, ns: string) => void): void;
    on(event: "languageChanged", callback: (lng: string) => void): void;
    on(event: string, listener: (...args: any[]) => void): void;
    off(event: string, listener?: ((...args: any[]) => void) | undefined): void;
    getResource(lng: string, ns: string, key: string, options?: Pick<import("i18next").InitOptions, "keySeparator" | "ignoreJSONStructure"> | undefined): any;
    addResource(lng: string, ns: string, key: string, value: string, options?: {
        keySeparator?: string | undefined;
        silent?: boolean | undefined;
    } | undefined): import("i18next").i18n;
    addResources(lng: string, ns: string, resources: any): import("i18next").i18n;
    addResourceBundle(lng: string, ns: string, resources: any, deep?: boolean | undefined, overwrite?: boolean | undefined): import("i18next").i18n;
    hasResourceBundle(lng: string, ns: string): boolean;
    getResourceBundle(lng: string, ns: string): any;
    removeResourceBundle(lng: string, ns: string): import("i18next").i18n;
    options: import("i18next").InitOptions;
    isInitialized: boolean;
    emit(eventName: string): void;
    reportNamespaces: import("react-i18next").ReportNamespaces;
};
interface IProps {
    children: React.ReactNode;
}
declare const I18nProvider: (props: IProps) => JSX.Element;
export { I18nProvider, useTranslation };
