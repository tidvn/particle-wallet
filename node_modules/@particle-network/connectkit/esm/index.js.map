{
  "version": 3,
  "sources": ["../src/components/ConnectButton/index.tsx", "../src/provider/ModalChainContext.tsx", "../src/provider/ModalContext.tsx", "../src/components/ChainModal/index.tsx", "../src/provider/I18nContext.tsx", "../src/locales/lang/en_US.js", "../src/locales/lang/zh_CN.js", "../src/locales/lang/ko_KR.js", "../src/locales/lang/ja_JP.js", "../src/locales/lang/zh_TW.js", "../src/components/ConnectModal/index.tsx", "../src/hooks/useParticleConnect.ts", "../src/hooks/useNetwork.ts", "../src/hooks/useWalletMeta.ts", "../src/components/ConnectForm/index.tsx", "../src/components/ConnectForm/qr.tsx", "../src/utils/common.ts", "../src/hooks/useAccount.ts", "../src/hooks/useConnectId.ts", "../src/hooks/useParticleProvider.ts", "../src/services/AuthAvatar.tsx", "../src/services/blockies.js", "../src/utils/string.ts", "../src/components/AccountModal/index.tsx", "../src/components/ConnectButton/ConnectButtonRenderer.tsx"],
  "sourcesContent": ["import { tronAddressFromHex } from '@particle-network/auth-core';\nimport type { ChainInfo } from '@particle-network/connectors';\nimport React, { useEffect, useState } from 'react';\nimport {\n    useAccountInfo,\n    useAccountModal,\n    useChainModal,\n    useConnectModal,\n    useCurrentChain,\n    useModalState,\n    useUnsupportedChain,\n} from '../../hooks';\nimport { useAccount } from '../../hooks/useAccount';\nimport { useParticleConnect } from '../../hooks/useParticleConnect';\nimport { useTranslation } from '../../provider/I18nContext';\nimport Avatar from '../../services/AuthAvatar';\nimport '../../styles/index.css';\nimport { shortString } from '../../utils';\nimport AccountModal from '../AccountModal';\nimport { ConnectButtonRenderer } from './ConnectButtonRenderer';\nimport './index.css';\n\nexport interface ConnectButtonProps {\n    modalMode?: string;\n}\nfunction ConnectButton({ modalMode }: ConnectButtonProps) {\n    const [isUIButton, setIsUIbutton] = useState(false);\n    const { cacheconnect } = useParticleConnect();\n    const account = useAccount();\n    const { openConnectModal } = useConnectModal();\n    const { openAccountModal, closeAccountModal } = useAccountModal();\n    const { openChainModal } = useChainModal();\n    const { accountModalOpen } = useModalState();\n    const chain = useCurrentChain();\n    const { accountLoading } = useAccountInfo();\n    const { unsupportedChain } = useUnsupportedChain();\n    const { t } = useTranslation();\n\n    const openAccount = () => {\n        setIsUIbutton(true);\n        openAccountModal?.();\n    };\n    const closeAccount = () => {\n        setIsUIbutton(false);\n        closeAccountModal?.();\n    };\n\n    useEffect(() => {\n        cacheconnect();\n    }, []);\n\n    const accountFilter = (ant: string | undefined) => {\n        if (!ant) return '';\n        let account = ant;\n        if (chain?.name.toLowerCase() === 'tron') {\n            console.log('tron name filter');\n            account = tronAddressFromHex(ant);\n        }\n\n        return shortString(account);\n    };\n    if (accountLoading) {\n        return <></>;\n    }\n    if (unsupportedChain) {\n        return (\n            <div className=\"particle-unsupported-chain-button  center-center\" onClick={openChainModal}>\n                <span> {t('ConnectButton.wrongNetwork')}</span> <div className=\"particle-icon-more\"></div>\n            </div>\n        );\n    }\n\n    const getChainDisplayName = (chainInfo?: ChainInfo) => {\n        if (!chainInfo) {\n            return '';\n        }\n        if (chainInfo.network === 'Mainnet') {\n            return chainInfo.fullname.replace(' Mainnet', '');\n        } else {\n            return chainInfo.fullname;\n        }\n    };\n\n    if (accountLoading) {\n        return <></>;\n    }\n    if (unsupportedChain) {\n        return (\n            <div className=\"particle-unsupported-chain-button  center-center\" onClick={openChainModal}>\n                <span> {t('ConnectButton.wrongNetwork')}</span> <div className=\"particle-icon-more\"></div>\n            </div>\n        );\n    }\n\n    return (\n        <div className={`center-center particle-user-bar-container connect-body ${isUIButton ? 'is-ui-button' : ''}`}>\n            {account ? (\n                <>\n                    <div className=\"particle-account-info center-center particle-chain\" onClick={openChainModal}>\n                        <div className=\"particle-avatar-img\" style={{ backgroundImage: `url(${chain?.icon})` }}>\n                            {/* <img className=\"particle-chain-icon\" src={chain?.icon} alt=\"\" /> */}\n                        </div>\n                        <span>{getChainDisplayName(chain)}</span>\n                        <div className=\"particle-icon-more\"></div>\n                    </div>\n                    <div className=\"particle-account-info-fixed\">\n                        <div\n                            className=\"particle-account-info center-center\"\n                            onClick={() => (accountModalOpen ? closeAccount?.() : openAccount?.())}\n                        >\n                            <div className=\"particle-avatar-img\">\n                                <Avatar opts={{ seed: account, size: 24, scale: 1 }} />\n                            </div>\n                            <span>{accountFilter(account)}</span>\n                            <div className=\"particle-icon-more\"></div>\n                        </div>\n                        <AccountModal onClose={closeAccount} open={accountModalOpen} mode={modalMode} />\n                    </div>\n                </>\n            ) : (\n                <div className={'particle-connect-wallet-btn'} onClick={openConnectModal}>\n                    {t('ConnectButton.connectWallet')}\n                </div>\n            )}\n        </div>\n    );\n}\nexport default ConnectButton;\n\nConnectButton.Custom = ConnectButtonRenderer;\n", "import { useEthereum, useSolana } from '@particle-network/auth-core-modal';\nimport { chains as chainUtils } from '@particle-network/chains';\nimport type { Chain, ChainInfo, ParticleConnect, Provider } from '@particle-network/connectors';\nimport { ParticleChains, isEVMProvider, isSolanaProvider } from '@particle-network/connectors';\nimport type { ReactNode } from 'react';\nimport React, { createContext, useCallback, useContext, useMemo, useState } from 'react';\n\n// This type is a combination of wagmi and ParticleKit chain types to make\n// it easier for consumers to define their chain config in a single place.\nexport type ParticleKitChain = Chain;\ninterface ParticleKitChainContextValue {\n    chains: Chain[];\n    chain?: Chain;\n    isEvm: boolean;\n    isSolana: boolean;\n    renderChains: any[];\n    updateIsEvm?: (bool: boolean) => void;\n    updateIsSolana?: (bool: boolean) => void;\n    isSwitchChain: boolean;\n    switchChain: (chain: Chain) => Promise<void>;\n    changeNetWork: (type: string) => void;\n}\n\nconst ParticleKitChainContext = createContext<ParticleKitChainContextValue>({\n    chains: [],\n    isEvm: false,\n    isSolana: false,\n    renderChains: [],\n    isSwitchChain: true,\n    switchChain: async (chain: Chain) => {},\n    changeNetWork: (type: string) => {},\n});\n\ninterface ParticleKitChainProviderProps {\n    chains: Chain[];\n    chain?: Chain;\n    setChain: (chain: Chain) => void;\n    initialChain?: Chain | undefined;\n    children: ReactNode;\n    userChains: Chain[];\n    provider: Provider | undefined;\n    connectKit?: ParticleConnect;\n    connectId?: string;\n}\n\nexport function ParticleKitChainProvider({\n    chains,\n    children,\n    chain,\n    setChain,\n    userChains,\n    provider,\n    connectKit,\n    connectId,\n}: ParticleKitChainProviderProps) {\n    const [isEvm, setIsEvm] = useState(false);\n    const [isSolana, setIsSolana] = useState(false);\n    const [unsupportedChain, setUnsupportedChain] = useState(false);\n    const updateIsEvm = useCallback((bool: boolean): void => setIsEvm(bool), []);\n    const updateIsSolana = useCallback((bool: boolean): void => setIsSolana(bool), []);\n    const { switchChain: evmSwitchChain } = useEthereum();\n    const { switchChain: solanaSwitchChain } = useSolana();\n\n    const renderChains = useMemo(() => {\n        if (connectId && userChains && provider) {\n            let rchains = [...userChains];\n            const isEvm = provider && isEVMProvider(provider);\n            const isSolana = provider && isSolanaProvider(provider);\n            // \u5224\u65AD\u7B2C\u4E09\u65B9\u94B1\u5305\u7684\u94FE\u662F\u5426\u4E3Aevm \u53BB\u5904\u975Esolana\u7684\u94FE\n            if (isSolana && connectId !== 'particle') {\n                rchains = rchains.filter((item) => [101, 102, 103].includes(item.id));\n            }\n            // \u5224\u65AD\u7B2C\u4E09\u65B9\u94B1\u5305\u7684\u94FE\u662F\u5426\u4E3Aevm \u53BB\u5904solana\u7684\u94FE\n            if (isEvm && connectId !== 'particle') {\n                rchains = rchains.filter((item) => {\n                    return ![101, 102, 103].includes(item.id) && item.name.toLowerCase() !== 'tron';\n                });\n            }\n\n            const rest = rchains.map((chain) => {\n                const chainInfo = chainUtils.getChainInfo(chain);\n                if (chainInfo) {\n                    return chainInfo;\n                }\n                return {\n                    icon: '',\n                    network: '',\n                    ...chain,\n                };\n            });\n            console.log('renderChains', rest);\n            return rest;\n        }\n        return [];\n    }, [connectId, userChains, provider]);\n\n    const isSwitchChain = useMemo(() => {\n        if (!connectKit) return false;\n        if (!connectId) return false;\n        if (connectId === 'particle') return true;\n        const connector = connectKit?.getConnector(connectId)?.connector;\n        // @ts-ignore\n        if (connector && connectId && !!connector?.switchChain) {\n            return true;\n        } else {\n            return false;\n        }\n    }, [connectId, connectKit]);\n\n    const changeNetWork = useCallback(\n        (chainType: string) => {\n            console.log('chainType:', chainType);\n            localStorage.setItem('particle_connect_chain_type', chainType);\n            switch (chainType) {\n                case 'solana':\n                    updateIsEvm?.(false);\n                    updateIsSolana?.(true);\n                    break;\n                case 'evm':\n                    updateIsEvm?.(true);\n                    updateIsSolana?.(false);\n                    break;\n            }\n        },\n        [updateIsEvm, updateIsSolana]\n    );\n\n    const switchChain = useCallback(\n        async (targetChain: Chain) => {\n            console.log('targetChain targetChain:', targetChain);\n            if (!isSwitchChain) {\n                throw new Error('Switch chain is not supported');\n            }\n            if (isSolana && connectId !== 'particle') return;\n            if (!chain) {\n                return;\n            }\n            if (chain.id === targetChain.id) throw new Error('The chain is same as the current chain');\n            if (connectId === 'particle') {\n                if (targetChain?.name.toLowerCase() === 'solana') {\n                    await solanaSwitchChain(targetChain.id);\n                    changeNetWork('solana');\n                } else {\n                    await evmSwitchChain(targetChain.id);\n                    changeNetWork('evm');\n                }\n                setChain(targetChain);\n            } else {\n                await connectKit?.switchChain({ id: targetChain.id, name: targetChain.name });\n            }\n        },\n        [connectKit, connectId, isSolana, chain, changeNetWork, isSwitchChain, setChain]\n    );\n\n    return (\n        <ParticleKitChainContext.Provider\n            value={useMemo(\n                () => ({\n                    chains,\n                    chain,\n                    isEvm,\n                    isSolana,\n                    updateIsSolana,\n                    updateIsEvm,\n                    unsupportedChain,\n                    setUnsupportedChain,\n                    renderChains,\n                    isSwitchChain,\n                    switchChain,\n                    changeNetWork,\n                }),\n                [\n                    chains,\n                    chain,\n                    isEvm,\n                    isSolana,\n                    updateIsSolana,\n                    updateIsEvm,\n                    unsupportedChain,\n                    setUnsupportedChain,\n                    renderChains,\n                    isSwitchChain,\n                    switchChain,\n                    changeNetWork,\n                ]\n            )}\n        >\n            {children}\n        </ParticleKitChainContext.Provider>\n    );\n}\n\nexport const useParticleKitChains = () => useContext(ParticleKitChainContext).chains;\nexport const useInitialChainId = () => useContext(ParticleKitChainContext)?.chain?.id;\n\nexport const useIsEvm = () => {\n    const { updateIsEvm, isEvm, changeNetWork } = useContext(ParticleKitChainContext);\n    return { updateIsEvm, isEvm, changeNetWork };\n};\n\nexport const useIsSolana = () => {\n    const { updateIsSolana, isSolana, changeNetWork } = useContext(ParticleKitChainContext);\n    return { updateIsSolana, isSolana, changeNetWork };\n};\n\nexport const useSwitchChains = () => {\n    const { isSwitchChain, renderChains, switchChain } = useContext(ParticleKitChainContext);\n    return { isSwitchChain, renderChains, switchChain };\n};\n\nexport const useCurrentChain = (): ChainInfo | undefined => {\n    const initialChain = useContext(ParticleKitChainContext)?.chain;\n    if (!initialChain) return undefined;\n    const findKey = Object.keys(ParticleChains).find((key) => ParticleChains[key].id === initialChain.id);\n    if (findKey) return ParticleChains[findKey];\n    return undefined;\n};\n", "import { AuthType } from '@particle-network/auth-core';\nimport { AuthCoreContextProvider, type Language } from '@particle-network/auth-core-modal';\nimport type { Chain, ConnectConfig, Provider } from '@particle-network/connectors';\nimport { ParticleConnect, getPublicAddress } from '@particle-network/connectors';\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport ChainModal from '../components/ChainModal';\nimport ConnectModal from '../components/ConnectModal';\nimport { getVersion } from '../utils/common';\nimport { I18nProvider, useTranslation } from './I18nContext';\nimport { ParticleKitChainProvider } from './ModalChainContext';\n\ninterface ModalContextValue {\n    userChains: Chain[];\n    account?: string;\n    chain?: Chain;\n    updateChain?: (chain?: Chain) => void;\n    accountModalOpen: boolean;\n    chainModalOpen: boolean;\n    connectModalOpen: boolean;\n    particleProvider?: Provider;\n    connectKit?: ParticleConnect;\n    accountLoading?: boolean;\n    connectId?: string;\n    walletSort: string[];\n    openAccountModal?: () => void;\n    closeAccountModal?: () => void;\n    openChainModal?: () => void;\n    openConnectModal?: () => void;\n    updateParticleProvider?: (obj?: Provider) => void;\n    updateAccount?: (obj: string | undefined) => void;\n    updateConnectId?: (obj: string) => void;\n    setAccountLoading?: (obj: boolean) => void;\n    unsupportedChain: boolean;\n    setUnsupportedChain?: (bool: boolean) => void;\n    setTheme?: (theme: string) => void;\n    theme: string;\n    language: string;\n    changLanguage: (val: string) => any;\n    cacheProvider: boolean;\n    options: ConnectConfig;\n}\n\nexport const ModalContext = createContext<ModalContextValue>({\n    userChains: [],\n    theme: 'light',\n    accountModalOpen: false,\n    connectModalOpen: false,\n    chainModalOpen: false,\n    walletSort: ['Particle Auth', 'Wallet'],\n    unsupportedChain: false,\n    language: 'en',\n    changLanguage: (val: string) => {},\n    cacheProvider: true,\n    options: {} as ConnectConfig,\n});\n\ninterface ModalProviderProps {\n    children: React.ReactNode;\n    options: ConnectConfig;\n    theme?: 'dark' | 'light';\n    walletSort?: string[];\n    language?: string;\n    cacheProvider?: boolean;\n}\n\nfunction useModalStateValue() {\n    const [isModalOpen, setModalOpen] = useState(false);\n    return {\n        closeModal: useCallback(() => setModalOpen(false), []),\n        isModalOpen,\n        openModal: useCallback(() => setModalOpen(true), []),\n    };\n}\n\nexport function ModalProvider({\n    children,\n    options,\n    theme: optionsTheme,\n    walletSort = ['Particle Auth', 'Wallet'],\n    language: lang,\n    cacheProvider = true,\n}: ModalProviderProps) {\n    const userChains = useMemo(() => options.chains, [options]);\n    const [theme, setTheme] = useState(optionsTheme || 'light');\n    const [unsupportedChain, setUnsupportedChain] = useState(false);\n    const [account, setAccount] = useState(undefined);\n    const [chain, setChain] = useState<Chain | undefined>(undefined);\n    const [particleProvider, setParticleProvider] = useState<Provider | undefined>(undefined);\n    const [connectId, setConnectId] = useState<string>('');\n    const [classTheme, setClassTheme] = useState<string>('');\n    const [accountLoading, setAccountLoading] = useState<boolean>(true);\n    const [language, setLanguage] = useState<string>(lang ?? 'en');\n    const { i18n } = useTranslation();\n\n    const connectKit = useMemo<ParticleConnect>(() => {\n        if (typeof window !== 'undefined') {\n            //@ts-ignore\n            if (!window.particleConnect) {\n                const kit = new ParticleConnect(options);\n                //@ts-ignore\n                kit.reactUIVersion = getVersion();\n                //@ts-ignore\n                window.particleConnect = kit;\n            }\n            //@ts-ignore\n            return window.particleConnect;\n        }\n        return {};\n    }, [options]);\n\n    useEffect(() => {\n        if (i18n) i18n.changeLanguage(language);\n        console.log('particle change language:', language);\n    }, [language]);\n\n    useEffect(() => {\n        switch (theme) {\n            case 'light':\n                setClassTheme('particle-connect-ui-theme-ligth');\n                break;\n            case 'dark':\n                setClassTheme('particle-connect-ui-theme-dark');\n                break;\n            default:\n                setClassTheme('particle-connect-ui-theme-ligth');\n                break;\n        }\n    }, [theme]);\n    const {\n        closeModal: closeConnectModal,\n        isModalOpen: connectModalOpen,\n        openModal: openConnectModal,\n    } = useModalStateValue();\n\n    const {\n        closeModal: closeAccountModal,\n        isModalOpen: accountModalOpen,\n        openModal: openAccountModal,\n    } = useModalStateValue();\n\n    const {\n        closeModal: closeChainModal,\n        isModalOpen: chainModalOpen,\n        openModal: openChainModal,\n    } = useModalStateValue();\n\n    const updateParticleProvider = useCallback((provider): void => setParticleProvider(provider), []);\n    const updateAccount = useCallback((account): void => setAccount(account), []);\n    const updateConnectId = useCallback((id): void => setConnectId(id), []);\n    const updateChain = useCallback((chain?: Chain): void => setChain(chain), []);\n    const updateTheme = useCallback((theme): void => setTheme(theme), []);\n    const updateLanguage = useCallback((val): void => setLanguage(val.replace('_', '-')), []);\n\n    useEffect(() => {\n        // Listen for events after logging in\n        if (!!connectKit?.connect && particleProvider) {\n            const onDisconnect = () => {\n                updateParticleProvider(undefined);\n                updateAccount('');\n                updateConnectId('');\n                closeAccountModal();\n                closeChainModal();\n                closeConnectModal();\n            };\n            const onAccountsChanged = (accounts) => {\n                if (accounts && accounts.length > 0) {\n                    updateAccount?.(accounts[0]);\n                }\n            };\n            const onChainChanged = async (chain) => {\n                setChain(chain);\n                setUnsupportedChain(!chain || !userChains.find((x) => x.id === chain.id));\n                const account = await getPublicAddress(particleProvider);\n                updateAccount(account);\n                console.log('chainChanged  update accounts:' + account);\n                console.log('onChainChanged\uFF1A', chain);\n                closeChainModal();\n            };\n            const onProviderChanged = async (provider) => {\n                setParticleProvider(provider);\n                const account = await getPublicAddress(provider);\n                console.log('providerChanged  update accounts:' + account);\n                updateAccount(account);\n            };\n            connectKit.on('disconnect', onDisconnect);\n            connectKit.on('accountsChanged', onAccountsChanged);\n            connectKit.on('chainChanged', onChainChanged);\n            connectKit.on('providerChanged', onProviderChanged);\n            return () => {\n                connectKit.removeListener('disconnect', onDisconnect);\n                connectKit.removeListener('accountsChanged', onAccountsChanged);\n                connectKit.removeListener('chainChanged', onChainChanged);\n                connectKit.removeListener('providerChanged', onProviderChanged);\n            };\n        }\n\n        return () => {};\n    }, [connectKit, particleProvider]);\n\n    return (\n        <I18nProvider>\n            <AuthCoreContextProvider options={{ ...options, themeType: theme, language: language as Language }}>\n                <ParticleKitChainProvider\n                    provider={particleProvider}\n                    chains={options.chains}\n                    chain={chain}\n                    setChain={setChain}\n                    userChains={userChains}\n                    connectKit={connectKit}\n                    connectId={connectId}\n                >\n                    <ModalContext.Provider\n                        value={useMemo(\n                            () => ({\n                                userChains,\n                                unsupportedChain,\n                                setUnsupportedChain,\n                                walletSort,\n                                accountLoading,\n                                connectKit,\n                                account,\n                                connectId,\n                                particleProvider,\n                                accountModalOpen,\n                                chainModalOpen,\n                                connectModalOpen,\n                                setAccountLoading,\n                                updateParticleProvider,\n                                updateConnectId,\n                                updateAccount,\n                                openAccountModal,\n                                openConnectModal,\n                                openChainModal,\n                                chain,\n                                updateChain,\n                                setTheme: updateTheme,\n                                closeAccountModal,\n                                theme,\n                                language,\n                                changLanguage: updateLanguage,\n                                cacheProvider,\n                                options,\n                            }),\n                            [\n                                cacheProvider,\n                                unsupportedChain,\n                                setUnsupportedChain,\n                                closeAccountModal,\n                                walletSort,\n                                accountLoading,\n                                account,\n                                connectKit,\n                                particleProvider,\n                                accountModalOpen,\n                                connectModalOpen,\n                                connectId,\n                                chainModalOpen,\n                                setAccountLoading,\n                                updateParticleProvider,\n                                openAccountModal,\n                                openConnectModal,\n                                updateAccount,\n                                updateConnectId,\n                                openChainModal,\n                                openChainModal,\n                                chain,\n                                updateChain,\n                                userChains,\n                                updateTheme,\n                                theme,\n                                language,\n                                updateLanguage,\n                                options,\n                            ]\n                        )}\n                    >\n                        <div className={'particle-connect-ui ' + classTheme}>\n                            {children}\n                            <div className=\"connect-body\">\n                                <ConnectModal\n                                    onClose={closeConnectModal}\n                                    open={connectModalOpen}\n                                    closeAllModal={() => {\n                                        closeAccountModal();\n                                        closeChainModal();\n                                        closeConnectModal();\n                                    }}\n                                />\n                                {/* <AccountModal onClose={closeAccountModal} open={accountModalOpen} /> */}\n                                <ChainModal\n                                    chains={options.chains}\n                                    onClose={closeChainModal}\n                                    open={chainModalOpen}\n                                ></ChainModal>\n                            </div>\n                        </div>\n                    </ModalContext.Provider>\n                </ParticleKitChainProvider>\n            </AuthCoreContextProvider>\n        </I18nProvider>\n    );\n}\n\n// \u83B7\u53D6theme\nexport function useParticleTheme() {\n    const { theme, setTheme } = useContext(ModalContext);\n    return {\n        theme,\n        setTheme,\n    };\n}\n\n// \u83B7\u53D6language\nexport function useLanguage() {\n    const { language, changLanguage } = useContext(ModalContext);\n    return {\n        language,\n        changLanguage,\n    };\n}\n// \u83B7\u53D6connectKi\nexport function useConnectKit(): ParticleConnect {\n    const { connectKit } = useContext(ModalContext);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return connectKit!;\n}\n\nexport const useChain = () => {\n    const { updateChain } = useContext(ModalContext);\n    return { updateChain };\n};\n\nexport const useUnsupportedChain = () => {\n    const { setUnsupportedChain, unsupportedChain } = useContext(ModalContext);\n    return { setUnsupportedChain, unsupportedChain };\n};\n\n// \u83B7\u53D6\u64CD\u4F5C\u884C\u4E3A\nexport function useConnectAction() {\n    const { updateParticleProvider, updateAccount, updateConnectId } = useContext(ModalContext);\n    return {\n        updateParticleProvider,\n        updateAccount,\n        updateConnectId,\n    };\n}\n\n// \u83B7\u53D6cacheProvider \u5224\u65AD\u662F\u5426\u81EA\u52A8\u8C03\u7528connectToCachedProvider\u65B9\u6CD5\nexport function useIsCacheProvider() {\n    const { cacheProvider } = useContext(ModalContext);\n    return cacheProvider;\n}\n\n// \u83B7\u53D6\u6240\u6709\u5F39\u7A97\u72B6\u6001\nexport function useModalState() {\n    const { accountModalOpen, connectModalOpen, chainModalOpen } = useContext(ModalContext);\n    return {\n        accountModalOpen,\n        chainModalOpen,\n        connectModalOpen,\n    };\n}\n\n// \u83B7\u53D6userChains\nexport function useUserChains() {\n    const { userChains } = useContext(ModalContext);\n    return { userChains };\n}\n\n// \u83B7\u53D6account\u5F39\u7A97\nexport function useAccountModal() {\n    const { openAccountModal, closeAccountModal } = useContext(ModalContext);\n    return { openAccountModal, closeAccountModal };\n}\n\n// \u83B7\u53D6connect\u5F39\u7A97\nexport function useConnectModal() {\n    const { openConnectModal } = useContext(ModalContext);\n    return { openConnectModal };\n}\n\n// \u83B7\u53D6connect\u5F39\u7A97\nexport function useChainModal() {\n    const { openChainModal } = useContext(ModalContext);\n    return { openChainModal };\n}\n\nexport function useAccountInfo() {\n    const { account, particleProvider, connectId, accountLoading, setAccountLoading } = useContext(ModalContext);\n    return {\n        account,\n        connectId,\n        particleProvider,\n        accountLoading,\n        setAccountLoading,\n    };\n}\n\nexport function useWalletSort() {\n    const { walletSort } = useContext(ModalContext);\n    return { walletSort };\n}\n\nexport const useParticleAuthTypes = (): AuthType[] => {\n    const { options } = useContext(ModalContext);\n\n    const particleAuthSort = useMemo(() => {\n        if (options.authTypes && options.authTypes.length > 0) {\n            return options.authTypes.filter((item) => item !== AuthType.jwt);\n        }\n        return Object.values(AuthType).filter((item) => item !== AuthType.jwt);\n    }, [options.authTypes]);\n\n    return particleAuthSort;\n};\n", "import type { Chain, ChainInfo } from '@particle-network/connectors';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport {\n    useInitialChainId,\n    useNetwork,\n    useParticleConnect,\n    useSwitchChains,\n    useUnsupportedChain\n} from '../../hooks';\nimport { useTranslation } from '../../provider/I18nContext';\nimport '../../styles/index.css';\nimport './index.css';\n\nexport interface ChainModalProps {\n    open: boolean;\n    chains?: Chain[];\n    onClose?: () => void;\n}\nexport function ChainModal({ open, onClose, chains }: ChainModalProps) {\n    const { t } = useTranslation();\n    const [switchLoading, setSwitchLoading] = useState(0);\n    const CurrentChainId = useInitialChainId();\n    const network = useNetwork();\n    const { unsupportedChain } = useUnsupportedChain();\n    const { disconnect } = useParticleConnect();\n\n    const { renderChains, isSwitchChain, switchChain } = useSwitchChains();\n\n    const modalCloseHandle = () => {\n        onClose && onClose();\n    };\n\n    const logout = useCallback(async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        try {\n            await disconnect();\n        } catch (error) {\n            //ignore\n        }\n        onClose && onClose();\n    }, []);\n\n    const [overflow, setOverflow] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (open) {\n            const htmlOverFlow = document.getElementsByTagName('html')[0].style.overflow;\n            const bodyOverFlow = document.getElementsByTagName('body')[0].style.overflow;\n            setOverflow([htmlOverFlow, bodyOverFlow]);\n            document.getElementsByTagName('html')[0].style.overflow = 'hidden';\n            document.getElementsByTagName('body')[0].style.overflow = 'hidden';\n        } else {\n            document.getElementsByTagName('html')[0].style.overflow = overflow[0];\n            document.getElementsByTagName('body')[0].style.overflow = overflow[1];\n            setOverflow([]);\n        }\n    }, [open]);\n\n    const stopPropagation = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        return false;\n    };\n\n    const switchLocalChain = useCallback(\n        async (e, chain: Chain) => {\n            e.preventDefault();\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n\n            try {\n                setSwitchLoading(chain.id);\n                await switchChain(chain);\n            } catch (error) {\n                console.error('switchChain', error);\n                // setErrorMsg(error && error.toString());\n            } finally {\n                setSwitchLoading(0);\n                modalCloseHandle();\n            }\n        },\n        [network]\n    );\n\n    const getChainDisplayName = (chainInfo: ChainInfo) => {\n        if (!chainInfo) {\n            return '';\n        }\n        if (chainInfo.network === 'Mainnet') {\n            return chainInfo.fullname.replace(' Mainnet', '');\n        } else {\n            return chainInfo.fullname;\n        }\n    };\n\n    return (\n        <>\n            {open ? (\n                <>\n                    {/* masker */}\n                    <div\n                        className={'particle-chain-modal-container center-center show'}\n                        onClick={modalCloseHandle}\n                        onTouchStart={stopPropagation}\n                        onScroll={stopPropagation}\n                    >\n                        <div\n                            className={'particle-chain-modal-box show'}\n                            onTouchStart={stopPropagation}\n                            onScroll={stopPropagation}\n                        >\n                            <div className=\"particle-chain-modal-close hover\" onClick={modalCloseHandle}></div>\n                            <div className=\"particle-modal-title\">{t('ChainModal.title')}</div>\n                            {unsupportedChain && <div className=\"unsupported-tips\">{t('ChainModal.wrong')}</div>}\n\n                            {isSwitchChain || unsupportedChain ? (\n                                <div className=\"particle-chain-list-box\">\n                                    {renderChains.map((chain) => (\n                                        <div\n                                            key={`${chain.name}-${chain.id}`}\n                                            className={`particle-chain-list-item center-start ${\n                                                CurrentChainId === chain.id ? 'active' : ''\n                                            } ${\n                                                network.isSolana && network.connectId !== 'particle' ? '' : 'item-hover'\n                                            }`}\n                                            onClick={(e) => switchLocalChain(e, chain)}\n                                        >\n                                            <img src={chain?.icon} alt=\"\" />\n                                            <div className={'flex1'}>{getChainDisplayName(chain)}</div>\n\n                                            {CurrentChainId === chain.id ? (\n                                                <div className=\"particle-chain-active-connected center-end\">\n                                                    {t('ChainModal.connected')} <span></span>\n                                                </div>\n                                            ) : switchLoading === chain.id ? (\n                                                <div className=\"particle-chain-active-confirm center-end\">\n                                                    {t('ChainModal.confirm')} <span></span>\n                                                </div>\n                                            ) : undefined}\n                                        </div>\n                                    ))}\n                                    {unsupportedChain && (\n                                        <div onClick={logout} className=\"particle-disconnect-btn center-center\">\n                                            {t('ChainModal.disconnect')}\n                                        </div>\n                                    )}\n                                </div>\n                            ) : !isSwitchChain ? (\n                                <div className=\"particle-chain-list-box particle-not-tips\">\n                                    {t('ChainModal.switchTip')}\n                                </div>\n                            ) : (\n                                <div>{t('ChainModal.loading')}</div>\n                            )}\n                        </div>\n                    </div>\n                </>\n            ) : undefined}\n        </>\n    );\n}\n\nexport default memo(ChainModal);\n", "import React, { createContext, useContext } from 'react';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport en_US from '../locales/lang/en_US';\nimport zh_CN from '../locales/lang/zh_CN';\nimport ko_KR from '../locales/lang/ko_KR';\nimport ja_JP from '../locales/lang/ja_JP';\nimport zh_TW from '../locales/lang/zh_TW';\n\nconst resources = {\n    en: {\n        translation: en_US,\n    },\n    'zh-CN': {\n        translation: zh_CN,\n    },\n    ko: {\n        translation: ko_KR,\n    },\n    ja: {\n        translation: ja_JP,\n    },\n    'zh-TW': {\n        translation: zh_TW,\n    },\n    'zh-HK': {\n        translation: zh_TW,\n    },\n};\n\nconst i18nextInstance = i18n.createInstance();\n\ni18nextInstance.init({\n    fallbackLng: 'en',\n    resources,\n    lng: 'en',\n    interpolation: {\n        escapeValue: false,\n    },\n});\n\ni18nextInstance.use(initReactI18next);\n\nconst I18nContext = createContext(i18nextInstance);\n\nconst useTranslation = () => {\n    const context = useContext(I18nContext);\n    return {\n        ...context,\n        i18n: i18nextInstance,\n    };\n};\n\ninterface IProps {\n    children: React.ReactNode;\n}\n\nconst I18nProvider = (props: IProps) => {\n    return <I18nContext.Provider value={i18nextInstance}>{props.children}</I18nContext.Provider>;\n};\n\nexport { I18nProvider, useTranslation };\n", "export default {\n    language: 'English',\n    ConnectButton: {\n        connectWallet: 'Connect Wallet',\n        wrongNetwork: 'Wrong network',\n    },\n    ConnectModal: {\n        email: 'Email',\n        phone: 'Phone',\n        google: 'Google',\n        apple: 'Apple',\n        facebook: 'Facebook',\n        microsoft: 'Microsoft',\n        linkedin: 'Linkedin',\n        github: 'Github',\n        discord: 'Discord',\n        twitter: 'Twitter',\n        twitch: 'Twitch',\n        title1: 'What is a Wallet',\n        title2: 'Connect a Wallet',\n        tip1: 'A Home for your Tokens and NFTs',\n        tip2: 'You can manage your digital assets, for example send, receive and display.',\n        tip3: 'A New Way to Log In',\n        tip4: ' You can log in through your social account, and a crypto wallet will be automatically generated, simple but secure.',\n        less: 'Less',\n        more: 'More',\n    },\n    ConnectForm: {\n        loading1: 'Confirm connection in the Window',\n        loading2: 'Scan QR code with',\n        copied_to_clipboard: 'Copy to clipboard',\n        copy_success: 'Copy success',\n    },\n    ChainModal: {\n        title: 'Switch Networks',\n        wrong: 'Wrong network detected, switch or disconnect to continue.',\n        connected: 'Connected',\n        confirm: 'Confirm in Wallet',\n        disconnect: 'Disconnect',\n        loading: 'loading',\n        switchTip:\n            ' Your wallet does not support switching networks from this app. Try switching networks from within your wallet instead.',\n    },\n    AccountModal: {\n        copied: 'copied',\n        logout: 'Logout',\n        wallet: 'Wallet',\n        buy: 'Buy crypto',\n        copy_address: 'Copy address',\n    },\n};\n", "export default {\n    language: '\u7B80\u4F53\u4E2D\u6587',\n    ConnectButton: {\n        connectWallet: '\u8FDE\u63A5\u94B1\u5305',\n        wrongNetwork: '\u7F51\u7EDC\u9519\u8BEF',\n    },\n    ConnectModal: {\n        email: '\u90AE\u7BB1',\n        phone: '\u7535\u8BDD',\n        google: 'Google',\n        apple: 'Apple',\n        facebook: 'Facebook',\n        microsoft: 'Microsoft',\n        linkedin: 'Linkedin',\n        github: 'Github',\n        discord: 'Discord',\n        twitter: 'Twitter',\n        twitch: 'Twitch',\n        title1: '\u4EC0\u4E48\u662F\u94B1\u5305',\n        title2: '\u8FDE\u63A5\u94B1\u5305',\n        tip1: '\u4FDD\u62A4\u4F60\u5168\u90E8Token\u548CNFT\u7684\u5B89\u5168',\n        tip2: '\u60A8\u53EF\u4EE5\u7BA1\u7406\u6570\u5B57\u8D44\u4EA7\uFF0C\u4F8B\u5982\u53D1\u9001\u3001\u63A5\u6536\u548C\u663E\u793A\u3002',\n        tip3: '\u4E00\u79CD\u65B0\u7684\u767B\u5F55\u65B9\u5F0F',\n        tip4: '\u60A8\u53EF\u4EE5\u901A\u8FC7\u793E\u4EA4\u8D26\u6237\u767B\u5F55\uFF0C\u52A0\u5BC6\u94B1\u5305\u5C06\u81EA\u52A8\u751F\u6210\uFF0C\u7B80\u5355\u4F46\u5F88\u5B89\u5168\u3002',\n        less: '\u6536\u8D77',\n        more: '\u66F4\u591A',\n    },\n    ConnectForm: {\n        loading1: '\u786E\u8BA4\u8FDE\u63A5',\n        loading2: '\u626B\u63CF\u4E8C\u7EF4\u7801',\n        copied_to_clipboard: '\u590D\u5236\u5230\u7C98\u8D34\u677F',\n        copy_success: '\u590D\u5236\u6210\u529F',\n    },\n    ChainModal: {\n        title: '\u5207\u6362\u7F51\u7EDC',\n        wrong: '\u68C0\u6D4B\u5230\u7F51\u7EDC\u9519\u8BEF\uFF0C\u8BF7\u5207\u6362\u6216\u65AD\u5F00\u540E\u7EE7\u7EED\u64CD\u4F5C\u3002',\n        connected: '\u5DF2\u8FDE\u63A5',\n        confirm: '\u5728\u94B1\u5305\u4E2D\u786E\u8BA4',\n        disconnect: '\u65AD\u5F00\u8FDE\u63A5',\n        loading: '\u52A0\u8F7D\u4E2D',\n        switchTip: '\u60A8\u7684\u94B1\u5305\u4E0D\u652F\u6301\u4ECE\u6B64\u5E94\u7528\u5207\u6362\u7F51\u7EDC\u3002\u8BF7\u5728\u94B1\u5305\u4E2D\u5C1D\u8BD5\u5207\u6362\u7F51\u7EDC\u3002',\n    },\n    AccountModal: {\n        copied: '\u5DF2\u590D\u5236',\n        logout: '\u9000\u51FA\u767B\u5F55',\n        wallet: '\u94B1\u5305',\n        buy: '\u8D2D\u4E70\u6570\u5B57\u8D27\u5E01',\n        copy_address: '\u590D\u5236\u5730\u5740',\n    },\n};\n", "export default {\n    language: '\u97E9\u6587',\n    ConnectButton: {\n        connectWallet: '\uC9C0\uAC11 \uC5F0\uACB0',\n        wrongNetwork: '\uB124\uD2B8\uC6CC\uD06C \uC624\uB958',\n    },\n    ConnectModal: {\n        email: '\uBA54\uC77C\uBC15\uC2A4',\n        phone: '\uC804\uD654\uAE30',\n        google: 'Google',\n        apple: 'Apple',\n        facebook: 'Facebook',\n        microsoft: 'Microsoft',\n        linkedin: 'Linkedin',\n        github: 'Github',\n        discord: 'Discord',\n        twitter: 'Twitter',\n        twitch: 'Twitch',\n        title1: '\uC9C0\uAC11\uC774 \uBB50\uC608\uC694',\n        title2: '\uC9C0\uAC11 \uC5F0\uACB0',\n        tip1: '\uBAA8\uB4E0 Token\uACFC NFT\uB97C \uC548\uC804\uD558\uAC8C \uC9C0\uCF1C\uB4DC\uB9BD\uB2C8\uB2E4.',\n        tip2: '\uC804\uC1A1, \uC218\uC2E0 \uBC0F \uD45C\uC2DC\uC640 \uAC19\uC740 \uB514\uC9C0\uD138 \uC790\uC0B0\uC744 \uAD00\uB9AC\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.',\n        tip3: '\uC0C8\uB85C\uC6B4 \uB85C\uADF8\uC778 \uBC29\uBC95',\n        tip4: '\uC18C\uC15C \uACC4\uC815\uC744 \uD1B5\uD574 \uB85C\uADF8\uC778\uD560 \uC218 \uC788\uC73C\uBA70 \uC554\uD638\uD654 \uC9C0\uAC11\uC774 \uC790\uB3D9\uC73C\uB85C \uC0DD\uC131\uB418\uBA70 \uAC04\uB2E8\uD558\uC9C0\uB9CC \uC548\uC804\uD569\uB2C8\uB2E4.',\n        less: '\uC9D1\uC5B4\uCE58\uC6B0\uB2E4',\n        more: '\uCD94\uAC00',\n    },\n    ConnectForm: {\n        loading1: '\uC811\uC18D \uD655\uC778',\n        loading2: 'QR\uCF54\uB4DC \uC2A4\uCE94',\n        copied_to_clipboard: '\uD074\uB9BD\uBCF4\uB4DC\uB85C \uBCF5\uC0AC',\n        copy_success: '\uBCF5\uC81C \uC131\uACF5',\n    },\n    ChainModal: {\n        title: '\uB124\uD2B8\uC6CC\uD06C \uC804\uD658',\n        wrong: '\uB124\uD2B8\uC6CC\uD06C \uC624\uB958\uAC00 \uBC1C\uACAC\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC804\uD658\uD558\uAC70\uB098 \uBD84\uB9AC\uD55C \uD6C4 \uACC4\uC18D\uD558\uC2ED\uC2DC\uC624.',\n        connected: '\uC811\uC18D\uB428',\n        confirm: '\uC9C0\uAC11\uC5D0\uC11C \uD655\uC778',\n        disconnect: '\uC5F0\uACB0 \uD574\uC81C',\n        loading: '\uB85C\uB4DC \uC911',\n        switchTip: '\uC9C0\uAC11\uC740 \uC774 \uC571\uC5D0\uC11C \uB124\uD2B8\uC6CC\uD06C \uC804\uD658\uC744 \uC9C0\uC6D0\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.\uC9C0\uAC11\uC5D0\uC11C \uB124\uD2B8\uC6CC\uD06C \uC804\uD658\uC744 \uC2DC\uB3C4\uD558\uC2ED\uC2DC\uC624.',\n    },\n    AccountModal: {\n        copied: '\uBCF5\uC0AC\uB428',\n        logout: '\uB85C\uADF8\uC778 \uC885\uB8CC',\n        wallet: '\uC9C0\uAC11',\n        buy: '\uB514\uC9C0\uD138 \uD654\uD3D0 \uAD6C\uB9E4',\n        copy_address: '\uC8FC\uC18C \uBCF5\uC0AC',\n    },\n};\n", "export default {\n    language: '\u65E5\u672C',\n    ConnectButton: {\n        connectWallet: '\u30A6\u30A9\u30EC\u30C3\u30C8\u306E\u63A5\u7D9A',\n        wrongNetwork: '\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u30A8\u30E9\u30FC',\n    },\n    ConnectModal: {\n        email: '\u30E1\u30FC\u30EB\u30DC\u30C3\u30AF\u30B9',\n        phone: '\u96FB\u8A71\u756A\u53F7',\n        google: 'Google',\n        apple: 'Apple',\n        facebook: 'Facebook',\n        microsoft: 'Microsoft',\n        linkedin: 'Linkedin',\n        github: 'Github',\n        discord: 'Discord',\n        twitter: 'Twitter',\n        twitch: 'Twitch',\n        title1: '\u8CA1\u5E03\u3068\u306F',\n        title2: '\u30A6\u30A9\u30EC\u30C3\u30C8\u306E\u63A5\u7D9A',\n        tip1: '\u30C8\u30FC\u30AF\u30F3\u3068NFT\u306E\u30BB\u30AD\u30E5\u30EA\u30C6\u30A3\u3092\u3059\u3079\u3066\u4FDD\u8B77',\n        tip2: '\u9001\u4FE1\u3001\u53D7\u4FE1\u3001\u8868\u793A\u306A\u3069\u306E\u30C7\u30B8\u30BF\u30EB\u8CC7\u7523\u3092\u7BA1\u7406\u3067\u304D\u307E\u3059\u3002',\n        tip3: '\u65B0\u3057\u3044\u30ED\u30B0\u30A4\u30F3\u65B9\u6CD5',\n        tip4: '\u30BD\u30FC\u30B7\u30E3\u30EB\u30A2\u30AB\u30A6\u30F3\u30C8\u304B\u3089\u30ED\u30B0\u30A4\u30F3\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u3001\u6697\u53F7\u5316\u3055\u308C\u305F\u30A6\u30A9\u30EC\u30C3\u30C8\u306F\u81EA\u52D5\u7684\u306B\u751F\u6210\u3055\u308C\u307E\u3059\u304C\u3001\u7C21\u5358\u3067\u3059\u304C\u5B89\u5168\u3067\u3059\u3002',\n        less: '\u3084\u3081\u308B',\n        more: '\u8A73\u7D30',\n    },\n    ConnectForm: {\n        loading1: '\u63A5\u7D9A\u306E\u78BA\u8A8D',\n        loading2: '\u30B9\u30AD\u30E3\u30F32\u6B21\u5143\u30B3\u30FC\u30C9',\n        copied_to_clipboard: '\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC',\n        copy_success: '\u30B3\u30D4\u30FC\u6210\u529F',\n    },\n    ChainModal: {\n        title: '\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u306E\u5207\u308A\u66FF\u3048',\n        wrong: '\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u30A8\u30E9\u30FC\u304C\u691C\u51FA\u3055\u308C\u307E\u3057\u305F\u3002\u5207\u308A\u66FF\u3048\u307E\u305F\u306F\u5207\u65AD\u5F8C\u306B\u7D9A\u884C\u3057\u3066\u304F\u3060\u3055\u3044\u3002',\n        connected: '\u63A5\u7D9A\u6E08\u307F',\n        confirm: '\u8CA1\u5E03\u306E\u4E2D\u3067\u78BA\u8A8D\u3059\u308B',\n        disconnect: '\u63A5\u7D9A\u89E3\u9664',\n        loading: '\u30ED\u30FC\u30C9\u4E2D',\n        switchTip:\n            '\u30A6\u30A9\u30EC\u30C3\u30C8\u3067\u306F\u3001\u3053\u306E\u30A2\u30D7\u30EA\u30B1\u30FC\u30B7\u30E7\u30F3\u304B\u3089\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u3092\u5207\u308A\u66FF\u3048\u308B\u3053\u3068\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002\u8CA1\u5E03\u306E\u4E2D\u3067\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u3092\u5207\u308A\u66FF\u3048\u3066\u307F\u3066\u304F\u3060\u3055\u3044\u3002',\n    },\n    AccountModal: {\n        copied: '\u30B3\u30D4\u30FC\u6E08\u307F',\n        logout: '\u30ED\u30B0\u30AA\u30F3\u306E\u7D42\u4E86',\n        wallet: '\u8CA1\u5E03',\n        buy: '\u30C7\u30B8\u30BF\u30EB\u901A\u8CA8\u306E\u8CFC\u5165',\n        copy_address: '\u30A2\u30C9\u30EC\u30B9\u306E\u30B3\u30D4\u30FC',\n    },\n};\n", "export default {\n    language: '\u7E41\u4F53\u4E2D\u6587',\n    ConnectButton: {\n        connectWallet: '\u9023\u63A5\u9322\u5305',\n        wrongNetwork: '\u7DB2\u7D61\u932F\u8AA4',\n    },\n    ConnectModal: {\n        email: '\u90F5\u7BB1',\n        phone: '\u96FB\u8A71',\n        google: 'Google',\n        apple: 'Apple',\n        facebook: 'Facebook',\n        microsoft: 'Microsoft',\n        linkedin: 'Linkedin',\n        github: 'Github',\n        discord: 'Discord',\n        twitter: 'Twitter',\n        twitch: 'Twitch',\n        title1: '\u4EC0\u9EBC\u662F\u9322\u5305',\n        title2: '\u9023\u63A5\u9322\u5305',\n        tip1: '\u4FDD\u8B77\u4F60\u5168\u90E8Token\u548CNFT\u7684\u5B89\u5168',\n        tip2: '\u60A8\u53EF\u4EE5\u7BA1\u7406\u6578\u4F4D\u8CC7\u7522\uFF0C\u4F8B\u5982\u767C\u9001\u3001\u63A5\u6536\u548C\u986F\u793A\u3002',\n        tip3: '\u4E00\u7A2E\u65B0\u7684\u767B\u5165\u7BA1\u9053',\n        tip4: '\u60A8\u53EF\u4EE5\u901A\u904E\u793E\u4EA4\u5E33\u6236\u767B\u5165\uFF0C\u52A0\u5BC6\u9322\u5305\u5C07\u81EA\u52D5\u751F\u6210\uFF0C\u7C21\u55AE\u4F46\u5F88\u5B89\u5168\u3002',\n        less: '\u6536\u8D77',\n        more: '\u66F4\u591A',\n    },\n    ConnectForm: {\n        loading1: '\u78BA\u8A8D\u9023\u63A5',\n        loading2: '\u6383\u63CF\u4E8C\u7DAD\u78BC',\n        copied_to_clipboard: '\u8907\u88FD\u5230\u526A\u8CBC\u677F',\n        copy_success: '\u8907\u88FD\u6210\u529F',\n    },\n    ChainModal: {\n        title: '\u5207\u63DB\u7DB2\u7D61',\n        wrong: '\u6AA2\u6E2C\u5230\u7DB2\u7D61\u932F\u8AA4\uFF0C\u8ACB\u5207\u63DB\u6216\u65B7\u958B\u5F8C\u7E7C\u7E8C\u64CD\u4F5C\u3002',\n        connected: '\u5DF2\u9023\u63A5',\n        confirm: '\u5728\u9322\u5305\u4E2D\u78BA\u8A8D',\n        disconnect: '\u65B7\u958B\u9023\u63A5',\n        loading: '\u52A0\u8F09\u4E2D',\n        switchTip: '\u60A8\u7684\u9322\u5305\u4E0D\u652F\u6301\u5F9E\u6B64\u61C9\u7528\u5207\u63DB\u7DB2\u7D61\u3002 \u8ACB\u5728\u9322\u5305\u4E2D\u5617\u8A66\u5207\u63DB\u7DB2\u7D61\u3002',\n    },\n    AccountModal: {\n        copied: '\u5DF2\u8907\u88FD',\n        logout: '\u767B\u51FA',\n        wallet: '\u9322\u5305',\n        buy: '\u8CFC\u8CB7\u6578\u4F4D\u8CA8\u5E63',\n        copy_address: '\u8907\u88FD\u5730\u5740',\n    },\n};\n", "import { useConnect, useEthereum, useSolana } from '@particle-network/auth-core-modal';\nimport { chains } from '@particle-network/chains';\nimport { isIOS, isMobile } from '@particle-network/connectors';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport what_img1 from '../../assets/images/what-img1.png';\nimport what_img2 from '../../assets/images/what-img2.png';\nimport {\n    apple_icon,\n    discord_icon,\n    email_icon,\n    facebook_icon,\n    github_icon,\n    google_icon,\n    linkedin_icon,\n    microsoft_icon,\n    phone_icon,\n    twitch_icon,\n    twitter_icon,\n} from '../../assets/social-icons';\nimport { useNetwork } from '../../hooks';\nimport { useParticleConnect } from '../../hooks/useParticleConnect';\nimport { useWalletMetas } from '../../hooks/useWalletMeta';\nimport { useTranslation } from '../../provider/I18nContext';\nimport {\n    useAccountInfo,\n    useChain,\n    useConnectAction,\n    useParticleAuthTypes,\n    useUnsupportedChain,\n    useUserChains,\n    useWalletSort,\n} from '../../provider/ModalContext';\nimport '../../styles/index.css';\nimport ConnectForm from '../ConnectForm';\nimport './index.css';\nimport type { AuthType, GroupItem } from './type';\n\nexport interface ConnectModalProps {\n    open: boolean;\n    onClose: () => void;\n    closeAllModal: () => void;\n}\n\nexport const AuthGroup: GroupItem[] = [\n    {\n        name: 'Email',\n        key: 'email',\n        icon: email_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Phone',\n        key: 'phone',\n        icon: phone_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Google',\n        key: 'google',\n        icon: google_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Apple',\n        key: 'apple',\n        icon: apple_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Facebook',\n        key: 'facebook',\n        icon: facebook_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Microsoft',\n        key: 'microsoft',\n        icon: microsoft_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Linkedin',\n        key: 'linkedin',\n        icon: linkedin_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Github',\n        key: 'github',\n        icon: github_icon,\n        methods: 'browser',\n        data: {},\n    },\n    {\n        name: 'Discord',\n        key: 'discord',\n        icon: discord_icon,\n        methods: 'browser',\n    },\n    {\n        name: 'Twitch',\n        key: 'twitch',\n        icon: twitch_icon,\n        methods: 'browser',\n    },\n    {\n        name: 'Twitter',\n        key: 'twitter',\n        icon: twitter_icon,\n        methods: 'browser',\n    },\n];\n\nexport function ConnectModal({ open, onClose, closeAllModal }: ConnectModalProps) {\n    const { connect, connectKit, _connectSuccess } = useParticleConnect();\n    const isPhone = isMobile();\n    const { walletSort } = useWalletSort();\n    const particleAuthSort = useParticleAuthTypes();\n    const wallets = useWalletMetas();\n    const [isMoce, setIsMore] = useState(false);\n    // eslint-disable-next-line\n    const [authKey, setAuthKey] = useState(''); // Key of the selected item\n    const [authItem, setAuthItem] = useState<GroupItem | undefined>(undefined);\n    const [walletMetas, setWalletMetas] = useState<GroupItem[]>([]);\n\n    const [loginStep, setLoginStep] = useState<string>('1');\n    const [mobileUri, setMobileUri] = useState('');\n    const [overflow, setOverflow] = useState<string[]>([]);\n    const { t } = useTranslation();\n    const { connectId } = useAccountInfo();\n\n    const initWallets = () => {\n        //  \u6BCF\u6B21\u6253\u5F00model \u83B7\u53D6\u6700\u65B0\u7684wallet\n        if (open) {\n            wallets.then((res) => {\n                const walletsArr = res\n                    .filter((item) => {\n                        // \u8FC7\u6EE4\u79FB\u52A8\u7AEFphantom\u5165\u53E3\n                        if (isMobile() && item.name === 'Phantom') {\n                            if (typeof window === 'undefined' || !(window as any).phantom?.solana?.isPhantom) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    })\n                    .map((item) => {\n                        return {\n                            name: item.name,\n                            key: item.id,\n                            icon: item.iconUrl,\n                            methods: 'qrcode',\n                            data: item,\n                        };\n                    });\n\n                setWalletMetas(walletsArr);\n                setIsMore(walletsArr.length === 0);\n            });\n        }\n        // eslint-disable-next-line\n    };\n\n    const { isEvm } = useNetwork();\n    const { provider } = useEthereum();\n    const { wallet } = useSolana();\n    const { connected } = useConnect();\n\n    const { updateParticleProvider, updateAccount, updateConnectId } = useConnectAction();\n    const { setUnsupportedChain } = useUnsupportedChain();\n    const { updateChain } = useChain();\n    const { userChains } = useUserChains();\n\n    useEffect(() => {\n        // Listen for events after logging in\n        if (connectId === 'particle' && connected) {\n            const events = isEvm ? provider : wallet;\n            const onDisconnect = () => {\n                updateParticleProvider?.(undefined);\n                updateAccount?.('');\n                updateConnectId?.('');\n                closeAllModal();\n            };\n\n            const onAccountsChanged = (accounts) => {\n                if (accounts && accounts.length > 0) {\n                    updateAccount?.(accounts[0]);\n                }\n            };\n\n            const onChainChanged = async (id: number | string) => {\n                const chainId = Number(id);\n                const chain = chains.getEVMChainInfoById(chainId) || chains.getSolanaChainInfoById(chainId);\n                updateChain?.(chain);\n                setUnsupportedChain?.(!chain || !userChains.find((x) => x.id === chain.id));\n                const account = isEvm ? provider.selectedAddress : wallet.selectedAddress;\n                updateAccount?.(account as any);\n                console.log('chainChanged  update accounts:' + account);\n                console.log('onChainChanged\uFF1A', chain);\n                closeAllModal();\n            };\n\n            updateParticleProvider?.(isEvm ? provider : wallet);\n            const account = isEvm ? provider.selectedAddress : wallet.selectedAddress;\n            console.log('update accounts:' + account);\n            updateAccount?.(account as any);\n            updateChain?.(\n                isEvm\n                    ? chains.getEVMChainInfoById(Number(provider.chainId))\n                    : chains.getSolanaChainInfoById(wallet.chainId)\n            );\n\n            events.on('disconnect', onDisconnect);\n            events.on('accountsChanged', onAccountsChanged);\n            events.on('chainChanged', onChainChanged);\n            return () => {\n                events.removeListener('disconnect', onDisconnect);\n                events.removeListener('accountsChanged', onAccountsChanged);\n                events.removeListener('chainChanged', onChainChanged);\n            };\n        }\n        return () => {};\n    }, [provider, connectId, connected, isEvm]);\n\n    useEffect(() => {\n        setAuthKey('');\n        if (open && walletMetas.length === 0) {\n            initWallets();\n        }\n        if (open) {\n            const htmlOverFlow = document.getElementsByTagName('html')[0].style.overflow;\n            const bodyOverFlow = document.getElementsByTagName('body')[0].style.overflow;\n            setOverflow([htmlOverFlow, bodyOverFlow]);\n            document.getElementsByTagName('html')[0].style.overflow = 'hidden';\n            document.getElementsByTagName('body')[0].style.overflow = 'hidden';\n        } else {\n            document.getElementsByTagName('html')[0].style.overflow = overflow[0];\n            document.getElementsByTagName('body')[0].style.overflow = overflow[1];\n            setOverflow([]);\n        }\n    }, [open]);\n\n    //  modal close callback\n    const modalCloseHandle = (): void => {\n        setAuthKey('');\n        setLoginStep('1');\n        onClose && onClose();\n    };\n\n    const connectWallet = async (preferredAuthType: AuthType) => {\n        try {\n            await connect({\n                preferredAuthType,\n                id: 'particle',\n            });\n            modalCloseHandle();\n        } catch (error) {\n            if (preferredAuthType === 'email' || preferredAuthType === 'phone') {\n                setAuthKey('');\n                setLoginStep('1');\n            }\n            console.log('connectWallet', error);\n        }\n    };\n\n    // auth login click callback\n    const groupItemClickHandle = useCallback(\n        (key: string, source: string) => {\n            console.log('click wallet item: ', key, source);\n            if (key) {\n                setAuthKey(key);\n                if (source === 'particle') {\n                    const item = AuthGroup.find((item) => item.name === key) || {\n                        key: '',\n                        name: '',\n                        icon: undefined,\n                        methods: '',\n                    };\n                    setAuthItem({ ...item } as GroupItem);\n                    connectWallet(item.key as AuthType);\n                } else {\n                    const item = walletMetas.find((item) => item.name === key);\n                    setAuthItem({ ...item } as GroupItem);\n                    setMobileUri('');\n                    if (item?.methods === 'qrcode') {\n                        const id = item.key;\n                        try {\n                            const _connector = connectKit.getConnector(id);\n                            if (_connector) {\n                                let mobile = '';\n                                connectKit.once('connect', (provider) => {\n                                    _connectSuccess(provider, id);\n                                    modalCloseHandle();\n                                });\n                                const messageCall = async (message) => {\n                                    if (message?.type === 'connecting') {\n                                        console.log('\uD83D\uDE80 ~ messageCall connecting:', message);\n                                        if (_connector?.mobile?.getUri && isMobile()) {\n                                            mobile = await _connector.mobile.getUri();\n                                            if (typeof window !== 'undefined') {\n                                                window.localStorage.setItem(\n                                                    'WALLETCONNECT_DEEPLINK_CHOICE',\n                                                    JSON.stringify({\n                                                        href: mobile.split('?')[0],\n                                                        name: item.name,\n                                                    })\n                                                );\n                                            }\n                                        }\n                                        if (mobile && isMobile() && !(isIOS() && id === 'walletconnect')) {\n                                            console.log('mobile:', mobile);\n                                            if (mobile.startsWith('http')) {\n                                                const link = document.createElement('a');\n                                                link.href = mobile;\n                                                link.target = '_blank';\n                                                link.rel = 'noreferrer noopener';\n                                                link.click();\n                                            } else {\n                                                window.location.href = mobile;\n                                            }\n                                            return;\n                                        }\n\n                                        if (_connector && _connector?.qrCode && _connector?.qrCode?.getUri) {\n                                            const uri = await _connector?.qrCode?.getUri();\n                                            console.log('WalletConnect Uri', uri);\n                                            setMobileUri(uri);\n                                        } else {\n                                            setMobileUri('');\n                                        }\n                                    } else if (message?.type === 'display_uri') {\n                                        mobile = message.data as string;\n                                        console.log('WC display_uri ~ uri:', mobile);\n                                        if (\n                                            isMobile() &&\n                                            _connector.mobile?.getAppLinkUri &&\n                                            _connector.mobile?.getAppLinkUri()\n                                        ) {\n                                            mobile = `${_connector.mobile?.getAppLinkUri()}?uri=${encodeURIComponent(\n                                                mobile\n                                            )}`;\n                                            window.localStorage.setItem(\n                                                'WALLETCONNECT_DEEPLINK_CHOICE',\n                                                JSON.stringify({\n                                                    href: mobile.split('?')[0],\n                                                    name: item.name,\n                                                })\n                                            );\n                                        }\n                                        if (isMobile() && !(isIOS() && id === 'walletconnect_v2')) {\n                                            console.log('\uD83D\uDE80 ~ Mobile Open Url', mobile);\n                                            if (mobile.startsWith('http')) {\n                                                const link = document.createElement('a');\n                                                link.href = mobile;\n                                                link.target = '_blank';\n                                                link.rel = 'noreferrer noopener';\n                                                link.click();\n                                            } else {\n                                                window.location.href = mobile;\n                                            }\n                                        } else {\n                                            setMobileUri(mobile);\n                                        }\n                                    }\n                                };\n                                _connector.connector.off('message');\n                                _connector.connector.on('message', messageCall);\n                                try {\n                                    connectKit.connect(id).catch((error) => {\n                                        setAuthItem(undefined);\n                                        setAuthKey('');\n                                        setMobileUri('');\n                                        setLoginStep('1');\n                                        console.log('connectKit connect error', error);\n                                        if (error.message === 'ConnectorNotFoundError: Connector not found') {\n                                            const url = isPhone\n                                                ? item?.data?.downloadUrls?.qrCode\n                                                : item?.data?.downloadUrls?.browserExtension;\n                                            if (url) {\n                                                window.open(url);\n                                            }\n                                        }\n                                    });\n                                } catch (error) {\n                                    setMobileUri('');\n                                    throw new Error('connectKit.connect : error: ' + JSON.stringify(error));\n                                }\n                            } else {\n                                setMobileUri('');\n                            }\n                        } catch (error) {\n                            setMobileUri('');\n                        }\n                    }\n                }\n            } else {\n                setAuthItem(undefined);\n                setAuthKey('');\n            }\n        },\n        [authKey, walletMetas, connectKit]\n    );\n\n    const closeStep2 = () => {\n        setLoginStep('1');\n        setAuthKey('');\n    };\n\n    useEffect(() => {\n        if (authItem && authItem?.key && authItem?.methods && authItem?.methods !== 'browser') {\n            setLoginStep('2');\n        }\n    }, [authItem, mobileUri]);\n\n    const GroupChilderRender = (props) => {\n        const { childKey, groups } = props;\n        const source = childKey === 'Particle Auth' ? 'particle' : 'wallet';\n\n        const groupRender = groups.map((item, idx) =>\n            childKey === 'Particle Auth' ? (\n                isMoce || idx < 5 ? (\n                    <div\n                        key={source + idx.toString()}\n                        onClick={() => groupItemClickHandle(item.name, source)}\n                        className={`particle-connect-modal-group-item center-start ${\n                            !isPhone ? 'particle-item-hover1' : ''\n                        } ${authKey === item.name ? 'active' : ''}`}\n                    >\n                        <div className=\"particle-group-icon-box\">\n                            <img src={item.icon} alt=\"\" />\n                        </div>\n                        {t(`ConnectModal.${item.key}`)}\n                    </div>\n                ) : null\n            ) : (\n                <div\n                    key={source + idx.toString()}\n                    onClick={() => groupItemClickHandle(item.name, source)}\n                    className={`particle-connect-modal-group-item center-start ${\n                        !isPhone ? 'particle-item-hover1' : ''\n                    } ${authKey === item.name ? 'active' : ''}`}\n                >\n                    <div className=\"particle-group-icon-box\">\n                        <img src={item.icon} alt=\"\" />\n                    </div>\n                    {item.name}\n                </div>\n            )\n        );\n        return (\n            <div key={source}>\n                <div className=\"particle-connect-modal-group-name\">{childKey}</div>\n                {groupRender}\n                {childKey === 'Particle Auth' && particleAuthSort.length > 5 && walletMetas.length > 0 && (\n                    <div className=\"particle-connect-more center-center\" onClick={() => setIsMore(!isMoce)}>\n                        {isMoce ? t('ConnectModal.less') : t('ConnectModal.more')}\n                        <div className={`particle-icon_more ${isMoce ? 'show' : 'hide'}`}></div>\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    const getAuthWallet = () => {\n        const arr: GroupItem[] = [];\n        particleAuthSort.forEach((key) => {\n            const obj = AuthGroup.find((item) => item.key === key);\n            if (obj) {\n                arr.push(obj);\n            }\n        });\n        return arr;\n    };\n    const stopPropagation = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        return false;\n    };\n    return (\n        <>\n            {open ? (\n                <>\n                    {/* masker */}\n                    <div\n                        onTouchStart={stopPropagation}\n                        onScroll={stopPropagation}\n                        className=\"particle-connect-modal-container center-center show\"\n                        // onClick={modalCloseHandle}\n                    ></div>\n                    <div\n                        className=\"particle-connect-modal-box show\"\n                        onTouchStart={stopPropagation}\n                        onScroll={stopPropagation}\n                    >\n                        <div className=\"particle-connect-modal-close hover\" onClick={modalCloseHandle}></div>\n                        <div className=\"particle-connect-modal-flex start-start\">\n                            <div\n                                className={`flex1 particle-connect-methods-list ${loginStep === '1' ? 'show' : 'hide'}`}\n                            >\n                                <div className=\"particle-connect-modal-title\">{t('ConnectModal.title2')}</div>\n                                <div className=\"particle-connect-modal-gourp-list\">\n                                    {(walletSort ?? []).length == 0 ? (\n                                        <>\n                                            <GroupChilderRender\n                                                childKey={'Particle Auth'}\n                                                groups={getAuthWallet()}\n                                            ></GroupChilderRender>\n                                            {walletMetas.length > 0 && (\n                                                <GroupChilderRender\n                                                    childKey={'Wallet'}\n                                                    groups={walletMetas}\n                                                ></GroupChilderRender>\n                                            )}\n                                        </>\n                                    ) : (\n                                        <>\n                                            {walletSort\n                                                ?.filter((item) => {\n                                                    return item !== 'Wallet' || walletMetas.length > 0;\n                                                })\n                                                ?.map((item, idx) => (\n                                                    <GroupChilderRender\n                                                        key={idx.toString()}\n                                                        childKey={item}\n                                                        groups={item === 'Wallet' ? walletMetas : getAuthWallet()}\n                                                    ></GroupChilderRender>\n                                                ))}\n                                        </>\n                                    )}\n                                </div>\n                            </div>\n                            <div className={`particle-connect-methods-form ${loginStep === '2' ? 'show' : 'hide'}`}>\n                                <div className=\"particle-icon-back\" onClick={() => closeStep2()}></div>\n                                {authKey ? (\n                                    <ConnectForm\n                                        authItem={authItem}\n                                        mobileUri={mobileUri}\n                                        onClose={modalCloseHandle}\n                                    ></ConnectForm>\n                                ) : (\n                                    <div className={'center-center flex-column particle-no-auth-key'}>\n                                        <h3>{t('ConnectModal.title1')}?</h3>\n\n                                        <div className=\"center-start particle-item-what\">\n                                            <img className=\"particle-icon-what\" src={what_img1} alt=\"\" />\n                                            <div className=\"flex1\">\n                                                <h5>{t('ConnectModal.tip1')}</h5>\n                                                <p>{t('ConnectModal.tip2')}</p>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"center-start particle-item-what\">\n                                            <img className=\"particle-icon-what\" src={what_img2} alt=\"\" />\n                                            <div className=\"flex1\">\n                                                <h5>{t('ConnectModal.tip3')}</h5>\n                                                <p>{t('ConnectModal.tip4')}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </>\n            ) : null}\n        </>\n    );\n}\n\nexport default ConnectModal;\n", "import { AuthCoreEvent, AuthType, isConnected, particleAuth } from '@particle-network/auth-core';\nimport { useConnect, useEthereum, useSolana } from '@particle-network/auth-core-modal';\nimport type { Provider } from '@particle-network/connectors';\nimport { getEVMChainById, getPublicAddress, isEVMProvider } from '@particle-network/connectors';\nimport { walletEntryPlugin } from '@particle-network/wallet';\nimport { useCallback, useEffect } from 'react';\nimport {\n    useAccountInfo,\n    useChain,\n    useConnectAction,\n    useConnectKit,\n    useIsCacheProvider,\n    useUnsupportedChain,\n    useUserChains,\n} from '../provider/ModalContext';\nimport { useNetwork } from './useNetwork';\n\ninterface ConnectOptions {\n    id?: string;\n    preferredAuthType?: AuthType;\n    [key: string]: any;\n}\n\nexport function useParticleConnect() {\n    const { updateParticleProvider, updateAccount, updateConnectId } = useConnectAction();\n    const { updateChain } = useChain();\n    const { setAccountLoading, connectId, particleProvider } = useAccountInfo();\n    const { changeNetWork } = useNetwork();\n    const { userChains } = useUserChains();\n    const { setUnsupportedChain } = useUnsupportedChain();\n    const isCache = useIsCacheProvider();\n\n    const connectKit = useConnectKit();\n\n    const connectSuccess = useCallback(\n        async (provider: Provider, id?: string) => {\n            const account = await getPublicAddress(provider);\n            updateParticleProvider?.(provider);\n            updateAccount?.(account);\n            setAccountLoading?.(false);\n            updateConnectId?.(id ?? '');\n\n            if (isEVMProvider(provider)) {\n                const chainId: string = await provider.request({ method: 'eth_chainId' });\n                const chain = getEVMChainById(Number(chainId));\n                if (chain) {\n                    updateChain?.({\n                        id: Number(chainId),\n                        name: chain.name,\n                    });\n                }\n                changeNetWork('evm');\n                setUnsupportedChain?.(!chain || !userChains.find((x) => x.id === chain.id));\n            } else {\n                updateChain?.({\n                    id: 101,\n                    name: 'Solana',\n                });\n                changeNetWork('solana');\n                setUnsupportedChain?.(false);\n            }\n        },\n        [updateChain, changeNetWork, getEVMChainById]\n    );\n\n    const { connect: connectAuthCore, disconnect: disconnectAuthCore } = useConnect();\n\n    const { provider: evmProvider } = useEthereum();\n    const { wallet: solanaWallet } = useSolana();\n    const { connectionStatus } = useConnect();\n\n    useEffect(() => {\n        const chain = userChains[0];\n        const onAuthCoreConnect = () => {\n            connectSuccess(chain.name.toLowerCase() === 'solana' ? solanaWallet : evmProvider, 'particle');\n        };\n        particleAuth.on(AuthCoreEvent.ParticleAuthConnect, onAuthCoreConnect);\n        return () => {\n            particleAuth.off(AuthCoreEvent.ParticleAuthConnect, onAuthCoreConnect);\n        };\n    }, [connectSuccess, userChains]);\n\n    useEffect(() => {\n        if (connectionStatus === 'loading') {\n            setAccountLoading?.(true);\n        } else if (connectionStatus === 'connected' || connectionStatus === 'disconnected') {\n            setAccountLoading?.(false);\n        }\n    }, [connectionStatus]);\n\n    useEffect(() => {\n        if (connectId !== 'particle') {\n            if (particleProvider) {\n                if (isEVMProvider(particleProvider)) {\n                    walletEntryPlugin.setWalletCore({\n                        ethereum: particleProvider,\n                    });\n                } else {\n                    // phantom \u4E0D\u652F\u6301\u5207\u94FE\n                    Object.defineProperty(particleProvider, 'chainId', {\n                        value: 101,\n                        writable: false,\n                    });\n                    Object.defineProperty(particleProvider, 'selectedAddress', {\n                        value: (particleProvider.publicKey as any)?.toBase58() || null,\n                        writable: false,\n                    });\n                    walletEntryPlugin.setWalletCore({\n                        solana: particleProvider as any,\n                    });\n                }\n\n                // fix: create \u65F6\u6CA1\u6709\u521D\u59CB\u5316\u5B8C\u6210\n                setTimeout(() => {\n                    walletEntryPlugin.walletEntryCreate();\n                }, 200);\n            } else {\n                walletEntryPlugin.walletEntryDestroy();\n            }\n        }\n    }, [connectId, particleProvider]);\n\n    const connect = async ({ preferredAuthType, id, ...options }: ConnectOptions) => {\n        if (connectKit) {\n            if (id === 'particle') {\n                const chain = userChains[0];\n                if (preferredAuthType === AuthType.phone) {\n                    await connectAuthCore({\n                        phone: '',\n                        chain,\n                    });\n                } else if (preferredAuthType === AuthType.email) {\n                    await connectAuthCore({\n                        email: '',\n                        chain,\n                    });\n                } else {\n                    await connectAuthCore({\n                        socialType: preferredAuthType as any,\n                        prompt: 'select_account',\n                        chain,\n                    });\n                }\n                await connectSuccess(chain.name.toLowerCase() === 'solana' ? solanaWallet : evmProvider, 'particle');\n                return evmProvider;\n            }\n            const provider = await connectKit.connect(id!, options);\n            await connectSuccess(provider, id);\n            return provider;\n        } else {\n            return Promise.reject('error : connect no found  connectKit');\n        }\n    };\n\n    const disconnect = async (options?: any) => {\n        try {\n            if (connectKit) {\n                if (connectId === 'particle') {\n                    await disconnectAuthCore();\n                } else {\n                    await connectKit.disconnect(options);\n                }\n                updateParticleProvider?.(undefined);\n                updateAccount?.('');\n                updateConnectId?.('');\n                setUnsupportedChain?.(false);\n                if (typeof window !== 'undefined') {\n                    window?.localStorage?.removeItem('WALLETCONNECT_DEEPLINK_CHOICE');\n                }\n                changeNetWork?.('');\n                updateChain?.(undefined);\n            }\n            return Promise.resolve('no connect');\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const cacheconnect = async (): Promise<Provider | undefined> => {\n        if (connectKit && isCache) {\n            if (isConnected()) {\n                const chain = userChains[0];\n                const chainType = localStorage.getItem('particle_connect_chain_type');\n                let provider = chain.name.toLowerCase() === 'solana' ? solanaWallet : evmProvider;\n                if (chainType === 'solana' && userChains.some((chain) => chain.name.toLowerCase() === 'solana')) {\n                    provider = solanaWallet;\n                }\n                await connectSuccess(provider, 'particle');\n                return provider;\n            } else {\n                const provider = await connectKit.connectToCachedProvider().catch((e) => {\n                    console.log('Error:connectToCachedProvider ', e);\n                    setAccountLoading?.(false);\n                    return undefined;\n                });\n                if (provider) {\n                    await connectSuccess(provider, connectKit?.cachedProviderId?.() || '');\n                } else {\n                    setAccountLoading?.(false);\n                }\n                return provider;\n            }\n        }\n        setAccountLoading?.(false);\n        return undefined;\n    };\n\n    return {\n        connectKit,\n        connect,\n        disconnect,\n        cacheconnect,\n        _connectSuccess: connectSuccess,\n    };\n}\n", "import { useMemo } from 'react';\nimport { useCurrentChain, useIsEvm, useIsSolana, useParticleKitChains } from '../provider/ModalChainContext';\nimport { useAccountInfo, useConnectKit } from '../provider/ModalContext';\nexport function useNetwork() {\n    const chains = useParticleKitChains();\n    const chain = useCurrentChain();\n    const { isEvm, updateIsEvm, changeNetWork } = useIsEvm();\n    const { isSolana, updateIsSolana } = useIsSolana();\n    const connectKit = useConnectKit();\n    const { connectId } = useAccountInfo();\n\n    return useMemo(\n        () => ({\n            chain,\n            chains,\n            isEvm,\n            isSolana,\n            network: isEvm ? 'evm' : isSolana ? 'solana' : undefined,\n            connectId,\n            changeNetWork,\n        }),\n        [chain, chains, isEvm, isSolana, updateIsEvm, updateIsSolana, connectKit, connectId, changeNetWork]\n    );\n}\n", "import { useParticleConnect } from './useParticleConnect';\n\nexport async function useWalletMetas() {\n    const { connectKit } = useParticleConnect();\n    if (connectKit && connectKit.walletMetas) {\n        const walletMetas = await connectKit.walletMetas();\n        return walletMetas;\n    }\n    return Promise.resolve([]);\n}\n", "import React, { useState, useEffect } from 'react';\nimport '../../styles/index.css';\nimport './index.css';\nimport QRCode from './qr';\nimport type { GroupItem } from '../ConnectModal/type';\nimport { useTranslation } from '../../provider/I18nContext';\nimport loading_icon from '../../assets/images/loading.png';\n\nfunction ConnectForm({\n    authItem,\n    mobileUri,\n}: {\n    authItem: GroupItem | undefined;\n    onClose?: () => void;\n    mobileUri: string;\n}) {\n    const { t } = useTranslation();\n    const [loading, setLoading] = useState(true);\n    const [isCopy, setIsCopy] = useState(false);\n    const [copyString, setCopyString] = useState(t('ConnectForm.copied_to_clipboard'));\n    const [qrcode, setQrcode] = useState({\n        value: '',\n        logo: '',\n    });\n\n    useEffect(() => {\n        const init = async () => {\n            setLoading(true);\n            setQrcode({\n                value: '',\n                logo: '',\n            });\n            if (authItem && authItem.key) {\n                if (authItem?.methods === 'qrcode' && mobileUri) {\n                    if (mobileUri) {\n                        setQrcode({\n                            value: mobileUri,\n                            logo: authItem.icon,\n                        });\n                        setLoading(false);\n                    }\n                }\n            }\n        };\n        init();\n    }, [authItem, mobileUri]);\n\n    const copyText = (text) => {\n        try {\n            if (isCopy) return;\n            setIsCopy(true);\n            setCopyString(t('ConnectForm.copy_success') + '!');\n            navigator.clipboard.writeText(text);\n            setTimeout(() => {\n                setCopyString(t('ConnectForm.copied_to_clipboard'));\n                setIsCopy(false);\n            }, 1000);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"particle-connect-form-contaier center-center flex-column\">\n                {loading ? (\n                    <>\n                        <div className=\"center-center flex-column particle-loading\">\n                            <img src={authItem?.icon} alt=\"\" />\n                            <h3>\n                                {' '}\n                                {authItem?.methods === 'qrcode' && authItem?.name !== 'MetaMask'\n                                    ? 'Connect with'\n                                    : 'Opening'}{' '}\n                                {authItem?.name}...\n                            </h3>\n                            <p>{t('ConnectForm.loading1')}</p>\n                            <p>\n                                <img\n                                    className=\"particle-loading-img\"\n                                    width={30}\n                                    height={30}\n                                    src={loading_icon}\n                                    alt=\"\"\n                                />\n                            </p>\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className=\"particle-qrcode center-center\">\n                            {qrcode.value && (\n                                <QRCode\n                                    value={qrcode.value}\n                                    logo={qrcode.logo}\n                                    logoBackgroundColor=\"#fff\"\n                                    size={700}\n                                    logoSize={120}\n                                    ecl=\"H\"\n                                    logoMargin={20}\n                                ></QRCode>\n                            )}\n                        </div>\n\n                        {qrcode.value && (\n                            <div className=\"particle-copy-uri\" onClick={() => copyText(qrcode.value)}>\n                                {copyString}\n                            </div>\n                        )}\n                        <div className=\"particle-form-footer center-center flex-column\">\n                            <span>\n                                {t('ConnectForm.loading2')} {authItem?.name}\n                            </span>\n                            {/* {authItem?.name === 'WalletConnect' || authItem?.name === 'Rainbow' ? (\n                                <div className=\"tips center-between\">\n                                    Don\u2019t have {authItem?.name}?\n                                    <div className=\"open-qrcode\" onClick={openConnect}>\n                                        GET\n                                    </div>\n                                </div>\n                            ) : undefined} */}\n                        </div>\n                    </>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default ConnectForm;\n", "import QRCodeUtil from 'qrcode';\nimport React, { useMemo } from 'react';\n\nconst generateMatrix = (value, errorCorrectionLevel) => {\n    const arr = Array.prototype.slice.call(QRCodeUtil.create(value, { errorCorrectionLevel }).modules.data, 0);\n    const sqrt = Math.sqrt(arr.length);\n    return arr.reduce(\n        (rows, key, index) => (index % sqrt === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows,\n        []\n    );\n};\n\nconst QRCode = ({\n    ecl = 'M',\n    logo,\n    logoBackgroundColor: givenLogoBackgroundColor,\n    logoMargin = 5,\n    logoSize = 34,\n    size = 150,\n    value = 'QR Code',\n    randomDotSize = false,\n}) => {\n    const logoBackgroundColor = givenLogoBackgroundColor;\n    const href = logo;\n    const dots = useMemo(() => {\n        const dots: JSX.Element[] = [];\n        const matrix = generateMatrix(value, ecl);\n        const cellSize = size / matrix.length;\n        const qrList = [\n            { x: 0, y: 0 },\n            { x: 1, y: 0 },\n            { x: 0, y: 1 },\n        ];\n\n        qrList.forEach(({ x, y }) => {\n            const x1 = (matrix.length - 7) * cellSize * x;\n            const y1 = (matrix.length - 7) * cellSize * y;\n            for (let i = 0; i < 3; i++) {\n                dots.push(\n                    <rect\n                        fill={i % 2 !== 0 ? 'white' : 'black'}\n                        height={cellSize * (7 - i * 2)}\n                        rx={(i - 3) * -10 + (i === 0 ? 2 : 0)} // calculated border radius for corner squares\n                        ry={(i - 3) * -10 + (i === 0 ? 2 : 0)} // calculated border radius for corner squares\n                        width={cellSize * (7 - i * 2)}\n                        x={x1 + cellSize * i}\n                        y={y1 + cellSize * i}\n                    />\n                );\n            }\n        });\n\n        const clearArenaSize = Math.floor((logoSize * 1.5 + 3) / cellSize);\n        const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\n        const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\n\n        matrix.forEach((row, i) => {\n            row.forEach((column, j) => {\n                if (matrix[i][j]) {\n                    if (!((i < 7 && j < 7) || (i > matrix.length - 8 && j < 7) || (i < 7 && j > matrix.length - 8))) {\n                        if (\n                            !(\n                                i > matrixMiddleStart &&\n                                i < matrixMiddleEnd &&\n                                j > matrixMiddleStart &&\n                                j < matrixMiddleEnd &&\n                                i < j + clearArenaSize / 2 &&\n                                j < i + clearArenaSize / 2 + 1\n                            )\n                        ) {\n                            dots.push(\n                                <circle\n                                    cx={i * cellSize + cellSize / 2}\n                                    cy={j * cellSize + cellSize / 2}\n                                    fill=\"black\"\n                                    r={cellSize / (randomDotSize ? (Math.random() + 1) * 2 : 2.5)} // calculate size of single dots\n                                />\n                            );\n                        }\n                    }\n                }\n            });\n        });\n\n        return dots;\n    }, [ecl, logoSize, size, value, randomDotSize]);\n\n    const logoPosition = size / 2 - logoSize / 2 - logoMargin;\n    const logoWrapperSize = logoSize + logoMargin * 2;\n\n    return (\n        <svg height={size / 2} width={size / 2} viewBox={`0 0 ${size} ${size}`}>\n            <defs>\n                <clipPath id=\"clip-wrapper\">\n                    <rect height={logoWrapperSize} width={logoWrapperSize} />\n                </clipPath>\n                <clipPath id=\"clip-logo\">\n                    <rect height={logoSize} width={logoSize} />\n                </clipPath>\n            </defs>\n            <rect fill=\"white\" height={size} width={size} />\n            {dots}\n            {logo && (\n                <g>\n                    <rect\n                        //clipPath=\"url(#clip-wrapper)\"\n                        fill={logoBackgroundColor}\n                        height={logoWrapperSize}\n                        width={logoWrapperSize}\n                        x={logoPosition}\n                        y={logoPosition}\n                    />\n                    <g>\n                        <image\n                            //clipPath=\"url(#clip-logo)\"\n                            height={logoSize}\n                            href={href}\n                            preserveAspectRatio=\"xMidYMid slice\"\n                            width={logoSize}\n                            x={logoPosition + logoMargin}\n                            y={logoPosition + logoMargin}\n                        />\n                    </g>\n                </g>\n            )}\n        </svg>\n    );\n};\n\nexport default QRCode;\n", "export function getVersion(): string {\n    return 'web_' + '1.3.5';\n}\n", "import { useAccountInfo } from '../provider/ModalContext';\n\nexport function useAccount(): string | undefined {\n    const { account } = useAccountInfo();\n    return account;\n}\n", "import { useAccountInfo } from '../provider/ModalContext';\n\nexport function useConnectId() {\n    const { connectId } = useAccountInfo();\n    return connectId;\n}\n", "import type { Provider } from '@particle-network/connectors';\nimport { useAccountInfo } from '../provider/ModalContext';\n\nexport function useParticleProvider(): Provider | undefined {\n    const { particleProvider } = useAccountInfo();\n    if (particleProvider) {\n        return particleProvider;\n    }\n    return undefined;\n}\n", "import React, { useState, useEffect } from 'react';\nimport { createIcon } from './blockies';\nfunction BlockiesIdenticon(props) {\n    const pri_canvas = document.createElement('canvas');\n    const [canvas] = useState(pri_canvas);\n    const [wallImg, setWallImg] = useState('');\n    const size = (props?.opts?.size || 10) * (props?.opts?.scale || 8);\n\n    function getOpts() {\n        return {\n            seed: props?.opts?.seed || 'foo',\n            color: props?.opts?.color || '#dfe',\n            bgcolor: props?.opts?.bgcolor || '#a71',\n            size: props?.opts?.size || 15,\n            scale: props?.opts?.scale || 3,\n            spotcolor: props?.opts?.spotcolor || '#000',\n        };\n    }\n\n    useEffect(() => {\n        const img = createIcon(getOpts(), canvas).toDataURL();\n        setWallImg(img);\n    }, [props, canvas]);\n\n    return (\n        <div\n            style={{\n                height: size,\n                width: size,\n                backgroundImage: `url(${wallImg})`,\n                backgroundSize: '100% auto',\n                backgroundRepeat: 'no-repeat',\n            }}\n        ></div>\n    );\n}\n\nexport default BlockiesIdenticon;\n", "// The random number is a js implementation of the Xorshift PRNG\nconst randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\nfunction seedrand(seed) {\n    for (var i = 0; i < randseed.length; i++) {\n        randseed[i] = 0;\n    }\n    for (var i = 0; i < seed.length; i++) {\n        randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n    }\n}\n\nfunction rand() {\n    // based on Java's String.hashCode(), expanded to 4 32bit values\n    var t = randseed[0] ^ (randseed[0] << 11);\n\n    randseed[0] = randseed[1];\n    randseed[1] = randseed[2];\n    randseed[2] = randseed[3];\n    randseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8);\n\n    return (randseed[3] >>> 0) / ((1 << 31) >>> 0);\n}\n\nfunction createColor() {\n    //saturation is the whole color spectrum\n    var h = Math.floor(rand() * 360);\n    //saturation goes from 40 to 100, it avoids greyish colors\n    var s = rand() * 60 + 40 + '%';\n    //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n    var l = (rand() + rand() + rand() + rand()) * 25 + '%';\n\n    var color = 'hsl(' + h + ',' + s + ',' + l + ')';\n    return color;\n}\n\nfunction createImageData(size) {\n    var width = size; // Only support square icons for now\n    var height = size;\n\n    var dataWidth = Math.ceil(width / 2);\n    var mirrorWidth = width - dataWidth;\n\n    var data = [];\n    for (var y = 0; y < height; y++) {\n        var row = [];\n        for (var x = 0; x < dataWidth; x++) {\n            // this makes foreground and background color to have a 43% (1/2.3) probability\n            // spot color has 13% chance\n            row[x] = Math.floor(rand() * 2.3);\n        }\n        var r = row.slice(0, mirrorWidth);\n        r.reverse();\n        row = row.concat(r);\n\n        for (var i = 0; i < row.length; i++) {\n            data.push(row[i]);\n        }\n    }\n\n    return data;\n}\n\nfunction buildOpts(opts) {\n    var newOpts = {};\n\n    newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n\n    seedrand(newOpts.seed);\n\n    newOpts.size = opts.size || 8;\n    newOpts.scale = opts.scale || 4;\n    newOpts.color = opts.color || createColor();\n    newOpts.bgcolor = opts.bgcolor || createColor();\n    newOpts.spotcolor = opts.spotcolor || createColor();\n\n    return newOpts;\n}\n\nexport function renderIcon(opts, canvas) {\n    opts = buildOpts(opts || {});\n    var imageData = createImageData(opts.size);\n    var width = Math.sqrt(imageData.length);\n\n    canvas.width = canvas.height = opts.size * opts.scale;\n\n    var cc = canvas.getContext('2d');\n    cc.fillStyle = opts.bgcolor;\n    cc.fillRect(0, 0, canvas.width, canvas.height);\n    cc.fillStyle = opts.color;\n\n    for (var i = 0; i < imageData.length; i++) {\n        // if data is 0, leave the background\n        if (imageData[i]) {\n            var row = Math.floor(i / width);\n            var col = i % width;\n\n            // if data is 2, choose spot color, if 1 choose foreground\n            cc.fillStyle = imageData[i] === 1 ? opts.color : opts.spotcolor;\n\n            cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n        }\n    }\n    return canvas;\n}\n\nexport function createIcon(opts, canvas) {\n    renderIcon(opts, canvas);\n    return canvas;\n}\n", "export const shortString = (longValue?: string) => {\n    if (!longValue) {\n        return '';\n    }\n\n    if (longValue.length <= 10) {\n        return longValue;\n    }\n    return `${longValue.slice(0, 5)}...${longValue.slice(longValue.length - 5, longValue.length)}`;\n};\n", "import { tronAddressFromHex } from '@particle-network/auth-core';\nimport { useAuthCore } from '@particle-network/auth-core-modal';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport { ReactSVG } from 'react-svg';\nimport BuySvg from '../../assets/images/buy_svg.svg';\nimport CloseSvg from '../../assets/images/close_svg.svg';\nimport CopySvg from '../../assets/images/copy_svg.svg';\nimport LogoutSvg from '../../assets/images/logout_svg.svg';\nimport WalletSvg from '../../assets/images/wallet_svg.svg';\nimport { useConnectId, useCurrentChain } from '../../hooks';\nimport { useAccount } from '../../hooks/useAccount';\nimport { useParticleConnect } from '../../hooks/useParticleConnect';\nimport { useTranslation } from '../../provider/I18nContext';\nimport Avatar from '../../services/AuthAvatar';\nimport '../../styles/index.css';\nimport { shortString } from '../../utils';\nimport './index.css';\n\nexport interface AccountModalProps {\n    open: boolean;\n    mode?: string;\n    onClose?: () => void;\n}\n\nexport function AccountModal({ open, onClose, mode }: AccountModalProps) {\n    const account = useAccount();\n    const { t } = useTranslation();\n    const modalCloseHandle = () => {\n        onClose && onClose();\n    };\n    const [accountName, setAccountName] = useState(account);\n    const [copiedAddress, setCopiedAddress] = useState(false);\n    const connectId = useConnectId();\n    const chain = useCurrentChain();\n    const { disconnect } = useParticleConnect();\n    const [overflow, setOverflow] = useState<string[]>([]);\n    useEffect(() => {\n        if (open) {\n            const htmlOverFlow = document.getElementsByTagName('html')[0].style.overflow;\n            const bodyOverFlow = document.getElementsByTagName('body')[0].style.overflow;\n            setOverflow([htmlOverFlow, bodyOverFlow]);\n            document.getElementsByTagName('html')[0].style.overflow = 'hidden';\n            document.getElementsByTagName('body')[0].style.overflow = 'hidden';\n        } else {\n            document.getElementsByTagName('html')[0].style.overflow = overflow[0];\n            document.getElementsByTagName('body')[0].style.overflow = overflow[1];\n            setOverflow([]);\n        }\n    }, [open]);\n\n    const stopPropagation = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        return false;\n    };\n\n    useEffect(() => {\n        if (account && chain?.name?.toLowerCase() === 'tron') {\n            setAccountName(shortString(tronAddressFromHex(account)));\n        } else {\n            setAccountName(shortString(account));\n        }\n    }, [account, chain]);\n\n    const copyAddressAction = useCallback(() => {\n        if (account) {\n            navigator.clipboard.writeText(account);\n            setCopiedAddress(true);\n            setTimeout(() => {\n                setCopiedAddress(false);\n            }, 1000);\n        }\n    }, [account]);\n\n    const logout = useCallback(async () => {\n        try {\n            await disconnect();\n        } catch (error) {\n            // ignore\n        }\n        onClose && onClose();\n    }, []);\n\n    const { openWallet, openBuy } = useAuthCore();\n\n    const toWallet = () => {\n        openWallet();\n        modalCloseHandle();\n    };\n\n    const toBuy = () => {\n        openBuy();\n        modalCloseHandle();\n    };\n    return (\n        <>\n            {open ? (\n                <>\n                    {/* masker */}\n                    <div\n                        className={'particle-account-modal-container center-center show '}\n                        onClick={modalCloseHandle}\n                        onTouchStart={stopPropagation}\n                        onScroll={stopPropagation}\n                    ></div>\n\n                    <div\n                        className={`particle-account-modal-box  center-start flex-column  show ${\n                            mode || 'bottomRight'\n                        }`}\n                        onScroll={stopPropagation}\n                    >\n                        {/* <div className=\"particle-account-modal-close hover\" onClick={modalCloseHandle}></div> */}\n                        <div className=\"particle-account-header\">\n                            <div className=\"particle-avatar\">\n                                <Avatar opts={{ seed: account, size: 33, scale: 1 }} />\n                            </div>\n                            <span className=\"particle-account-address\">{accountName}</span>\n                            <ReactSVG\n                                src={CloseSvg}\n                                className=\"particle-account-modal-close hover\"\n                                onClick={modalCloseHandle}\n                            ></ReactSVG>\n                        </div>\n                        {connectId === 'particle' && (\n                            <>\n                                <div className=\"particle-link-item\" onClick={toWallet}>\n                                    {/* @ts-ignore */}\n                                    <ReactSVG src={WalletSvg} className=\"icon\"></ReactSVG>\n                                    {t('AccountModal.wallet')}\n                                </div>\n\n                                <div className=\"particle-link-item\" onClick={toBuy}>\n                                    <ReactSVG src={BuySvg} className=\"icon\"></ReactSVG>\n                                    {t('AccountModal.buy')}\n                                </div>\n                            </>\n                        )}\n\n                        <div className=\"particle-link-item\" onClick={copyAddressAction}>\n                            <ReactSVG src={CopySvg} className=\"icon\"></ReactSVG>\n                            {copiedAddress ? <>{t('AccountModal.copied')}!</> : t('AccountModal.copy_address')}\n                        </div>\n\n                        <div className=\"particle-link-item red\" onClick={logout}>\n                            <ReactSVG src={LogoutSvg} className=\"icon\"></ReactSVG>\n                            {t('AccountModal.logout')}\n                        </div>\n                    </div>\n                </>\n            ) : undefined}\n        </>\n    );\n}\n\nexport default memo(AccountModal);\n", "import { tronAddressFromHex } from '@particle-network/auth-core';\nimport type { ChainInfo } from '@particle-network/connectors';\nimport type { ReactNode } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useNetwork } from '../../hooks';\nimport { useAccount } from '../../hooks/useAccount';\nimport { useParticleConnect } from '../../hooks/useParticleConnect';\nimport {\n    useAccountInfo,\n    useAccountModal,\n    useChainModal,\n    useConnectModal,\n    useModalState,\n} from '../../provider/ModalContext';\nimport { shortString } from '../../utils';\nimport AccountModal from '../AccountModal';\nimport './index.css';\n\nconst noop = () => {};\n\nexport interface ConnectButtonRendererProps {\n    children: (renderProps: {\n        account?: string;\n        chain?: ChainInfo;\n        openChainModal?: () => void;\n        openAccountModal?: () => void;\n        openConnectModal?: () => void;\n        closeAccountModal?: () => void;\n        accountModalOpen?: boolean;\n        connectModalOpen?: boolean;\n        accountStr?: string;\n        accountLoading?: boolean;\n    }) => ReactNode;\n}\n\nexport function ConnectButtonRenderer({ children }: ConnectButtonRendererProps) {\n    const account = useAccount();\n\n    const [isCustomButton, setIsCustonButton] = useState(false);\n\n    const { cacheconnect } = useParticleConnect();\n    const { openConnectModal } = useConnectModal();\n    const { openAccountModal, closeAccountModal } = useAccountModal();\n    const { openChainModal } = useChainModal();\n    const { accountModalOpen, connectModalOpen } = useModalState();\n    const { accountLoading } = useAccountInfo();\n    const { chain } = useNetwork();\n\n    const accountFilter = (ant: string | undefined) => {\n        if (!ant) return '';\n        let account = ant;\n        if (chain?.name.toLowerCase() === 'tron') {\n            account = tronAddressFromHex(ant);\n        }\n        return shortString(account);\n    };\n\n    useEffect(() => {\n        cacheconnect();\n    }, []);\n\n    const openAccount = () => {\n        setIsCustonButton(true);\n        openAccountModal?.();\n    };\n    const closeAccount = () => {\n        setIsCustonButton(false);\n        closeAccountModal?.();\n    };\n\n    return (\n        <div className={`custom-btn-box ${isCustomButton ? 'account-show' : ''}`}>\n            {children({\n                chain,\n                account,\n                accountStr: accountFilter(account),\n                accountModalOpen,\n                connectModalOpen,\n                openChainModal: openChainModal ?? noop,\n                openAccountModal: openAccount ?? noop,\n                closeAccountModal: closeAccount ?? noop,\n                openConnectModal: openConnectModal ?? noop,\n                accountLoading,\n            })}\n            <AccountModal onClose={closeAccount} open={accountModalOpen} />\n        </div>\n    );\n}\n\nConnectButtonRenderer.displayName = 'ConnectButton.Custom';\n"],
  "mappings": "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",
  "names": ["tronAddressFromHex", "React", "useEffect", "useState", "chains", "isEvm", "isSolana", "chain", "AuthType", "getPublicAddress", "React", "createContext", "useCallback", "useContext", "useEffect", "useMemo", "useState", "React", "useCallback", "useState", "React", "createContext", "useContext", "createContext", "useContext", "React", "chains", "useState", "useCallback", "React", "useConnect", "useEthereum", "useSolana", "React", "useCallback", "useEffect", "useState", "useEthereum", "useSolana", "isEVMProvider", "useCallback", "useEffect", "useMemo", "chains", "useMemo", "useCallback", "isEVMProvider", "useEthereum", "useSolana", "useEffect", "chain", "React", "useState", "useEffect", "React", "useMemo", "dots", "useState", "useEffect", "React", "useState", "_a", "useEthereum", "useSolana", "useConnect", "useEffect", "account", "useCallback", "item", "provider", "React", "createContext", "useState", "useCallback", "useMemo", "i18n", "useEffect", "account", "chain", "theme", "getPublicAddress", "React", "useContext", "AuthType", "React", "useState", "useEffect", "useState", "_a", "_b", "useEffect", "React", "React", "memo", "useCallback", "useEffect", "useState", "useState", "useEffect", "useCallback", "React", "memo", "tronAddressFromHex", "React", "useEffect", "useState", "useState", "account", "tronAddressFromHex", "useEffect", "React", "useState", "useEffect", "account", "tronAddressFromHex", "React"]
}
