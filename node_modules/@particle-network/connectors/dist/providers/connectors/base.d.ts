import EventEmitter from 'eventemitter3';
import type { EVMProvider, Provider, SolanaProvider } from '../../types';
export interface ConnecterEvents {
    connect(): void;
    disconnect(): void;
    chainChanged(chainId: string): void;
    accountsChanged(accounts: string[]): void;
    message(message: any): void;
}
export type ConnectKitConnector<C extends Connector = Connector> = {
    connector: C;
    mobile?: {
        getUri?: () => Promise<string>;
    };
    qrCode: () => Promise<string>;
};
export declare abstract class Connector extends EventEmitter<ConnecterEvents> {
    provider: Provider | undefined;
    constructor(options?: any);
    abstract connect(): Promise<Provider>;
    abstract disconnect(): Promise<void>;
}
export declare abstract class SolanaConnector extends Connector {
    provider: SolanaProvider | undefined;
}
export declare abstract class EVMConnector extends Connector {
    provider: EVMProvider | undefined;
    isSwitchChain?: boolean;
    switchChain?: ((chainId: number) => Promise<void>) | undefined;
    private isUserRejectedRequestError;
}
export interface ParticleConnector {
    connector: Connector;
    mobile?: {
        getAppLinkUri?: () => string | undefined;
        getUri?: () => Promise<string>;
    };
    qrCode?: {
        getUri?: () => Promise<string>;
    };
}
