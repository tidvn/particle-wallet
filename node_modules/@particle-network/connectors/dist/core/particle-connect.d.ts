import EventEmitter from 'eventemitter3';
import type { ParticleConnector } from '../providers/connectors/base';
import type { Chain, ConnectConfig, Provider, WalletMeta } from '../types';
export interface ConnectEvents {
    connect(provider: Provider): void;
    disconnect(): void;
    chainChanged(chain: Chain | undefined): void;
    providerChanged(provider: Provider): void;
    accountsChanged(accounts: string[]): void;
    message(message: any): void;
}
export declare class ParticleConnect extends EventEmitter<ConnectEvents> {
    private config;
    private connectorMap;
    constructor(config: ConnectConfig);
    get version(): string;
    walletMetas(): WalletMeta[];
    getConnector(id: any): ParticleConnector | undefined;
    private onAccountsChanged;
    private onChainChanged;
    private onDisconnect;
    connect(id: string, options?: any): Promise<Provider>;
    connectToCachedProvider(): Promise<Provider | undefined>;
    disconnect(options?: any): Promise<void>;
    /**
     * switch chain
     * @param chain
     * @returns
     */
    switchChain(chain: Chain): Promise<void>;
    cachedProviderId(): string | null;
}
