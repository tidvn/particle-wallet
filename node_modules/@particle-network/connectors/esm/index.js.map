{
  "version": 3,
  "sources": ["../src/core/particle-connect.ts", "../src/storage/index.ts", "../src/types/index.ts", "../src/types/chains.ts", "../src/types/errors.ts", "../src/types/types.ts", "../src/core/connect-controller.ts", "../src/utils/isMobile.ts", "../src/providers/injected/index.ts", "../src/utils/provider-utils.ts", "../src/utils/default-wallet.ts", "../src/utils/isMetaMaskInjected.ts", "../src/utils/rpcUrls.ts", "../src/providers/connectors/wallet-connect-v2.ts", "../src/providers/connectors/base.ts", "../src/providers/connectors/wallet-connect.ts", "../src/providers/connectors/argent.ts", "../src/providers/connectors/injected.ts", "../src/providers/connectors/bitkeep.ts", "../src/providers/connectors/coinbase.ts", "../src/providers/connectors/mathwallet.ts", "../src/providers/connectors/metamask.ts", "../src/providers/connectors/okx.ts", "../src/providers/connectors/omni.ts", "../src/providers/connectors/onto.ts", "../src/providers/connectors/phantom.ts", "../src/providers/connectors/rainbow.ts", "../src/providers/connectors/safepal.ts", "../src/providers/connectors/token-pocket.ts", "../src/providers/connectors/trust.ts"],
  "sourcesContent": ["import EventEmitter from 'eventemitter3';\nimport type { ParticleConnector } from '../providers/connectors/base';\nimport { PARTICLE_CONNECT_CACHED_CHAIN, setStorage } from '../storage';\nimport type { Chain, ChainInfo, ConnectConfig, ParticleConnectorMap, Provider, WalletMeta } from '../types';\nimport { ConnectorNotFoundError } from '../types';\nimport { getChainInfo, getEVMChainById, getSolanaChainById, isChainSupported } from '../types/chains';\nimport controller from './connect-controller';\n\nexport interface ConnectEvents {\n    connect(provider: Provider): void;\n    disconnect(): void;\n    chainChanged(chain: Chain | undefined): void;\n    providerChanged(provider: Provider): void;\n    accountsChanged(accounts: string[]): void;\n    message(message: any): void;\n}\n\nexport class ParticleConnect extends EventEmitter<ConnectEvents> {\n    private connectorMap: ParticleConnectorMap = {};\n\n    constructor(private config: ConnectConfig) {\n        super();\n        this.config.chains.forEach((chain) => {\n            if (!isChainSupported(chain)) {\n                throw new Error(`chain not supported, ${chain.id}`);\n            }\n        });\n        controller.init(config);\n        const { connectors } = this.config;\n\n        if (connectors && connectors.length > 0) {\n            connectors.forEach((wallet) => {\n                const particleConnect = wallet.createConnector(this.config.chains);\n                this.connectorMap[wallet.id] = particleConnect;\n                particleConnect.connector.off('accountsChanged', this.onAccountsChanged);\n                particleConnect.connector.on('accountsChanged', this.onAccountsChanged);\n                particleConnect.connector.off('chainChanged', this.onChainChanged);\n                particleConnect.connector.on('chainChanged', this.onChainChanged);\n                particleConnect.connector.off('disconnect', this.onDisconnect);\n                particleConnect.connector.on('disconnect', this.onDisconnect);\n            });\n        }\n    }\n\n    get version() {\n        return 'web_' + '1.3.2';\n    }\n\n    walletMetas(): WalletMeta[] {\n        if (!this.config.connectors) {\n            return [];\n        }\n        return this.config.connectors.map((wallet) => {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { createConnector, ...info } = wallet;\n            const meta: WalletMeta = info;\n            return meta;\n        });\n    }\n\n    public getConnector(id): ParticleConnector | undefined {\n        const connector = this.connectorMap[id];\n        return connector;\n    }\n\n    private onAccountsChanged = (accounts: string[]) => {\n        console.log('onAccountsChanged:', accounts);\n        if (accounts.length === 0) {\n            this.onDisconnect();\n        } else {\n            this.emit('accountsChanged', accounts);\n        }\n    };\n\n    private onChainChanged = (chainId: string) => {\n        const chain = getEVMChainById(Number(chainId)) as ChainInfo;\n        if (chain) {\n            // metamask \u4E3B\u52A8\u8C03\u7528\u65F6\u4E0D\u5305\u542Bicon \u53EF\u4EE5\u6392\u51FA\u6389\u4E8B\u4EF6\u91CD\u590D\u6D3E\u53D1\n            if (chain.icon) {\n                this.emit('chainChanged', chain);\n            }\n        } else {\n            const solanaChain = getSolanaChainById(Number(chainId));\n            if (solanaChain) {\n                this.emit('chainChanged', solanaChain);\n            } else {\n                this.emit('chainChanged', undefined);\n            }\n        }\n    };\n\n    private onDisconnect = () => {\n        try {\n            controller.setCachedProvider();\n            setStorage(PARTICLE_CONNECT_CACHED_CHAIN);\n            this.emit('disconnect');\n        } catch (error) {\n            console.error('onDisconnect error');\n        }\n    };\n\n    async connect(id: string, options?: any): Promise<Provider> {\n        try {\n            const connector = this.getConnector(id);\n            if (!connector) {\n                throw new Error('connector not found, the id is ' + id);\n            }\n            const provider = await connector.connector.connect();\n            controller.setCachedProvider(id);\n            this.emit('connect', provider);\n            return provider;\n        } catch (error) {\n            throw new Error(error as string);\n        }\n    }\n\n    async connectToCachedProvider(): Promise<Provider | undefined> {\n        const providerId = this.cachedProviderId();\n        if (providerId) {\n            return this.connect(providerId, { connectToCachedProvider: true });\n        }\n        return undefined;\n    }\n\n    async disconnect(options?: any): Promise<void> {\n        const providerId = this.cachedProviderId();\n        if (!providerId) {\n            return;\n        }\n        const connector = this.getConnector(providerId);\n        if (connector) {\n            await connector.connector.disconnect();\n            controller.setCachedProvider();\n            setStorage(PARTICLE_CONNECT_CACHED_CHAIN);\n            this.emit('disconnect');\n        }\n    }\n\n    /**\n     * switch chain\n     * @param chain\n     * @returns\n     */\n    async switchChain(chain: Chain): Promise<void> {\n        const chainInfo = getChainInfo(chain);\n        if (!chainInfo) {\n            throw new Error('chain not supported');\n        }\n        const id = this.cachedProviderId();\n        if (!id) {\n            throw new ConnectorNotFoundError();\n        }\n\n        const connector = this.getConnector(id);\n        if (connector && (connector.connector as any).switchChain) {\n            await (connector.connector as any).switchChain(chain.id);\n            if (chain && (chain as any)?.icon) {\n                this.emit('chainChanged', chain);\n            }\n        } else {\n            throw new Error('not supported switch chain');\n        }\n    }\n\n    cachedProviderId(): string | null {\n        return controller.getCachedProvider();\n    }\n}\n", "export const PARTICLE_CONNECT_CACHED_PROVIDER = 'particle_connect_cached_provider';\nexport const WALLETCONNECT_DEEPLINK_CHOICE = 'WALLETCONNECT_DEEPLINK_CHOICE';\nexport const PARTICLE_CONNECT_CACHED_CHAIN = 'particle_connect_cached_chain';\n\nexport function setStorage(key: string, value?: string) {\n    if (localStorage) {\n        if (value) {\n            localStorage.setItem(key, value);\n        } else {\n            localStorage.removeItem(key);\n        }\n    }\n}\n\nexport function getStorage(key: string): string | null {\n    if (!localStorage) {\n        return null;\n    }\n    return localStorage.getItem(key);\n}\n", "export { ParticleChains } from '@particle-network/chains';\nexport type { Chain, ChainInfo, ChainName, ChainType } from '@particle-network/chains';\nexport * from './chains';\nexport * from './errors';\n\nexport * from './types';\n", "import type { Chain, ChainInfo } from '@particle-network/chains';\nimport { ParticleChains } from '@particle-network/chains';\n\nexport function getEVMChainById(chainId: number): Chain | undefined {\n    console.log('getEVMChainById:', chainId);\n    const chainType = 'evm';\n    const evnChains = Object.keys(ParticleChains)\n        .filter((key) => ParticleChains[key].chainType === chainType)\n        .map((key) => ParticleChains[key]);\n    const chain = evnChains.find((item) => item.id === chainId);\n    if (chain) {\n        return chain;\n    }\n    return undefined;\n}\n\nexport function getSolanaChainById(chainId: number): Chain | undefined {\n    const chainType = 'solana';\n    const solanaChains = Object.keys(ParticleChains)\n        .filter((key) => ParticleChains[key].chainType === chainType)\n        .map((key) => ParticleChains[key]);\n    const chain = solanaChains.find((item) => item.id === chainId);\n    if (chain) {\n        return chain;\n    }\n    return undefined;\n}\n\nexport function isChainSupported(chain: Chain): boolean {\n    const chainKey = Object.keys(ParticleChains).find((key) => ParticleChains[key]?.id === chain.id);\n    return !!chainKey;\n}\n\nexport function getChainInfo(chain: Chain): ChainInfo | undefined {\n    const chainKey = Object.keys(ParticleChains).find((key) => ParticleChains[key]?.id === chain.id);\n    if (!chainKey) return undefined;\n    const chainInfo = ParticleChains[chainKey];\n    return chainInfo;\n}\n", "/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nexport class RpcError<T = undefined> extends Error {\n    readonly code: number;\n    readonly data?: T;\n    readonly internal?: unknown;\n\n    constructor(\n        /** Number error code */\n        code: number,\n        /** Human-readable string */\n        message: string,\n        /** Low-level error */\n        internal?: unknown,\n        /** Other useful information about error */\n        data?: T\n    ) {\n        if (!Number.isInteger(code)) throw new Error('code must be an integer.');\n        if (!message || typeof message !== 'string') throw new Error('message must be a nonempty string.');\n\n        super(message);\n        this.code = code;\n        this.data = data;\n        this.internal = internal;\n    }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nexport class ProviderRpcError<T = undefined> extends RpcError<T> {\n    /**\n     * Create an Ethereum Provider JSON-RPC error.\n     * `code` must be an integer in the 1000 <= 4999 range.\n     */\n    constructor(\n        /**\n         * Number error code\n         * @see https://eips.ethereum.org/EIPS/eip-1193#error-standards\n         */\n        code: 4001 | 4100 | 4200 | 4900 | 4901 | 4902,\n        /** Human-readable string */\n        message: string,\n        /** Low-level error */\n        internal?: unknown,\n        /** Other useful information about error */\n        data?: T\n    ) {\n        if (!(Number.isInteger(code) && code >= 1000 && code <= 4999))\n            throw new Error('code must be an integer such that: 1000 <= code <= 4999');\n\n        super(code, message, internal, data);\n    }\n}\n\nexport class AddChainError extends Error {\n    name = 'AddChainError';\n    message = 'Error adding chain';\n}\n\nexport class ConnectorAlreadyConnectedError extends Error {\n    name = 'ConnectorAlreadyConnectedError';\n    message = 'Connector already connected';\n}\n\nexport class ConnectorNotFoundError extends Error {\n    name = 'ConnectorNotFoundError';\n    message = 'Connector not found';\n}\n\nexport class ResourceUnavailableError extends RpcError {\n    name = 'ResourceUnavailable';\n\n    constructor(error: unknown) {\n        super(-32002, 'Resource unavailable', error);\n    }\n}\n\nexport class SwitchChainError extends ProviderRpcError {\n    name = 'SwitchChainError';\n\n    constructor(error: unknown) {\n        super(4902, 'Error switching chain', error);\n    }\n}\n\nexport class UserRejectedRequestError extends ProviderRpcError {\n    name = 'UserRejectedRequestError';\n\n    constructor(error: unknown) {\n        super(4001, 'User rejected request', error);\n    }\n}\n", "import type { AuthCoreModalOptions } from '@particle-network/auth-core-modal';\nimport type { Chain, ChainInfo } from '@particle-network/chains';\nimport type { Connector, ParticleConnector } from '../providers/connectors/base';\n\nexport interface Account {\n    id: string;\n    publicAddress: string;\n    name?: string;\n    icon?: string;\n}\n\nexport interface WalletInfo {\n    publicAddress: string;\n    privateKey: string;\n    mnemonic?: string;\n}\n\nexport enum WalletReadyState {\n    /**\n     * User-installable wallets can typically be detected by scanning for an API\n     * that they've injected into the global context. If such an API is present,\n     * we consider the wallet to have been installed.\n     */\n    Installed = 'Installed',\n    NotDetected = 'NotDetected',\n    /**\n     * Loadable wallets are always available to you. Since you can load them at\n     * any time, it's meaningless to say that they have been detected.\n     */\n    Loadable = 'Loadable',\n    /**\n     * If a wallet is not supported on a given platform (eg. server-rendering, or\n     * mobile) then it will stay in the `Unsupported` state.\n     */\n    Unsupported = 'Unsupported',\n}\n\nexport type ConnectConfig = Omit<AuthCoreModalOptions, 'themeType' | 'language'> & {\n    chains: Chain[] | ChainInfo[];\n    connectors?: Wallet[];\n};\n\nexport interface JsonRpcRequest {\n    id: number | string;\n    jsonrpc: string;\n    method: string;\n    params?: unknown;\n}\n\nexport interface EVMProvider {\n    on(event: string, listener: any): this;\n\n    once(event: string, listener: any): this;\n\n    off(event: string, listener: any): this;\n\n    removeListener(event: string, listener: any): this;\n\n    request(request: Partial<JsonRpcRequest>): Promise<any>;\n\n    disconnect?(): Promise<void>;\n\n    enable?(): Promise<string[]>;\n}\n\nexport interface PublicKey {\n    toBase58(): string;\n    toJSON(): string;\n    /**\n     * Return the byte array representation of the public key\n     */\n    toBytes(): Uint8Array;\n    /**\n     * Return the Buffer representation of the public key\n     */\n    toBuffer(): Buffer;\n    /**\n     * Return the base-58 representation of the public key\n     */\n    toString(): string;\n}\n\nexport type Commitment =\n    | 'processed'\n    | 'confirmed'\n    | 'finalized'\n    | 'recent'\n    | 'single'\n    | 'singleGossip'\n    | 'root'\n    | 'max';\n\nexport type SendOptions = {\n    /** disable transaction verification step */\n    skipPreflight?: boolean;\n    /** preflight commitment level */\n    preflightCommitment?: Commitment;\n    /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n    maxRetries?: number;\n    /** The minimum slot that the request can be evaluated at */\n    minContextSlot?: number;\n};\n\nexport interface SolanaProvider {\n    publicKey: PublicKey | null | (() => Promise<PublicKey | null>);\n\n    on(event: string, listener: any): this;\n\n    once(event: string, listener: any): this;\n\n    off(event: string, listener: any): this;\n\n    removeListener(event: string, listener: any): this;\n\n    connect(): Promise<void>;\n\n    disconnect(): Promise<void>;\n\n    signAndSendTransaction(transaction: unknown, options?: SendOptions): Promise<string>;\n\n    signTransaction(transaction: unknown): Promise<any>;\n\n    signAllTransactions(transaction: unknown[]): Promise<any[]>;\n\n    signMessage(message: Uint8Array): Promise<Uint8Array>;\n}\n\nexport type Provider = EVMProvider | SolanaProvider;\n\nexport interface ConnectorMap {\n    [id: string]: Connector;\n}\n\nexport interface ParticleConnectorMap {\n    [id: string]: ParticleConnector;\n}\n\nexport interface IConnectDisplay {\n    name: string;\n    icon: string;\n    url: string;\n}\n\nexport interface IProviderInfo {\n    id: string;\n    name: string;\n    logo: string;\n    type: string;\n    check: string;\n}\n\nexport interface IInjectedProvidersMap {\n    injectedAvailable: boolean;\n    [isProviderName: string]: boolean;\n}\n\nexport interface DownloadUrls {\n    browserExtension?: string;\n    qrCode?: string;\n}\n\nexport type Wallet<C = ParticleConnector> = {\n    id: string;\n    name: string;\n    iconUrl: string;\n    downloadUrls?: DownloadUrls;\n    createConnector: (chains?: Chain[]) => C;\n};\n\nexport type WalletMeta = Omit<Wallet, 'createConnector'>;\n\nexport type WalletList = { groupName: string; wallets: Wallet[] }[];\n", "import type { ParticleConnector } from '../providers/connectors/base';\nimport { getStorage, PARTICLE_CONNECT_CACHED_PROVIDER, setStorage } from '../storage';\nimport type { ConnectConfig } from '../types';\n\nclass ConnectController {\n    config!: ConnectConfig;\n\n    init(config: ConnectConfig) {\n        this.config = config;\n    }\n\n    public createConnector(id: string): ParticleConnector {\n        const wallets = this.config.connectors;\n        if (wallets) {\n            const wallet = wallets.find((wallet) => wallet.id === id);\n            if (wallet) {\n                // \u4FEE\u6539\n                const particleConnector = wallet.createConnector();\n                return particleConnector;\n            }\n        }\n        throw new Error('wallet id not found');\n    }\n\n    public setCachedProvider(id?: string) {\n        setStorage(PARTICLE_CONNECT_CACHED_PROVIDER, id);\n    }\n\n    public getCachedProvider(): string | null {\n        return getStorage(PARTICLE_CONNECT_CACHED_PROVIDER);\n    }\n}\n\nconst controller = new ConnectController();\n\nexport default controller;\n", "export function isAndroid(): boolean {\n    return typeof navigator !== 'undefined' && /android/i.test(navigator.userAgent);\n}\n\nexport function isSmallIOS(): boolean {\n    return typeof navigator !== 'undefined' && /iPhone|iPod/.test(navigator.userAgent);\n}\n\nexport function isLargeIOS(): boolean {\n    return typeof navigator !== 'undefined' && /iPad/.test(navigator.userAgent);\n}\n\nexport function isIOS(): boolean {\n    return isSmallIOS() || isLargeIOS();\n}\n\nexport function isMobile(): boolean {\n    return isAndroid() || isIOS();\n}\n", "import BitkeepLogo from '../logos/bitkeepwallet.png';\nimport BitpieLogo from '../logos/bitpie.svg';\nimport BlockWalletLogo from '../logos/blockwallet.svg';\nimport BoltXLogo from '../logos/boltx.svg';\nimport BraveLogo from '../logos/brave.svg';\nimport CeloExtensionWalletLogo from '../logos/celoExtensionWallet.svg';\nimport CipherLogo from '../logos/cipher.svg';\nimport ClvLogo from '../logos/clv.svg';\nimport CoinbaseLogo from '../logos/coinbase.svg';\nimport CoreLogo from '../logos/core.svg';\nimport DapperLogo from '../logos/dapper.png';\nimport FrameLogo from '../logos/frame.svg';\nimport GameStopLogo from '../logos/gamestopwallet.svg';\nimport imTokenLogo from '../logos/imtoken.svg';\nimport LiqualityLogo from '../logos/liquality.png';\nimport MathWalletLogo from '../logos/mathwallet.svg';\nimport MetaMaskLogo from '../logos/metamask.svg';\nimport NiftyWalletLogo from '../logos/niftyWallet.png';\nimport ParticleLogo from '../logos/particle.svg';\nimport PortalLogo from '../logos/portal.svg';\nimport RabbyLogo from '../logos/rabby.svg';\nimport RWalletLogo from '../logos/rwallet.svg';\nimport SafeLogo from '../logos/safe.svg';\nimport SafePalLogo from '../logos/safepal.svg';\nimport SequenceLogo from '../logos/sequence.svg';\nimport StatusLogo from '../logos/status.svg';\nimport TallyLogo from '../logos/tally.svg';\nimport TokenaryLogo from '../logos/tokenary.png';\nimport TokenPocketLogo from '../logos/tokenpocket.svg';\nimport TrustLogo from '../logos/trust.svg';\nimport XDEFILogo from '../logos/xdefi.svg';\n\nimport type { IProviderInfo } from 'src/types/types';\n\nexport const METAMASK: IProviderInfo = {\n    id: 'injected',\n    name: 'MetaMask',\n    logo: MetaMaskLogo,\n    type: 'injected',\n    check: 'isMetaMask',\n};\n\nexport const SAFE: IProviderInfo = {\n    id: 'injected',\n    name: 'Safe',\n    logo: SafeLogo,\n    type: 'injected',\n    check: 'isSafe',\n};\n\nexport const SAFEPAL: IProviderInfo = {\n    id: 'injected',\n    name: 'SafePal',\n    logo: SafePalLogo,\n    type: 'injected',\n    check: 'isSafePal',\n};\n\nexport const NIFTY: IProviderInfo = {\n    id: 'injected',\n    name: 'Nifty',\n    logo: NiftyWalletLogo,\n    type: 'injected',\n    check: 'isNiftyWallet',\n};\n\nexport const DAPPER: IProviderInfo = {\n    id: 'injected',\n    name: 'Dapper',\n    logo: DapperLogo,\n    type: 'injected',\n    check: 'isDapper',\n};\n\nexport const TRUST: IProviderInfo = {\n    id: 'injected',\n    name: 'Trust',\n    logo: TrustLogo,\n    type: 'injected',\n    check: 'isTrust',\n};\n\nexport const COINBASE: IProviderInfo = {\n    id: 'injected',\n    name: 'Coinbase',\n    logo: CoinbaseLogo,\n    type: 'injected',\n    check: 'isCoinbaseWallet',\n};\n\nexport const CIPHER: IProviderInfo = {\n    id: 'injected',\n    name: 'Cipher',\n    logo: CipherLogo,\n    type: 'injected',\n    check: 'isCipher',\n};\n\nexport const IMTOKEN: IProviderInfo = {\n    id: 'injected',\n    name: 'imToken',\n    logo: imTokenLogo,\n    type: 'injected',\n    check: 'isImToken',\n};\n\nexport const STATUS: IProviderInfo = {\n    id: 'injected',\n    name: 'Status',\n    logo: StatusLogo,\n    type: 'injected',\n    check: 'isStatus',\n};\n\nexport const TOKENARY: IProviderInfo = {\n    id: 'injected',\n    name: 'Tokenary',\n    logo: TokenaryLogo,\n    type: 'injected',\n    check: 'isTokenary',\n};\n\nexport const FRAMEINJECTED: IProviderInfo = {\n    id: 'injected',\n    name: 'Frame',\n    logo: FrameLogo,\n    type: 'injected',\n    check: 'isFrame',\n};\n\nexport const LIQUALITY: IProviderInfo = {\n    id: 'injected',\n    name: 'Liquality',\n    logo: LiqualityLogo,\n    type: 'injected',\n    check: 'isLiquality',\n};\n\nexport const BOLTX: IProviderInfo = {\n    id: 'boltx',\n    name: 'Bolt-X',\n    logo: BoltXLogo,\n    type: 'injected',\n    check: 'isBoltX',\n};\n\nexport const MATHWALLET: IProviderInfo = {\n    id: 'injected',\n    name: 'Math Wallet',\n    logo: MathWalletLogo,\n    type: 'injected',\n    check: 'isMathWallet',\n};\n\nexport const RWALLET: IProviderInfo = {\n    id: 'injected',\n    name: 'rWallet',\n    logo: RWalletLogo,\n    type: 'injected',\n    check: 'isRWallet',\n};\n\nexport const XDEFI: IProviderInfo = {\n    id: 'injected',\n    name: 'XDEFI',\n    logo: XDEFILogo,\n    type: 'injected',\n    check: '__XDEFI',\n};\n\nexport const BITPIE: IProviderInfo = {\n    id: 'injected',\n    name: 'Bitpie',\n    logo: BitpieLogo,\n    type: 'injected',\n    check: 'isBitpie',\n};\n\nexport const CELOINJECTED: IProviderInfo = {\n    id: 'injected',\n    name: 'Celo extension wallet',\n    logo: CeloExtensionWalletLogo,\n    type: 'injected',\n    check: 'isCelo',\n};\n\nexport const BLOCKWALLET: IProviderInfo = {\n    id: 'injected',\n    name: 'BlockWallet',\n    logo: BlockWalletLogo,\n    type: 'injected',\n    check: 'isBlockWallet',\n};\n\nexport const TALLYINJECTED: IProviderInfo = {\n    id: 'injected',\n    name: 'Tally',\n    logo: TallyLogo,\n    type: 'injected',\n    check: 'isTally',\n};\n\nexport const PORTAL: IProviderInfo = {\n    id: 'injected',\n    name: 'Ripio Portal',\n    logo: PortalLogo,\n    type: 'injected',\n    check: 'isPortal',\n};\n\nexport const SEQUENCEINJECTED: IProviderInfo = {\n    id: 'injected',\n    name: 'Sequence',\n    logo: SequenceLogo,\n    type: 'injected',\n    check: 'isSequence',\n};\n\nexport const RABBY: IProviderInfo = {\n    id: 'injected',\n    name: 'Rabby',\n    logo: RabbyLogo,\n    type: 'injected',\n    check: 'isRabby',\n};\n\nexport const BRAVE: IProviderInfo = {\n    id: 'injected',\n    name: 'Brave',\n    logo: BraveLogo,\n    type: 'injected',\n    check: 'isBraveWallet',\n};\n\nexport const CLV: IProviderInfo = {\n    id: 'injected',\n    name: 'CLV',\n    logo: ClvLogo,\n    type: 'injected',\n    check: 'isCloverWallet',\n};\n\nexport const BITKEEPWALLET: IProviderInfo = {\n    id: 'injected',\n    name: 'Bitkeep Wallet',\n    logo: BitkeepLogo,\n    type: 'injected',\n    check: 'isBitKeep',\n};\n\nexport const CORE: IProviderInfo = {\n    id: 'injected',\n    name: 'Core',\n    logo: CoreLogo,\n    type: 'injected',\n    check: 'isAvalanche',\n};\n\nexport const TOKENPOCKET: IProviderInfo = {\n    id: 'injected',\n    name: 'TokenPocket Wallet',\n    logo: TokenPocketLogo,\n    type: 'injected',\n    check: 'isTokenPocket',\n};\n\nexport const GAMESTOP: IProviderInfo = {\n    id: 'injected',\n    name: 'GameStop Wallet',\n    logo: GameStopLogo,\n    type: 'injected',\n    check: 'isGamestop',\n};\n\nexport const PARTICLE: IProviderInfo = {\n    id: 'injected',\n    name: 'Particle',\n    logo: ParticleLogo,\n    type: 'injected',\n    check: 'isParticle',\n};\n", "import { injected } from '../providers';\nimport InjectedLogo from '../providers/logos/injected.png';\nimport type { EVMProvider, IInjectedProvidersMap, IProviderInfo, Provider, SolanaProvider } from '../types';\n\nexport async function getPublicAddress(provider: Provider): Promise<string> {\n    let account;\n    if (isEVMProvider(provider)) {\n        console.log('evm get account');\n        const accounts = await provider.request({ method: 'eth_accounts' });\n        account = accounts[0];\n    } else {\n        console.log('solana get publicKey');\n        if (typeof provider.publicKey === 'function') {\n            account = (await provider.publicKey())?.toBase58();\n        } else {\n            account = provider.publicKey?.toBase58();\n        }\n    }\n    return account;\n}\n\nexport async function getChainId(provider: Provider): Promise<number> {\n    let chainId;\n    if (isEVMProvider(provider)) {\n        const id = await provider.request({ method: 'eth_chainId' });\n        chainId = Number(id);\n    } else {\n        // solana default 101\n        chainId = 101;\n    }\n    return chainId;\n}\n\nexport function isEVMProvider(provider: Provider): provider is EVMProvider {\n    return (\n        typeof (provider as EVMProvider)['request'] !== 'undefined' &&\n        typeof (provider as any)['publicKey'] === 'undefined'\n    );\n}\n\nexport function isSolanaProvider(provider: Provider): provider is SolanaProvider {\n    return typeof (provider as SolanaProvider)['publicKey'] !== 'undefined';\n}\n\nexport function checkInjectedProviders(): IInjectedProvidersMap {\n    if (typeof window === 'undefined') {\n        return {\n            injectedAvailable: false,\n        };\n    }\n\n    const result = {\n        injectedAvailable: typeof window !== 'undefined' && !!window.ethereum,\n    };\n    if (result.injectedAvailable) {\n        Object.values(injected).forEach((provider) => {\n            const isAvailable = verifyInjectedProvider(provider.check);\n            if (isAvailable) {\n                result[provider.check] = true;\n            }\n        });\n    }\n\n    return result;\n}\n\nexport function verifyInjectedProvider(check: string): boolean {\n    if (typeof window === 'undefined') {\n        return false;\n    }\n    return typeof window !== 'undefined' && window.ethereum && window.ethereum[check];\n}\n\nexport function getInjectedProvider(): IProviderInfo[] | undefined {\n    let result: IProviderInfo[] | undefined;\n    const injectedProviders = checkInjectedProviders();\n    if (injectedProviders.injectedAvailable) {\n        const { injectedAvailable, ...providers } = injectedProviders;\n        const checks = Object.keys(providers);\n        if (checks.length > 0) {\n            result = getProviderInfoFromChecksArray(checks);\n        } else {\n            result = [\n                {\n                    id: 'injected',\n                    name: 'Injected Wallet',\n                    logo: InjectedLogo,\n                    type: 'injected',\n                    check: '',\n                },\n            ];\n        }\n    }\n    return result;\n}\n\nexport function getProviderInfoFromChecksArray(checks: string[]): IProviderInfo[] | undefined {\n    return Object.values(injected).filter((info) => checks.includes(info.check));\n}\n", "import {\n    argent,\n    bitkeep,\n    coinbase,\n    injectedEVM,\n    mathwallet,\n    metaMask,\n    okx,\n    omni,\n    onto,\n    phantom,\n    rainbow,\n    safepal,\n    tokenpocket,\n    trust,\n    walletconnect,\n} from '../providers/connectors';\nimport type { SolanaWalletConfig } from '../providers/connectors/wallet-adapter';\nimport type { WalletConnectOptions } from '../providers/connectors/wallet-connect-v2';\nimport { BITKEEPWALLET, COINBASE, MATHWALLET, METAMASK, SAFEPAL, TOKENPOCKET, TRUST } from '../providers/injected';\nimport type { Wallet } from '../types';\nimport { getInjectedProvider } from './provider-utils';\n\nexport function evmWallets(options: Omit<WalletConnectOptions, 'chains'>): Wallet[] {\n    const wallets = [\n        metaMask({ ...options, showQrModal: false }),\n        walletconnect(options),\n        rainbow({ ...options, showQrModal: false }),\n        trust({ ...options, showQrModal: false }),\n        coinbase(),\n        argent({ ...options, showQrModal: false }),\n        omni({ ...options, showQrModal: false }),\n        okx({ ...options, showQrModal: false }),\n        bitkeep({ ...options, showQrModal: false }),\n        mathwallet({ ...options, showQrModal: false }),\n        safepal({ ...options, showQrModal: false }),\n        tokenpocket({ ...options, showQrModal: false }),\n        onto({ ...options, showQrModal: false }),\n    ];\n    const providerInfos = getInjectedProvider();\n    if (providerInfos && providerInfos.length > 0) {\n        providerInfos\n            .filter((providerInfo) => {\n                return (\n                    providerInfo.check != TOKENPOCKET.check &&\n                    providerInfo.check != SAFEPAL.check &&\n                    providerInfo.check != MATHWALLET.check &&\n                    providerInfo.check != BITKEEPWALLET.check &&\n                    providerInfo.check != METAMASK.check &&\n                    providerInfo.check != TRUST.check &&\n                    providerInfo.check != COINBASE.check\n                );\n            })\n            .forEach((providerInfo) => {\n                wallets.unshift(\n                    injectedEVM({\n                        id: providerInfo.id,\n                        name: providerInfo.name,\n                        iconUrl: providerInfo.logo,\n                    })\n                );\n            });\n    }\n    return wallets;\n}\n\nexport function solanaWallets(config?: SolanaWalletConfig): Wallet[] {\n    const wallets = [phantom()];\n    return wallets;\n}\n\nexport function evmInjectedWallet(): Wallet[] | undefined {\n    const providerInfos = getInjectedProvider();\n    if (providerInfos && providerInfos.length > 0) {\n        return providerInfos.map((providerInfo) =>\n            injectedEVM({\n                id: providerInfo.id,\n                name: providerInfo.name,\n                iconUrl: providerInfo.logo,\n            })\n        );\n    }\n    return undefined;\n}\n", "export function isMetaMask(ethereum: NonNullable<typeof window['ethereum']>): boolean {\n    // Logic borrowed from wagmi's MetaMaskConnector\n    // https://github.com/tmm/wagmi/blob/main/packages/core/src/connectors/metaMask.ts\n    const isMetaMask = Boolean(ethereum.isMetaMask);\n\n    if (!isMetaMask) {\n        return false;\n    }\n\n    // Brave tries to make itself look like MetaMask\n    // Could also try RPC `web3_clientVersion` if following is unreliable\n    if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) {\n        return false;\n    }\n\n    if (ethereum.isApexWallet) return false;\n    if (ethereum.isAvalanche) return false;\n    if (ethereum.isBackpack) return false;\n    if (ethereum.isBifrost) return false;\n    if (ethereum.isBitKeep) return false;\n    if (ethereum.isBitski) return false;\n    if (ethereum.isBlockWallet) return false;\n    if (ethereum.isCoinbaseWallet) return false;\n    if (ethereum.isDawn) return false;\n    if (ethereum.isEnkrypt) return false;\n    if (ethereum.isExodus) return false;\n    if (ethereum.isFrame) return false;\n    if (ethereum.isFrontier) return false;\n    if (ethereum.isGamestop) return false;\n    if (ethereum.isHyperPay) return false;\n    if (ethereum.isImToken) return false;\n    if (ethereum.isKuCoinWallet) return false;\n    if (ethereum.isMathWallet) return false;\n    if (ethereum.isOkxWallet || ethereum.isOKExWallet) return false;\n    if (ethereum.isOneInchIOSWallet || ethereum.isOneInchAndroidWallet) return false;\n    if (ethereum.isOpera) return false;\n    if (ethereum.isPhantom) return false;\n    if (ethereum.isPortal) return false;\n    if (ethereum.isRabby) return false;\n    if (ethereum.isRainbow) return false;\n    if (ethereum.isStatus) return false;\n    if (ethereum.isTally) return false;\n    if (ethereum.isTokenPocket) return false;\n    if (ethereum.isTokenary) return false;\n    if (ethereum.isTrust || ethereum.isTrustWallet) return false;\n    if (ethereum.isXDEFI) return false;\n    if (ethereum.isZerion) return false;\n\n    return true;\n}\n\nexport function isMetaMaskInjected(): boolean {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' && isMetaMask(window.ethereum);\n}\n", "import controller from '../core/connect-controller';\n\nexport function getParticleEnv(): 'production' | 'staging' | 'development' {\n    if (typeof window !== 'undefined') {\n        if (window.__PARTICLE_ENVIRONMENT__ === 'staging' || window.__PARTICLE_ENVIRONMENT__ === 'development') {\n            return window.__PARTICLE_ENVIRONMENT__;\n        }\n    }\n    return 'production';\n}\n\nconst rpcUrl = (): string => {\n    const productionApi = 'https://rpc.particle.network';\n    const developmentApi = 'https://rpc-debug.particle.network';\n    const env = getParticleEnv();\n    return env === 'development' ? developmentApi : productionApi;\n};\n\nexport function getEVMRpcUrl(chainId: number | string): string {\n    if (typeof window === 'undefined') {\n        return '';\n    }\n    return `${rpcUrl()}/evm-chain?chainId=${Number(chainId)}&projectUuid=${controller.config.projectId}&projectKey=${\n        controller.config.clientKey\n    }`;\n}\n\nexport function getSolanaRpcUrl(chainId: number | string): string {\n    if (typeof window === 'undefined') {\n        return '';\n    }\n    return `${rpcUrl()}/solana?chainId=${Number(chainId)}&projectUuid=${controller.config.projectId}&projectKey=${\n        controller.config.clientKey\n    }`;\n}\n", "import EthereumProvider, {\n    OPTIONAL_EVENTS,\n    OPTIONAL_METHODS,\n    REQUIRED_EVENTS,\n    REQUIRED_METHODS,\n} from '@walletconnect/ethereum-provider';\nimport type { EthereumProviderOptions } from '@walletconnect/ethereum-provider/dist/types/EthereumProvider';\nimport {\n    SwitchChainError,\n    UserRejectedRequestError,\n    getChainInfo,\n    type Chain,\n    type EVMProvider,\n    type ProviderRpcError,\n} from '../../types';\nimport { getEVMRpcUrl } from '../../utils';\nimport { EVMConnector } from './base';\n\nexport type WalletConnectOptions = {\n    /**\n     * WalletConnect Cloud Project ID.\n     * @link https://cloud.walletconnect.com/sign-in.\n     */\n    projectId: EthereumProviderOptions['projectId'];\n    /**\n     * Metadata for your app.\n     * @link https://docs.walletconnect.com/2.0/javascript/providers/ethereum#initialization\n     */\n    metadata?: EthereumProviderOptions['metadata'];\n    /**\n     * Whether or not to show the QR code modal.\n     * @default true\n     * @link https://docs.walletconnect.com/2.0/javascript/providers/ethereum#initialization\n     */\n    showQrModal?: EthereumProviderOptions['showQrModal'];\n    /**\n     * Options of QR code modal.\n     * @link https://docs.walletconnect.com/2.0/web3modal/options\n     */\n    qrModalOptions?: EthereumProviderOptions['qrModalOptions'];\n\n    chains?: Chain[];\n\n    /**\n     * @default true\n     */\n    isNewChainsStale?: boolean;\n};\n\nconst NAMESPACE = 'eip155';\nconst REQUESTED_CHAINS_KEY = 'wc_requestedChains';\nconst ADD_ETH_CHAIN_METHOD = 'wallet_addEthereumChain';\n\nexport default class WalletConnectV2Connector extends EVMConnector {\n    #provider?: EthereumProvider;\n    #initProviderPromise?: Promise<void>;\n    #chains: Chain[];\n\n    readonly options: WalletConnectOptions;\n\n    constructor(options: WalletConnectOptions) {\n        const optionsCompat = { isNewChainsStale: true, showQrModal: true, ...options };\n        super(optionsCompat);\n        this.options = optionsCompat;\n        if (this.options.chains) {\n            this.#chains = this.options.chains;\n        } else {\n            this.#chains = [{ name: 'ethereum', id: 1 }];\n        }\n        this.#createProvider();\n    }\n\n    async connect(): Promise<EVMProvider> {\n        try {\n            const provider = await this.getProvider();\n            this.#setupListeners();\n            console.log('walletconnect provider session', provider.session);\n            const isChainsStale = this.#isChainsStale();\n            console.log('walletconnect connect', isChainsStale, provider.session);\n            // If there is an active session with stale chains, disconnect the current session.\n            if (provider.session && isChainsStale) await provider.disconnect();\n\n            // If there no active session, or the chains are stale, connect.\n            if (!provider.session || isChainsStale) {\n                const [defaultChain, ...optionalChains] = this.#chains.map(({ id }) => id);\n\n                this.emit('message', { type: 'connecting' });\n\n                await provider.connect({\n                    chains: [defaultChain],\n                    optionalChains,\n                });\n\n                this.#setRequestedChainsIds(this.#chains.map(({ id }) => id));\n            }\n\n            // If session exists and chains are authorized, enable provider for required chain\n            await provider.enable();\n            this.provider = provider;\n            return this.provider;\n        } catch (error) {\n            console.error('walletconnect v2 connect error', error);\n            if (/user rejected/i.test((error as ProviderRpcError)?.message)) {\n                throw new UserRejectedRequestError(error as Error);\n            }\n            throw error;\n        }\n    }\n\n    async disconnect() {\n        const provider = await this.getProvider();\n        try {\n            await provider.disconnect();\n        } catch (error) {\n            if (!/No matching key/i.test((error as Error).message)) throw error;\n        } finally {\n            this.#removeListeners();\n            this.#setRequestedChainsIds([]);\n        }\n        this.provider = undefined;\n    }\n\n    switchChain = async (chainId: number): Promise<void> => {\n        const chain = this.#chains.find((chain) => chain.id === chainId);\n        if (!chain) throw new SwitchChainError('chain not found on connector.');\n        const chainInfo = getChainInfo(chain);\n        if (!chainInfo) {\n            throw new Error(`chain not supported, ${chainId}`);\n        }\n\n        try {\n            const provider = await this.getProvider();\n            const namespaceChains = this.#getNamespaceChainsIds();\n            const namespaceMethods = this.#getNamespaceMethods();\n            const isChainApproved = namespaceChains.includes(chainId);\n\n            if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n                const params = {\n                    chainId: `0x${chainInfo.id.toString(16)}`,\n                    chainName: chainInfo.fullname,\n                    nativeCurrency: chainInfo.nativeCurrency,\n                    rpcUrls: [getEVMRpcUrl(chainInfo.id)],\n                    blockExplorerUrls: [chainInfo.blockExplorerUrl],\n                };\n                if (!chainInfo.blockExplorerUrl) {\n                    // @ts-ignore\n                    delete params.blockExplorerUrls;\n                }\n                console.log(ADD_ETH_CHAIN_METHOD, params);\n                await provider.request({\n                    method: ADD_ETH_CHAIN_METHOD,\n                    params: [params],\n                });\n                const requestedChains = this.#getRequestedChainsIds();\n                requestedChains.push(chainId);\n                this.#setRequestedChainsIds(requestedChains);\n            }\n            console.log('wallet_switchEthereumChain', chainId);\n            await provider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: `0x${chainId.toString(16)}` }],\n            });\n        } catch (error) {\n            console.error('walletconnect v2 switchChain', error);\n            const message = typeof error === 'string' ? error : (error as ProviderRpcError)?.message;\n            if (/user rejected request/i.test(message)) {\n                throw new UserRejectedRequestError(error as Error);\n            }\n            throw new SwitchChainError(error as Error);\n        }\n    };\n\n    async getProvider(): Promise<EthereumProvider> {\n        if (!this.#provider) await this.#createProvider();\n        return this.#provider!;\n    }\n\n    async #createProvider() {\n        if (!this.#initProviderPromise && typeof window !== 'undefined') {\n            this.#initProviderPromise = this.#initProvider();\n        }\n        return this.#initProviderPromise;\n    }\n\n    async #initProvider() {\n        const { projectId, showQrModal, qrModalOptions, metadata } = this.options;\n        const [defaultChain, ...optionalChains] = this.#chains.map(({ id }) => id);\n        const rpcMap = {};\n        this.#chains.forEach(({ id }) => {\n            rpcMap[id.toString()] = getEVMRpcUrl(id);\n        });\n        this.#provider = await EthereumProvider.init({\n            projectId,\n            chains: [defaultChain],\n            optionalChains: optionalChains,\n            methods: REQUIRED_METHODS,\n            optionalMethods: OPTIONAL_METHODS,\n            events: REQUIRED_EVENTS,\n            optionalEvents: OPTIONAL_EVENTS,\n            rpcMap,\n            metadata,\n            showQrModal: showQrModal ?? true,\n            qrModalOptions: {\n                ...qrModalOptions,\n                themeVariables: {\n                    ...qrModalOptions?.themeVariables,\n                    '--wcm-z-index': '3000',\n                },\n            },\n        });\n    }\n\n    #setupListeners() {\n        if (!this.#provider) return;\n        this.#removeListeners();\n        this.#provider.on('accountsChanged', this.onAccountsChanged);\n        this.#provider.on('chainChanged', this.onChainChanged);\n        this.#provider.on('disconnect', this.onDisconnect);\n        this.#provider.on('session_delete', this.onDisconnect);\n        this.#provider.on('display_uri', this.onDisplayUri);\n    }\n\n    #removeListeners() {\n        if (!this.#provider) return;\n        this.#provider.removeListener('accountsChanged', this.onAccountsChanged);\n        this.#provider.removeListener('chainChanged', this.onChainChanged);\n        this.#provider.removeListener('disconnect', this.onDisconnect);\n        this.#provider.removeListener('session_delete', this.onDisconnect);\n        this.#provider.removeListener('display_uri', this.onDisplayUri);\n    }\n\n    #isChainsStale() {\n        const namespaceMethods = this.#getNamespaceMethods();\n        if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) return false;\n        if (!this.options.isNewChainsStale) return false;\n\n        const requestedChains = this.#getRequestedChainsIds();\n        const connectorChains = this.#chains.map(({ id }) => id);\n        const namespaceChains = this.#getNamespaceChainsIds();\n\n        if (namespaceChains.length && !namespaceChains.some((id) => connectorChains.includes(id))) return false;\n\n        return !connectorChains.every((id) => requestedChains.includes(id));\n    }\n\n    #setRequestedChainsIds(chains: number[]) {\n        localStorage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n    }\n\n    #getRequestedChainsIds(): number[] {\n        return JSON.parse(localStorage.getItem(REQUESTED_CHAINS_KEY) ?? '[]');\n    }\n\n    #getNamespaceChainsIds() {\n        if (!this.#provider) return [];\n        const chainIds = this.#provider.session?.namespaces[NAMESPACE]?.chains?.map((chain) =>\n            parseInt(chain.split(':')[1] || '')\n        );\n        return chainIds ?? [];\n    }\n\n    #getNamespaceMethods() {\n        if (!this.#provider) return [];\n        const methods = this.#provider.session?.namespaces[NAMESPACE]?.methods;\n        return methods ?? [];\n    }\n\n    private onAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n            this.provider = undefined;\n        }\n        this.emit('accountsChanged', accounts);\n    };\n\n    private onChainChanged = (chainId: string) => {\n        this.emit('chainChanged', chainId);\n    };\n\n    private onDisconnect = () => {\n        if (this.provider) {\n            this.provider = undefined;\n            this.emit('disconnect');\n        }\n    };\n\n    private onDisplayUri = (uri: string) => {\n        console.log('\uD83D\uDE80 ~ file: wallet-connect-v2.ts:275 ~ WalletConnectV2Connector ~ uri:', uri);\n        //wc:a4f53c62bea235869099b52919bfe7d02a21ce3f011b59b29e41d821b55b0116@2?relay-protocol=irn&symKey=752d3e182219522f61842c7027fa8ff94e743c53bfba38b82c74bd36451f658b\n        if (!this.options.showQrModal) {\n            this.emit('message', { type: 'display_uri', data: uri });\n        }\n    };\n}\n", "import EventEmitter from 'eventemitter3';\nimport type { EVMProvider, Provider, ProviderRpcError, SolanaProvider } from '../../types';\nimport { AddChainError, SwitchChainError, UserRejectedRequestError } from '../../types';\nimport { getChainInfo, getEVMChainById } from '../../types/chains';\n\nexport interface ConnecterEvents {\n    connect(): void;\n    disconnect(): void;\n    chainChanged(chainId: string): void;\n    accountsChanged(accounts: string[]): void;\n    message(message: any): void;\n}\n\nexport type ConnectKitConnector<C extends Connector = Connector> = {\n    connector: C;\n    mobile?: {\n        getUri?: () => Promise<string>;\n    };\n    qrCode: () => Promise<string>;\n};\n\nexport abstract class Connector extends EventEmitter<ConnecterEvents> {\n    provider: Provider | undefined;\n    constructor(options?: any) {\n        super();\n    }\n    abstract connect(): Promise<Provider>;\n    abstract disconnect(): Promise<void>;\n}\n\nexport abstract class SolanaConnector extends Connector {\n    declare provider: SolanaProvider | undefined;\n}\n\nexport abstract class EVMConnector extends Connector {\n    declare provider: EVMProvider | undefined;\n\n    isSwitchChain?: boolean;\n\n    switchChain? = async (chainId: number): Promise<void> => {\n        if (!this.provider) {\n            throw new Error('wallet not connect');\n        }\n        const providerChainId = await this.provider.request({ method: 'eth_chainId' });\n        if (chainId === Number(providerChainId)) {\n            return;\n        }\n        const chain = getEVMChainById(chainId);\n        if (!chain) {\n            throw new Error(`chain not supported, ${chainId}`);\n        }\n        const chainInfo = getChainInfo(chain);\n        if (!chainInfo) {\n            throw new Error('chain not supported');\n        }\n        this.isSwitchChain = true;\n        console.log('switchChain:', this.isSwitchChain);\n        const id = `0x${chain.id.toString(16)}`;\n        try {\n            await this.provider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: id }],\n            });\n            return;\n        } catch (error: any) {\n            console.log('EVM SwitchChain error', error);\n            // Indicates chain is not added to provider\n            if (\n                error.code === 4902 ||\n                ((error.code === -32000 || error.code === -32603) &&\n                    error.message &&\n                    error.message.startsWith('Unrecognized chain ID'))\n            ) {\n                try {\n                    const params = {\n                        chainId: id,\n                        chainName: chainInfo.fullname,\n                        nativeCurrency: chainInfo.nativeCurrency,\n                        rpcUrls: [chainInfo.rpcUrl],\n                        blockExplorerUrls: [chainInfo.blockExplorerUrl],\n                    };\n\n                    if (!chainInfo.blockExplorerUrl) {\n                        // @ts-ignore\n                        delete params.blockExplorerUrls;\n                    }\n                    await this.provider.request({\n                        method: 'wallet_addEthereumChain',\n                        params: [params],\n                    });\n                    return;\n                } catch (addError) {\n                    console.log('EVM AddEthereumChain error', addError);\n                    this.isSwitchChain = false;\n                    if (this.isUserRejectedRequestError(addError)) throw new UserRejectedRequestError(addError);\n                    throw new AddChainError();\n                }\n            }\n            if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n            throw new SwitchChainError(error);\n        }\n    };\n\n    private isUserRejectedRequestError(error: unknown) {\n        return (\n            (<ProviderRpcError>error).code === 4001 ||\n            (<ProviderRpcError>error).message.startsWith('User rejected the request')\n        );\n    }\n}\n\nexport interface ParticleConnector {\n    connector: Connector;\n    mobile?: {\n        getAppLinkUri?: () => string | undefined;\n        getUri?: () => Promise<string>;\n    };\n    qrCode?: {\n        getUri?: () => Promise<string>;\n    };\n}\n", "import type { Chain, Wallet } from '../../types';\nimport { isIOS } from '../../utils';\nimport WalletConnectLogo from '../logos/wallet_connect_icon.png';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\nimport WalletConnectV2Connector from './wallet-connect-v2';\n\ntype SerializedOptions = string;\nconst sharedConnectors = new Map<SerializedOptions, WalletConnectV2Connector>();\n\nfunction createConnector(options: WalletConnectOptions) {\n    const connector = new WalletConnectV2Connector(options);\n    sharedConnectors.set(JSON.stringify(options), connector);\n    return connector;\n}\n\nexport function getWalletConnectConnector(id: string, options: WalletConnectOptions, chains?: Chain[]) {\n    let config = isIOS() && id === 'walletconnect_v2' ? { ...options, showQrModal: true } : options;\n    const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n    config = { ...config, chains: evmChains };\n\n    const serializedOptions = JSON.stringify(config);\n    const sharedConnector = sharedConnectors.get(serializedOptions);\n    return sharedConnector ?? createConnector(config);\n}\n\nexport function walletconnect(options: Omit<WalletConnectOptions, 'chains'>): Wallet {\n    return {\n        id: 'walletconnect_v2',\n        name: 'WalletConnect',\n        iconUrl: WalletConnectLogo,\n        createConnector: (chains) => {\n            const connector = getWalletConnectConnector('walletconnect_v2', options, chains);\n            return {\n                connector,\n            };\n        },\n    };\n}\n", "import type { Wallet } from 'src/types/types';\nimport { isAndroid } from '../../utils/isMobile';\nimport ArgentLogo from '../logos/argent_icon.png';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport { type WalletConnectOptions } from './wallet-connect-v2';\n\nexport const argent = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'argent',\n    name: 'Argent',\n    iconUrl: ArgentLogo,\n    downloadUrls: {\n        qrCode: 'https://argent.link/app',\n    },\n    createConnector: (chains) => {\n        const connector = getWalletConnectConnector('argent', options, chains);\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: () => {\n                    //https://argent.link/app/wc?uri=${encodeURIComponent(uri)\n                    return isAndroid() ? undefined : 'argent://app/wc';\n                },\n            },\n        };\n    },\n});\n", "import type { Chain } from '@particle-network/chains';\nimport type { DownloadUrls, EVMProvider, Wallet } from '../../types/types';\nimport { EVMConnector } from './base';\nexport class InjectedConnector extends EVMConnector {\n    #getProvider;\n    constructor({ chains, getProvider }: { chains?: Chain[]; getProvider?: () => any }) {\n        super(chains);\n        this.#getProvider = getProvider;\n    }\n    async connect(): Promise<EVMProvider> {\n        const provider = await this.getProvider();\n        if (provider) {\n            if (provider.on && provider.off) {\n                provider.off('accountsChanged', this.onAccountsChanged);\n                provider.on('accountsChanged', this.onAccountsChanged);\n                provider.off('chainChanged', this.onChainChanged);\n                provider.on('chainChanged', this.onChainChanged);\n                provider.off('disconnect', this.onDisconnect);\n                provider.on('disconnect', this.onDisconnect);\n            }\n            this.emit('message', { type: 'connecting' });\n            await provider.request({ method: 'eth_requestAccounts' });\n\n            if (!provider.isMetaMask && !provider.isParticle && !provider.isTrust) {\n                this.switchChain = undefined;\n            }\n        } else {\n            throw new Error('No Web3 Provider found');\n        }\n        this.provider = provider;\n        return provider;\n    }\n\n    async disconnect(): Promise<void> {\n        this.provider?.off?.('accountsChanged', this.onAccountsChanged);\n        this.provider?.off?.('chainChanged', this.onChainChanged);\n        this.provider?.off?.('disconnect', this.onDisconnect);\n        this.provider = undefined;\n    }\n\n    async getProvider() {\n        return this.#getProvider ? this.#getProvider() : window.ethereum;\n    }\n\n    private onAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n            this.provider = undefined;\n        }\n        this.emit('accountsChanged', accounts);\n    };\n\n    private onChainChanged = (chainId: string) => {\n        this.emit('chainChanged', chainId);\n    };\n\n    private onDisconnect = () => {\n        this.provider = undefined;\n        this.emit('disconnect');\n    };\n}\n\nexport interface InjectedOptions {\n    id: string;\n    name: string;\n    iconUrl: string;\n    downloadUrls?: DownloadUrls;\n}\n\nexport const injectedEVM = (option?: InjectedOptions): Wallet => ({\n    id: option?.id ?? 'injected',\n    name: option?.name ?? 'Injected Wallet',\n    iconUrl: option?.iconUrl ?? '',\n    downloadUrls: option?.downloadUrls,\n    createConnector: (chains?: Chain[]) => {\n        return {\n            connector: new InjectedConnector({\n                chains: chains?.filter((chain) => chain.name.toLowerCase() !== 'solana'),\n            }),\n        };\n    },\n});\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport BitKeepLogo from '../logos/bitkeepwallet.png';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nfunction getWalletInjectedProvider(): Window['ethereum'] {\n    const isWallet = (ethereum: NonNullable<Window['ethereum']>) => {\n        // Identify if Wallet injected provider is present.\n        const wallet = !!ethereum.isBitKeep;\n\n        return wallet;\n    };\n\n    const injectedProviderExist = typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n\n    // No injected providers exist.\n    if (!injectedProviderExist) {\n        return;\n    }\n\n    // Trust Wallet was injected into window.ethereum.\n    if (isWallet(window.ethereum!)) {\n        return window.ethereum;\n    }\n\n    // Wallet provider might be replaced by another\n    // injected provider, check the providers array.\n    if (window.ethereum?.providers) {\n        // ethereum.providers array is a non-standard way to\n        // preserve multiple injected providers. Eventually, EIP-5749\n        // will become a living standard and we will have to update this.\n        return window.ethereum.providers.find(isWallet);\n    }\n}\n\nexport const bitkeep = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'bitkeep',\n    name: 'Bitget',\n    iconUrl: BitKeepLogo,\n    downloadUrls: {\n        qrCode: 'https://bitkeep.com/download',\n        browserExtension: 'https://bitkeep.com/download',\n    },\n    createConnector: (chains) => {\n        const provider = getWalletInjectedProvider();\n        const isWalletInjected = Boolean(provider);\n        const shouldUseWalletConnect = !isWalletInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('bitkeep', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => provider });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'bitkeep://wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n", "import type { CoinbaseWalletSDK } from '@coinbase/wallet-sdk';\nimport type { CoinbaseWalletSDKOptions } from '@coinbase/wallet-sdk/dist/CoinbaseWalletSDK';\nimport type { EVMProvider, Wallet } from '../../types';\nimport { UserRejectedRequestError } from '../../types';\nimport CoinbaseLogo from '../logos/coinbase.svg';\nimport { EVMConnector } from './base';\n\ntype Options = Omit<CoinbaseWalletSDKOptions, 'reloadOnDisconnect'> & {\n    /**\n     * Fallback Ethereum JSON RPC URL\n     * @default \"\"\n     */\n    jsonRpcUrl?: string;\n    /**\n     * Fallback Ethereum Chain ID\n     * @default 1\n     */\n    chainId?: number;\n    /**\n     * Whether or not to reload dapp automatically after disconnect.\n     */\n    reloadOnDisconnect?: boolean;\n};\n\nexport default class CoinbaseConnector extends EVMConnector {\n    #client?: CoinbaseWalletSDK;\n\n    constructor(private options?: Options) {\n        super(options);\n    }\n\n    async connect(): Promise<EVMProvider> {\n        try {\n            const provider = await this.getProvider();\n            provider.on('accountsChanged', this.onAccountsChanged);\n            provider.on('chainChanged', this.onChainChanged);\n            provider.on('disconnect', this.onDisconnect);\n\n            this.emit('message', { type: 'connecting' });\n            await provider?.enable?.();\n            return provider;\n        } catch (error) {\n            if (/(user closed modal|accounts received is empty)/i.test((error as Error).message))\n                throw new UserRejectedRequestError(error as Error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (!this.provider) return;\n\n        const provider = await this.getProvider();\n        provider.removeListener('accountsChanged', this.onAccountsChanged);\n        provider.removeListener('chainChanged', this.onChainChanged);\n        provider.removeListener('disconnect', this.onDisconnect);\n        await provider.disconnect?.();\n        (provider as any)?.close();\n    }\n\n    async getProvider(): Promise<EVMProvider> {\n        if (!this.provider) {\n            let CoinbaseWalletSDK = (await import('@coinbase/wallet-sdk')).default;\n            // Workaround for Vite dev import errors\n            // https://github.com/vitejs/vite/issues/7112\n            if (\n                typeof CoinbaseWalletSDK !== 'function' &&\n                // @ts-expect-error This import error is not visible to TypeScript\n                typeof CoinbaseWalletSDK.default === 'function'\n            )\n                CoinbaseWalletSDK = (CoinbaseWalletSDK as unknown as { default: typeof CoinbaseWalletSDK }).default;\n            this.#client = new CoinbaseWalletSDK(this.options ?? ({} as any));\n            this.provider = this.#client.makeWeb3Provider(this.options?.jsonRpcUrl, this.options?.chainId) as any;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-extra-non-null-assertion\n        return this.provider!!;\n    }\n\n    private onAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n            this.provider = undefined;\n        }\n        this.emit('accountsChanged', accounts);\n    };\n\n    private onChainChanged = (chainId: number | string) => {\n        this.emit('chainChanged', `0x${Number(chainId).toString(16)}`);\n    };\n\n    private onDisconnect = () => {\n        if (this.provider) {\n            this.provider = undefined;\n            this.emit('disconnect');\n        }\n    };\n}\n\nexport const coinbase = (options?: Options): Wallet => ({\n    id: 'coinbase',\n    name: 'Coinbase',\n    iconUrl: CoinbaseLogo,\n    createConnector: () => {\n        const connector = new CoinbaseConnector(options);\n        //@ts-ignore\n        const getUri = async () => (await connector.getProvider()).qrUrl;\n        return {\n            connector,\n            mobile: {\n                getUri,\n            },\n            qrCode: {\n                //@ts-ignore\n                getUri,\n            },\n        };\n    },\n});\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport MathWalletLogo from '../logos/mathwallet.svg';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nfunction getWalletInjectedProvider(): Window['ethereum'] {\n    const isWallet = (ethereum: NonNullable<Window['ethereum']>) => {\n        // Identify if Wallet injected provider is present.\n        const wallet = !!ethereum.isMathWallet;\n\n        return wallet;\n    };\n\n    const injectedProviderExist = typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n\n    // No injected providers exist.\n    if (!injectedProviderExist) {\n        return;\n    }\n\n    // Trust Wallet was injected into window.ethereum.\n    if (isWallet(window.ethereum!)) {\n        return window.ethereum;\n    }\n\n    // Wallet provider might be replaced by another\n    // injected provider, check the providers array.\n    if (window.ethereum?.providers) {\n        // ethereum.providers array is a non-standard way to\n        // preserve multiple injected providers. Eventually, EIP-5749\n        // will become a living standard and we will have to update this.\n        return window.ethereum.providers.find(isWallet);\n    }\n}\n\nexport const mathwallet = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'mathwallet',\n    name: 'Math Wallet',\n    iconUrl: MathWalletLogo,\n    downloadUrls: {\n        qrCode: 'https://mathwallet.org/',\n        browserExtension: 'https://mathwallet.org/',\n    },\n    createConnector: (chains) => {\n        const provider = getWalletInjectedProvider();\n        const isWalletInjected = Boolean(provider);\n        const shouldUseWalletConnect = !isWalletInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('mathwallet', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => provider });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'mathwallet://wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n", "import type { Chain, EVMProvider, Wallet } from '../../types';\nimport { ConnectorNotFoundError, UserRejectedRequestError } from '../../types';\nimport { isAndroid } from '../../utils/isMobile';\nimport { EVMConnector } from './base';\n\nimport { isMetaMask } from '../../utils';\nimport MetaMaskLogo from '../logos/metamask_icon.png';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nexport class MetaMaskConnector extends EVMConnector {\n    private metamaskProvider?: any;\n\n    #getProvider;\n\n    constructor({ chains, getProvider }: { chains?: Chain[]; getProvider: () => any }) {\n        super(chains);\n        this.#getProvider = getProvider;\n    }\n\n    async connect(): Promise<EVMProvider> {\n        const provider = await this.#getProvider();\n        if (!provider) throw new ConnectorNotFoundError();\n        if (provider.on) {\n            provider.removeListener('accountsChanged', this.onAccountsChanged);\n            provider.on('accountsChanged', this.onAccountsChanged);\n            provider.removeListener('chainChanged', this.onChainChanged);\n            provider.on('chainChanged', this.onChainChanged);\n            provider.removeListener('disconnect', this.onDisconnect);\n            provider.on('disconnect', this.onDisconnect);\n        }\n        this.emit('message', { type: 'connecting' });\n        try {\n            const accounts = await provider.request({ method: 'eth_requestAccounts' });\n            console.log('metamask eth_requestAccounts result:', accounts);\n        } catch (error) {\n            console.log('metamask connect error', error);\n            if ((error as any).code === 4001) {\n                throw new UserRejectedRequestError(error as Error);\n            }\n\n            throw error;\n        }\n\n        this.provider = provider;\n        return provider;\n    }\n\n    async disconnect(): Promise<void> {\n        this.provider?.removeListener('accountsChanged', this.onAccountsChanged);\n        this.provider?.removeListener('chainChanged', this.onChainChanged);\n        this.provider?.removeListener('disconnect', this.onDisconnect);\n        this.provider = undefined;\n    }\n\n    async getProvider() {\n        return this.#getProvider();\n    }\n\n    private onAccountsChanged = (accounts: string[]) => {\n        console.log('metamask accountsChanged', accounts);\n        if (accounts.length === 0) {\n            this.isSwitchChain = false;\n            this.onDisconnect();\n        }\n        this.emit('accountsChanged', accounts);\n    };\n\n    private onChainChanged = (chainId: string) => {\n        this.isSwitchChain = true;\n        this.emit('chainChanged', chainId);\n    };\n\n    private onDisconnect = () => {\n        console.log('onDisconnect isSwitchChain', this.isSwitchChain);\n        if (this.isSwitchChain || this.isSwitchChain === undefined) {\n            this.isSwitchChain = false;\n            return;\n        }\n        console.log('metamask on disconnect');\n        this.provider = undefined;\n        this.emit('disconnect');\n    };\n}\n\nexport const metaMask = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => {\n    const providers = typeof window !== 'undefined' && window.ethereum?.providers;\n\n    const isMetaMaskInjected =\n        typeof window !== 'undefined' &&\n        typeof window.ethereum !== 'undefined' &&\n        (window.ethereum.providers?.some(isMetaMask) || isMetaMask(window.ethereum));\n    const getProvider = () =>\n        providers ? providers.find(isMetaMask) : typeof window !== 'undefined' ? window.ethereum : undefined;\n    console.log('metaMask', providers, getProvider(), isMetaMaskInjected);\n\n    const shouldUseWalletConnect = !isMetaMaskInjected;\n\n    return {\n        id: 'metamask',\n        name: 'MetaMask',\n        iconUrl: MetaMaskLogo,\n        downloadUrls: {\n            browserExtension: 'https://metamask.io/download',\n            qrCode: 'https://metamask.io/download',\n        },\n        createConnector: (chains) => {\n            const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n            const connector = shouldUseWalletConnect\n                ? getWalletConnectConnector('metamask', options, chains)\n                : new MetaMaskConnector({\n                      chains: evmChains,\n                      getProvider,\n                  });\n\n            const getAppLinkUri = () => {\n                return isAndroid() ? undefined : 'metamask://wc';\n            };\n            return {\n                connector,\n                mobile: {\n                    getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n                },\n            };\n        },\n    };\n};\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport WalletIcon from '../logos/okxWallet.svg';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nexport const okx = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'okx',\n    name: 'OKX Wallet',\n    iconUrl: WalletIcon,\n    downloadUrls: {\n        qrCode: 'https://okx.com/download',\n        browserExtension: 'https://okx.com/download',\n    },\n    createConnector: (chains) => {\n        const isOKXInjected =\n            typeof window !== 'undefined' &&\n            // @ts-expect-error\n            typeof window.okxwallet !== 'undefined';\n\n        const shouldUseWalletConnect = !isOKXInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('okx', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => (window as any).okxwallet });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'okex://main/wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n", "import type { Wallet } from 'src/types';\nimport { isAndroid } from '../../utils';\nimport OmniLogo from '../logos/omni_icon.png';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nexport const omni = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'omni',\n    name: 'Omni',\n    iconUrl: OmniLogo,\n    downloadUrls: {\n        qrCode: 'https://omniwallet.app.link',\n    },\n    createConnector: (chains) => {\n        const connector = getWalletConnectConnector('omni', options, chains);\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: () => {\n                    return isAndroid() ? undefined : 'omni://wc';\n                },\n            },\n        };\n    },\n});\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport ONTOLogo from '../logos/onto.svg';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nexport const onto = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'onto',\n    name: 'ONTO Wallet',\n    iconUrl: ONTOLogo,\n    downloadUrls: {\n        qrCode: 'https://onto.app/download/',\n        browserExtension: 'https://onto.app/download/',\n    },\n    createConnector: (chains) => {\n        const isWalletInjected = typeof window !== 'undefined' && typeof window.onto !== 'undefined';\n\n        const shouldUseWalletConnect = !isWalletInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('onto', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => window.onto });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'ontoprovider://wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n", "import {\n    ConnectorNotFoundError,\n    type PublicKey,\n    type SendOptions,\n    type SolanaProvider,\n    type Wallet,\n} from '../../types';\nimport PhantomLogo from '../logos/phantom.png';\nimport { SolanaConnector } from './base';\n\nclass WrapPhantomSolanaProvider implements SolanaProvider {\n    #solana;\n    constructor(solana: any) {\n        this.#solana = solana;\n    }\n    get publicKey(): PublicKey | null {\n        return this.#solana.publicKey;\n    }\n    on(event: string, listener: any): this {\n        this.#solana.on(event, listener);\n        return this;\n    }\n    once(event: string, listener: any): this {\n        this.#solana.once(event, listener);\n        return this;\n    }\n    off(event: string, listener: any): this {\n        this.#solana.off(event, listener);\n        return this;\n    }\n    removeListener(event: string, listener: any): this {\n        this.#solana.removeListener(event, listener);\n        return this;\n    }\n    connect(): Promise<void> {\n        return this.#solana.connect();\n    }\n    disconnect(): Promise<void> {\n        return this.#solana.disconnect();\n    }\n    async signAndSendTransaction(transaction: unknown, options?: SendOptions | undefined): Promise<string> {\n        return (await this.#solana.signAndSendTransaction(transaction, options)).signature;\n    }\n    signTransaction(transaction: unknown): Promise<any> {\n        return this.#solana.signTransaction(transaction);\n    }\n    signAllTransactions(transaction: unknown[]): Promise<any[]> {\n        return this.#solana.signAllTransactions(transaction);\n    }\n    async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        return (await this.#solana.signMessage(message)).signature;\n    }\n}\n\nexport class PhantomConnector extends SolanaConnector {\n    private phantomProvider?: any;\n    private isConnected?: boolean;\n\n    constructor() {\n        super();\n        this.isConnected = false;\n    }\n\n    async connect(): Promise<SolanaProvider> {\n        const provider = await this.getProvider(); // see \"Detecting the Provider\"\n        if (this.isConnected && this.phantomProvider) return this.phantomProvider;\n        if (!provider) throw new ConnectorNotFoundError();\n        try {\n            // this.emit('message', { type: 'connecting' });\n            if (provider.on) {\n                //https://docs.phantom.app/solana/integrating-phantom/extension-and-in-app-browser-web-apps/establishing-a-connection#changing-accounts\n                provider.off('accountChanged', this.onAccountsChanged);\n                provider.on('accountChanged', this.onAccountsChanged);\n                provider.off('disconnect', this.onDisconnect);\n                provider.on('disconnect', this.onDisconnect);\n            }\n            await provider.connect();\n            if (!provider.publicKey) throw new Error('Connect Fail is publicKey not found');\n        } catch (err) {\n            // { code: 4001, message: 'User rejected the request.' }\n            console.error('phantom request connect error', err);\n            throw new Error('User rejected the request.');\n        }\n        this.isConnected = true;\n        this.phantomProvider = new WrapPhantomSolanaProvider(provider);\n        return this.phantomProvider;\n    }\n\n    async disconnect(): Promise<void> {\n        this.isConnected = false;\n        if (this.phantomProvider) {\n            this.phantomProvider.off('accountChanged', this.onAccountsChanged);\n            this.phantomProvider.off('disconnect', this.onDisconnect);\n            await this.phantomProvider.disconnect();\n            this.phantomProvider = undefined;\n        }\n    }\n\n    async getProvider() {\n        if (this.phantomProvider) return this.phantomProvider;\n        if ('phantom' in window) {\n            // @ts-ignore\n            const provider = window.phantom?.solana;\n            if (provider?.isPhantom) {\n                return provider;\n            }\n        }\n        return undefined;\n    }\n\n    private onAccountsChanged = (publicKey: any) => {\n        if (publicKey) {\n            // Set new public key and continue as usual\n            console.log(`Switched to account ${publicKey.toBase58()}`);\n            this.emit('accountsChanged', [publicKey.toBase58()]);\n        }\n    };\n\n    private onDisconnect = () => {\n        console.log('phantom on disconnect');\n        this.provider = undefined;\n        this.emit('disconnect');\n    };\n}\n\nexport const phantom = (): Wallet => {\n    return {\n        id: 'phantom',\n        name: 'Phantom',\n        iconUrl: PhantomLogo,\n        downloadUrls: {\n            browserExtension: 'https://phantom.app/download',\n            qrCode: 'https://phantom.app/download',\n        },\n        createConnector: () => {\n            const connector = new PhantomConnector();\n            return {\n                connector,\n                mobile: {\n                    getUri: undefined,\n                },\n                qrCode: {\n                    getUri: undefined,\n                },\n            };\n        },\n    };\n};\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport RainbowLogo from '../logos/rainbowkit_icon.png';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nexport const rainbow = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'rainbow',\n    name: 'Rainbow',\n    iconUrl: RainbowLogo,\n    downloadUrls: {\n        qrCode: 'https://rainbow.download',\n    },\n    createConnector: (chains) => {\n        const connector = getWalletConnectConnector('rainbow', options, chains);\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: () => {\n                    return isAndroid() ? undefined : 'rainbow://wc';\n                },\n            },\n        };\n    },\n});\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport SafePalLogo from '../logos/safepal.svg';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nfunction getWalletInjectedProvider(): Window['ethereum'] {\n    const isWallet = (ethereum: NonNullable<Window['ethereum']>) => {\n        // Identify if Wallet injected provider is present.\n        const wallet = !!ethereum.isSafePal;\n\n        return wallet;\n    };\n\n    const injectedProviderExist = typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n\n    // No injected providers exist.\n    if (!injectedProviderExist) {\n        return;\n    }\n\n    // Trust Wallet was injected into window.ethereum.\n    if (isWallet(window.ethereum!)) {\n        return window.ethereum;\n    }\n\n    // Wallet provider might be replaced by another\n    // injected provider, check the providers array.\n    if (window.ethereum?.providers) {\n        // ethereum.providers array is a non-standard way to\n        // preserve multiple injected providers. Eventually, EIP-5749\n        // will become a living standard and we will have to update this.\n        return window.ethereum.providers.find(isWallet);\n    }\n}\n\nexport const safepal = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'safepal',\n    name: 'SafePal',\n    iconUrl: SafePalLogo,\n    downloadUrls: {\n        qrCode: 'https://www.safepal.com/download',\n        browserExtension: 'https://www.safepal.com/download',\n    },\n    createConnector: (chains) => {\n        const provider = getWalletInjectedProvider();\n        const isWalletInjected = Boolean(provider);\n        const shouldUseWalletConnect = !isWalletInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('safepal', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => provider });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'safepalwallet://wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport TokenPocketLogo from '../logos/tokenpocket.svg';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nfunction getWalletInjectedProvider(): Window['ethereum'] {\n    const isWallet = (ethereum: NonNullable<Window['ethereum']>) => {\n        // Identify if Wallet injected provider is present.\n        const wallet = !!ethereum.isTokenPocket;\n\n        return wallet;\n    };\n\n    const injectedProviderExist = typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n\n    // No injected providers exist.\n    if (!injectedProviderExist) {\n        return;\n    }\n\n    // Trust Wallet was injected into window.ethereum.\n    if (isWallet(window.ethereum!)) {\n        return window.ethereum;\n    }\n\n    // Wallet provider might be replaced by another\n    // injected provider, check the providers array.\n    if (window.ethereum?.providers) {\n        // ethereum.providers array is a non-standard way to\n        // preserve multiple injected providers. Eventually, EIP-5749\n        // will become a living standard and we will have to update this.\n        return window.ethereum.providers.find(isWallet);\n    }\n}\n\nexport const tokenpocket = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'tokenpocket',\n    name: 'Token Pocket',\n    iconUrl: TokenPocketLogo,\n    downloadUrls: {\n        qrCode: 'https://www.tokenpocket.pro/en/download/app',\n        browserExtension: 'https://www.tokenpocket.pro/en/download/app',\n    },\n    createConnector: (chains) => {\n        const provider = getWalletInjectedProvider();\n        const isWalletInjected = Boolean(provider);\n        const shouldUseWalletConnect = !isWalletInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('tokenpocket', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => provider });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'tpoutside://wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n", "import type { Wallet } from '../../types';\nimport { isAndroid } from '../../utils';\nimport TrustLogo from '../logos/trust.svg';\nimport { InjectedConnector } from './injected';\nimport { getWalletConnectConnector } from './wallet-connect';\nimport type { WalletConnectOptions } from './wallet-connect-v2';\n\nfunction getTrustWalletInjectedProvider(): Window['ethereum'] {\n    const isTrustWallet = (ethereum: NonNullable<Window['ethereum']>) => {\n        // Identify if Trust Wallet injected provider is present.\n        const trustWallet = !!ethereum.isTrust;\n\n        return trustWallet;\n    };\n\n    const injectedProviderExist = typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n\n    // No injected providers exist.\n    if (!injectedProviderExist) {\n        return;\n    }\n\n    // Trust Wallet injected provider is available in the global scope.\n    // There are cases that some cases injected providers can replace window.ethereum\n    // without updating the ethereum.providers array. To prevent issues where\n    // the TW connector does not recognize the provider when TW extension is installed,\n    // we begin our checks by relying on TW's global object.\n    if (window['trustwallet']) {\n        return window['trustwallet'];\n    }\n\n    // Trust Wallet was injected into window.ethereum.\n    if (isTrustWallet(window.ethereum!)) {\n        return window.ethereum;\n    }\n\n    // Trust Wallet provider might be replaced by another\n    // injected provider, check the providers array.\n    if (window.ethereum?.providers) {\n        // ethereum.providers array is a non-standard way to\n        // preserve multiple injected providers. Eventually, EIP-5749\n        // will become a living standard and we will have to update this.\n        return window.ethereum.providers.find(isTrustWallet);\n    }\n}\n\nexport const trust = (options: Omit<WalletConnectOptions, 'chains'>): Wallet => ({\n    id: 'trust',\n    name: 'Trust',\n    iconUrl: TrustLogo,\n    downloadUrls: {\n        qrCode: 'https://trustwallet.com/download',\n        browserExtension: 'https://trustwallet.com/browser-extension',\n    },\n    createConnector: (chains) => {\n        const trustProvider = getTrustWalletInjectedProvider();\n        const isTrustWalletInjected = Boolean(trustProvider);\n        const shouldUseWalletConnect = !isTrustWalletInjected;\n\n        const evmChains = chains?.filter((chain) => chain.name.toLowerCase() !== 'solana');\n\n        const connector = shouldUseWalletConnect\n            ? getWalletConnectConnector('trust', options, chains)\n            : new InjectedConnector({ chains: evmChains, getProvider: () => trustProvider });\n\n        const getAppLinkUri = () => {\n            return isAndroid() ? undefined : 'trust://wc';\n        };\n\n        return {\n            connector,\n            mobile: {\n                getAppLinkUri: shouldUseWalletConnect ? getAppLinkUri : undefined,\n            },\n        };\n    },\n});\n"],
  "mappings": "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",
  "names": ["ParticleChains", "WalletReadyState", "wallet", "createConnector", "isMetaMask", "EventEmitter", "EventEmitter", "chain", "getWalletInjectedProvider", "isMetaMaskInjected", "getWalletInjectedProvider", "getWalletInjectedProvider"]
}
