import type { Account, FeeQuotesResponse, IEthereumProvider, RequestArguments, SendTransactionParams, SmartAccountConfig, Transaction, UserOp, UserOpBundle, UserOpParams } from './types';
import { SmartAccountType } from './types';
export declare class SmartAccount {
    provider: IEthereumProvider;
    private config;
    private connection;
    private smartAccountType;
    constructor(provider: IEthereumProvider, config: SmartAccountConfig);
    setSmartAccountType(type: SmartAccountType): void;
    private getChainId;
    private getAccountConfig;
    getPaymasterApiKey(): Promise<string | undefined>;
    getFeeQuotes(tx: Transaction | Transaction[]): Promise<FeeQuotesResponse>;
    buildUserOperation({ tx, feeQuote, tokenPaymasterAddress }: UserOpParams): Promise<UserOpBundle>;
    signUserOperation({ userOpHash, userOp }: UserOpBundle): Promise<UserOp>;
    sendUserOperation({ userOpHash, userOp }: UserOpBundle): Promise<string>;
    sendSignedUserOperation(userOp: UserOp): Promise<string>;
    sendTransaction(params: SendTransactionParams): Promise<string>;
    getAccount(): Promise<Account>;
    getAddress(): Promise<string>;
    getOwner(): Promise<string>;
    isDeployed(): Promise<boolean>;
    deployWalletContract(): Promise<string>;
    sendRpc<T>(arg: RequestArguments): Promise<T>;
}
