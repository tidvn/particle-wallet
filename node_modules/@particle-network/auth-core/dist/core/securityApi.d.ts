import type { AuthType } from '../api/authType';
import { type CaptchaRequest, type DeviceInfo, type LoginAccount, type LoginBindRequest, type LoginBindThirdpartyRequest, type SecurityAccount, type UserInfo } from '../api/types';
/**
 * get all login bind accounts
 * @returns login accounts
 */
export declare const getLoginBindAccounts: () => Promise<LoginAccount[]>;
/**
 * check phone or email whether has been bound login account
 * @param params phone or email
 * @returns true if has been bound
 */
export declare const checkHasBoundLoginPhoneOrEmail: (params: {
    phone: string;
} | {
    email: string;
}) => Promise<boolean>;
/**
 * bind login account, phone or email or social account.
 * @param params binding account
 * @returns latest user info
 */
export declare const bindLoginAccount: (params: LoginBindRequest | LoginBindThirdpartyRequest) => Promise<UserInfo>;
/**
 * request phone or email captcha before bind security account
 * @param data phone or email
 * @returns true if success
 */
export declare const getBindSecurityAccounCaptcha: (data: CaptchaRequest) => Promise<boolean>;
/**
 * bind security account, phone or email.
 * @param data phone or email and code
 * @returns security account
 */
export declare const bindSecurityAccount: (data: {
    phone: string;
    code: string;
} | {
    email: string;
    code: string;
}) => Promise<SecurityAccount>;
/**
 * get security account captcha
 * @param params security account type
 * @returns true if success
 */
export declare const getSecurityAccountCaptcha: (verifyCodeMethod: AuthType.email | AuthType.phone) => Promise<boolean>;
/**
 * get security account verify token
 * @param params security account type and code
 * @returns token
 */
export declare const getSecurityAccountToken: (params: {
    verifyCodeMethod: AuthType.email | AuthType.phone;
    code: string;
}) => Promise<string>;
/**
 * whether the user has payment password
 * @returns true or false.
 */
export declare const hasPaymentPassword: () => boolean;
/**
 * set payment password
 * @param password payment password, plaintext
 * @param verifyCodeMethod security account verify type
 * @param code security account verify code
 * @returns security account
 */
export declare const setPaymentPassword: ({ password, verifyCodeMethod, code, }: {
    password: string;
    verifyCodeMethod: AuthType.email | AuthType.phone;
    code: string;
}) => Promise<SecurityAccount>;
/**
 * update payment password
 * @param password new payment password, plaintext
 * @param oldPassword old payment password, plaintext
 * @returns security account
 */
export declare const updatePaymentPassword: ({ password, oldPassword, }: {
    password: string;
    oldPassword: string;
}) => Promise<SecurityAccount>;
/**
 * verify payment password
 * @param password payment password
 * @returns token
 * @throws error if password is incorrect
 */
export declare const verifyPaymentPassword: (password: string) => Promise<void>;
/**
 * delete payment password
 * @param password payment password
 * @returns security account
 */
export declare const deletePaymentPassword: (password: string) => Promise<SecurityAccount>;
/**
 * whether the user has master password
 * @returns true or false.
 */
export declare const hasMasterPassword: () => boolean;
/**
 * check whether need restore wallet
 * @returns true if need restore wallet
 */
export declare const isNeedRestoreWallet: () => boolean;
/**
 * restore wallet if need, please use {@link isNeedRestoreWallet} to check first.
 * @param masterPassword master password, plaintext
 * @returns true if success
 */
export declare const restoreWallet: (masterPassword: string) => Promise<boolean>;
/**
 * set master password
 * @param masterPassword master password, plaintext
 * @returns true if success
 */
export declare const setMastersPassword: (masterPassword: string) => Promise<boolean>;
/**
 * check master password whether is correct
 * @param masterPassword master password, plaintext
 * @returns true if correct
 */
export declare const verifyMasterPassword: (masterPassword: string) => Promise<boolean>;
export declare const getSecurityAccount: () => SecurityAccount;
/**
 * get all authorization dapps
 * @returns dapps infos
 */
export declare const getAuthorizationDApps: () => Promise<DeviceInfo[]>;
/**
 * delete authorization dapp
 * @param projectAppUuid dapp project app uuid
 * @returns true if success
 */
export declare const deleteAuthorizationDApp: (projectAppUuid: string) => Promise<boolean>;
