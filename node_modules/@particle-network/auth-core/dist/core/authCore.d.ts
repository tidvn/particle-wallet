import { type AuthCoreEvent } from '../types/authCoreEvent';
import { EthereumProvider } from './ethereumProvider';
import { SolanaWallet } from './solanaWallet';
export type AuthOptions = {
    projectId: string;
    clientKey: string;
    appId: string;
};
declare global {
    interface Window {
        particleAuth?: AuthCore;
        __PARTICLE_ENVIRONMENT__?: string;
    }
}
declare class AuthCore {
    #private;
    static getInstance(): AuthCore;
    private constructor();
    get ethereum(): EthereumProvider;
    get solana(): SolanaWallet;
    get version(): string;
    /**
     * init AuthCore
     * @param options Particle Network project config, get it from: https://dashboard.particle.network/
     * @param requestAuth optional, ethereum provider or solana wallet will request auth when not connected,
     * you can pass a custom requestAuth function with your own UI.
     */
    init(options: AuthOptions): void;
    on(event: AuthCoreEvent, listener: (...args: any[]) => void): void;
    once(event: AuthCoreEvent, listener: (...args: any[]) => void): void;
    off(event: AuthCoreEvent, listener: (...args: any[]) => void): void;
    removeListener(event: AuthCoreEvent, listener: (...args: any[]) => void): void;
}
export declare const particleAuth: AuthCore;
export {};
