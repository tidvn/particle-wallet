import type { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';
import { type RpcInput } from '../api/types';
export declare class SolanaWallet {
    #private;
    readonly isParticleNetwork = true;
    name: string;
    url: string;
    icon: string;
    constructor();
    on(event: string, listener: (...args: any[]) => void): this;
    once(event: string, listener: (...args: any[]) => void): this;
    off(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
    get connecting(): boolean;
    get connected(): boolean;
    publicKey(): Promise<PublicKey | undefined>;
    get selectedAddress(): string | null;
    get chainId(): number;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    signTransaction<T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<T>;
    signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[], chainId?: number): Promise<T[]>;
    signAndSendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<string>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
    switchChain(chainId: number): Promise<void>;
    request(data: Partial<RpcInput>): Promise<any>;
}
