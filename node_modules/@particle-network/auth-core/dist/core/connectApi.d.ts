import type { LoginWithSocial } from '../api/authType';
import { AuthType } from '../api/authType';
import { type CaptchaRequest, type UserInfo } from '../api/types';
import type { CloudflareOptions, ERC4337Options } from '../types';
import type { ConnectParam } from '../types/connectParam';
/**
 *  get cloudflare turnstile response
 */
export declare const getCloudflareTurnstileResponse: (options?: CloudflareOptions) => Promise<string>;
/**
 * Third-Party Authentication Initiator
 * This function facilitates third-party authentication by obtaining the authentication URL based on the specified social authentication type and redirecting the user's browser to the generated URL.
 * If no redirect URL is provided, the function defaults to the current window location.
 * @param parms
 */
export declare const thirdpartyAuth: (parms: LoginWithSocial) => Promise<void>;
/**
 * get connect phone / email captcha
 * @param param phone or email
 * @returns success(boolean)
 */
export declare const getConnectCaptcha: (param: CaptchaRequest) => Promise<boolean>;
/**
 * connect to auth core, login or register
 * @param param phone or email or jwt or social
 * @returns user info
 */
export declare const connect: (param: ConnectParam) => Promise<UserInfo>;
/**
 * disconnect from auth core, remove all local data.
 */
export declare const disconnect: () => Promise<void>;
/**
 * check if connected
 * @returns true is connected
 */
export declare const isConnected: () => boolean;
/**
 * get user info from local storage, if not exist, return undefined
 * @returns user info
 */
export declare const getUserInfo: () => UserInfo | undefined;
/**
 * sync user info from server, if master password changed, will emit {@link AuthCoreEvent.MasterPasswordChanged} event
 * @returns user info
 */
export declare const syncUserInfo: () => Promise<UserInfo>;
/**
 * get latest auth type, if not exist, return null
 * @returns AuthType
 */
export declare const getLatestAuthType: () => AuthType | null;
/**
 * get smart account address
 * @param options version, name, chainId
 * @returns
 */
export declare const getSmartAccountAddress: (options: ERC4337Options) => Promise<any>;
