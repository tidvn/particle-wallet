import { type EIP1559TxData, type PrefixedHexString, type RpcInput, type TxData } from '../api/types';
import type { MessageTypes, TypedDataV1, TypedMessage } from '../types';
import { type SignTypedDataVersion } from '../types';
import { type EIP1193Provider } from '../types/eip1193';
export declare class EthereumProvider implements EIP1193Provider {
    #private;
    readonly isParticleNetwork = true;
    constructor();
    get selectedAddress(): string | null;
    get chainId(): string;
    isConnected(): boolean;
    on(event: string, listener: (...args: any[]) => void): this;
    once(event: string, listener: (...args: any[]) => void): this;
    off(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
    /**
     * @deprecated user `request` instead
     */
    enable(): Promise<string[]>;
    disconnect(): Promise<void>;
    request(data: Partial<RpcInput>): Promise<any>;
    sendTransaction(transaction: TxData | EIP1559TxData): Promise<string>;
    signMessage(message: PrefixedHexString | string, uniq?: boolean): Promise<string>;
    signTypedData<V extends SignTypedDataVersion, T extends MessageTypes>({ data, version, uniq, }: {
        data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;
        version: V;
        uniq?: boolean;
    }): Promise<string>;
    switchChain(chainId: PrefixedHexString | number): Promise<null>;
}
