import type { EthereumProviderError } from '@metamask/rpc-errors';
import type { RpcInput } from '../api/types';
export interface ProviderMessage {
    type: string;
    data: unknown;
}
export interface ProviderConnectInfo {
    chainId: string;
}
export type ProviderChainId = string;
export type ProviderAccounts = string[];
export interface EIP1193Provider {
    on(event: 'connect', listener: (info: ProviderConnectInfo) => void): this;
    on(event: 'disconnect', listener: (error?: EthereumProviderError<any>) => void): this;
    on(event: 'message', listener: (message: ProviderMessage) => void): this;
    on(event: 'chainChanged', listener: (chainId: ProviderChainId) => void): this;
    on(event: 'accountsChanged', listener: (accounts: ProviderAccounts) => void): this;
    on(event: string, listener: (...args: any[]) => void): this;
    once(event: string, listener: (...args: any[]) => void): this;
    off(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
    request(request: Partial<RpcInput>): Promise<any>;
}
