import { type SocialAuthType } from '../authType';
export type BooleanResult = {
    success: boolean;
};
export interface DeviceInfo {
    user_agent: string;
    device: string;
    createdAt: string;
    updated_at: string;
    user_uuid: string;
    project_uuid: string;
    project_app_uuid: string;
    login_channel: string;
    login_name: string;
    isCurrent?: boolean;
    location: {
        ip: string;
        country_code: string;
        country_name?: string;
        city: string;
        continent: string;
        longitude: string;
        latitude: string;
    };
    project_app_name: string;
}
export type PhoneCaptchaRequest = {
    phone: string;
    cf_turnstile_response: string;
};
export type EmailCaptchaRequest = {
    email: string;
};
export type CaptchaRequest = PhoneCaptchaRequest | EmailCaptchaRequest;
export type LoginRequest = {
    code: string;
    phone: string;
} | {
    code: string;
    email: string;
};
export type LoginBindPhoneRequest = {
    phone: string;
    code: string;
    security_account_verify_token: string;
};
export type LoginBindEmailRequest = {
    email: string;
    code: string;
    security_account_verify_token: string;
};
export type LoginBindRequest = LoginBindPhoneRequest | LoginBindEmailRequest;
export type LoginBindThirdpartyRequest = {
    provider: SocialAuthType;
    thirdparty_code: string;
    security_account_verify_token: string;
    version?: 'v1' | 'v2';
};
export interface ThirdpartyUserInfo {
    provider: string;
    user_info: {
        id: string;
        email: string;
        name: string;
        picture: string;
    };
}
export interface SecurityAccount {
    email?: string;
    phone?: string;
    has_set_payment_password: boolean;
    has_set_master_password: boolean;
    payment_password_updated_at?: string;
}
export interface OriginalUserInfo {
    uuid: string;
    phone?: string;
    email?: string;
    name?: string;
    avatar?: string;
    created_at: string;
    updated_at: string;
    mac_key: string;
    token: string;
    wallets: WalletInfo[];
    cognito_result: CognitoResult;
    thirdparty_user_info?: ThirdpartyUserInfo;
    security_account: SecurityAccount;
    facebook_id?: string;
    facebook_email?: string;
    google_id?: string;
    google_email?: string;
    apple_id?: string;
    apple_email?: string;
    discord_id?: string;
    discord_email?: string;
    github_id?: string;
    github_email?: string;
    linkedin_id?: string;
    linkedin_email?: string;
    microsoft_id?: string;
    microsoft_email?: string;
    twitch_id?: string;
    twitch_email?: string;
    twitter_id?: string;
    twitter_email?: string;
    jwt_id?: string;
}
export interface UserInfo extends Omit<OriginalUserInfo, 'mac_key' | 'cognito_result' | 'wallets'> {
    wallets: Pick<WalletInfo, 'uuid' | 'chain_name' | 'public_address'>[];
}
export type UserInfoSync = Omit<OriginalUserInfo, 'token' | 'mac_key' | 'cognito_result' | 'thirdparty_user_info'>;
export declare enum WalletEncryptedType {
    KMS_AES = 0,
    KMS_AES_WITH_DATA_KEY_AND_DEFAULT_MASTER_PASSWORD = 1,
    KMS_AES_WITH_DATA_KEY_AND_MASTER_PASSWORD = 2
}
export type WalletInfo = {
    uuid: string;
    chain_name: string;
    public_address?: string;
    encrypted_data: string;
    encrypted_type?: WalletEncryptedType;
    encrypted_kms_data_key?: string;
};
export type CognitoResult = {
    region: string;
    identity_id: string;
    id_token: string;
    kms_key_id: string;
};
export interface UserWalletRequestParam {
    encrypted_type: number;
    encrypted_kms_data_key: string;
    wallets: {
        wallet_uuid: string;
        encrypted_data: string;
        public_address?: string;
    }[];
}
export interface LoginAccount {
    id_combined: string;
    user_uuid: string;
    provider: string;
    created_at: string;
}
export interface SmartAccount {
    smartAccountAddress: string;
}
export interface ThirdpartyAuthUrlResult {
    provider: SocialAuthType;
    auth_url: string;
    nonce: string;
    signature: string;
    state: string;
}
export interface ServerError {
    error_code: number;
    message: string;
}
