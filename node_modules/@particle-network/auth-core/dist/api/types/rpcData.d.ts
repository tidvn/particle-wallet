export type PrefixedHexString = string;
export type Base58String = string;
export type RpcInput = {
    id: string;
    jsonrpc: string;
    method: string;
    params?: unknown[];
    chainId?: number;
};
export type RpcOutput<T> = {
    jsonrpc: string;
    id: string;
    result: T;
};
export type SolanaDeserializeTransactionResult = {
    instructions: SolanaDeserializeInstruction[];
    estimatedChanges: EstimatedChanges;
    estimatedLamportsFee: number;
};
export type SolanaDeserializeInstruction = {
    type: string;
    programId: string;
    data: string;
};
export type EstimatedChanges = {
    sols: SolChangeInfo[];
    nfts: TokenChangeInfo[];
    tokens: SplTokenChangeInfo[];
};
export type SolChangeInfo = {
    address: string;
    lamportsChange: number;
};
export type TokenChangeInfo = {
    name: string;
    symbol: string;
    image: string;
    mint: string;
    associatedTokenAddress: string;
    amountChange: number;
};
export type SplTokenChangeInfo = {
    decimals: number;
} & TokenChangeInfo;
export declare enum SolanaEnhancedMethod {
    enhancedDeserializeTransaction = "enhancedDeserializeTransaction"
}
export declare enum EvmEnhancedMethod {
    deserializeTransaction = "particle_deserializeTransaction",
    deserializeTypedData = "particle_deserializeTypedData",
    suggestedGasFees = "particle_suggestedGasFees",
    getPrice = "particle_getPrice",
    getPendingTransactionsByAddress = "particle_getPendingTransactionsByAddress"
}
export declare enum TransactionSmartType {
    NativeTransfer = "native_transfer",
    ERC20_TRANSFER = "erc20_transfer",
    ERC20_APPROVE = "erc20_approve",
    ERC721_TRANFER = "erc721_transfer",
    ERC1155_TRANFER = "erc1155_transfer",
    SEAPORT_FULFILL_ORDER = "seaport_fulfill_order",
    SEAPORT_CANCEL_ORDER = "seaport_cancel_order",
    SEAPORT_NFT_LISTING = "seaport_nft_listing",
    OTHER = "other"
}
export type NftPrice = {
    address: string;
    amount: string;
    decimals: number;
    symbol: string;
};
export type SecurityDetection = {
    type: string;
    risks?: string[];
    warnings?: string[];
};
export type EVMDeserializeTransactionResult = {
    type?: TransactionSmartType;
    estimatedChanges: EVMEstimatedChange;
    data: EVMData;
    toTag?: string;
    price?: NftPrice;
    securityDetection?: SecurityDetection[];
};
export type EVMEstimatedChange = {
    natives: EVMNativeChange[];
    nfts: EVMNFTChange[];
    tokens: EVMTokenChange[];
};
export type DecimalString = string;
export type EVMNativeChange = {
    address: PrefixedHexString;
    nativeChange: DecimalString;
};
export type EVMNFTChange = {
    name: string;
    symbol: string;
    image: string;
    address: string;
    fromAddress: string;
    amountChange: number;
    tokenId: string;
    amount?: string;
    isSemiFungible?: boolean;
    description?: string;
};
export type EVMTokenChange = {
    decimals: number;
    name: string;
    symbol: string;
    image: string;
    address: string;
    fromAddress: string;
    amountChange: number;
};
export interface Consideration {
    address: string;
    amount: string;
    decimals: number;
    recipient: string;
    symbol: string;
}
export interface EVMData {
    from: PrefixedHexString;
    chainId: PrefixedHexString;
    nonce: PrefixedHexString;
    maxPriorityFeePerGas: PrefixedHexString;
    maxFeePerGas: PrefixedHexString;
    gasPrice: PrefixedHexString;
    gasLimit: PrefixedHexString;
    to: PrefixedHexString;
    value: PrefixedHexString;
    data: PrefixedHexString;
    v?: PrefixedHexString;
    r?: PrefixedHexString;
    s?: PrefixedHexString;
    function?: EVMFunction;
    offer?: EVMNFTChange[];
    offerer?: string;
    consideration?: Consideration[];
    startTime?: string;
    endTime?: string;
}
export interface TransactionData extends EVMData {
    type: PrefixedHexString;
    gas: PrefixedHexString;
    action: string;
    function?: never;
}
export interface EVMFunction {
    name: string;
    params: EVMParam[];
}
export interface EVMParam {
    name: string;
    value: unknown;
    type: string;
}
export interface GasFeeResult {
    low: GasFeeLevel;
    medium: GasFeeLevel;
    high: GasFeeLevel;
    baseFee: string;
}
export interface GasFeeLevel {
    maxPriorityFeePerGas: string;
    maxFeePerGas: string;
    minWaitTime: number;
    maxWaitTime: number;
}
export interface TokenPrice {
    address: string;
    currencies: Currency[];
}
export interface Currency {
    type: string;
    price: number;
    marketCap: number;
    '24hChange': number;
    '24hVol': number;
    lastUpdatedAt: number;
}
export interface RecentBlockhash {
    value: {
        blockhash: string;
    };
}
export interface GasFee {
    fee?: string;
    maxFee: string;
}
export interface TotalAmount {
    amount?: string;
    maxAmount: string;
}
export declare enum GasFeeMode {
    custom = "custom",
    low = "low",
    medium = "medium",
    high = "high"
}
export interface TxData {
    /**
     * The transaction's nonce.
     */
    nonce?: PrefixedHexString | number;
    /**
     * The transaction's gas price.
     */
    gasPrice?: PrefixedHexString | number;
    gas?: PrefixedHexString | number;
    /**
     * The transaction's gas limit.
     */
    gasLimit?: PrefixedHexString | number;
    from: PrefixedHexString;
    /**
     * The transaction's the address is sent to.
     */
    to?: PrefixedHexString;
    /**
     * The amount of Ether sent.
     */
    value?: PrefixedHexString | number;
    /**
     * This will contain the data of the message or the init of a contract.
     */
    data?: PrefixedHexString;
    type?: PrefixedHexString | number;
    chainId?: PrefixedHexString | number;
    /**
     * use for particle cancel or speed up transaction
     */
    action?: 'normal' | 'cancel' | 'speedup';
    gasLevel?: 'custom' | 'low' | 'medium' | 'high';
}
/**
 * {@link EIP1559TxData} data.
 */
export interface EIP1559TxData extends TxData {
    /**
     * The transaction's gas price. This property is not used for EIP1559
     * transactions and should always be undefined for this specific transaction type.
     */
    gasPrice?: never;
    /**
     * The maximum inclusion fee per gas (this fee is given to the miner)
     */
    maxPriorityFeePerGas?: PrefixedHexString | number;
    /**
     * The maximum total fee
     */
    maxFeePerGas?: PrefixedHexString | number;
}
export type EVMTransaction = {
    nonce?: PrefixedHexString;
    gasPrice?: PrefixedHexString;
    gasLimit?: PrefixedHexString;
    from: PrefixedHexString;
    to?: PrefixedHexString;
    value?: PrefixedHexString;
    data?: PrefixedHexString;
    type?: PrefixedHexString;
    chainId?: PrefixedHexString;
    maxPriorityFeePerGas?: PrefixedHexString;
    maxFeePerGas?: PrefixedHexString;
    action?: 'normal' | 'cancel' | 'speedup';
    gasLevel?: GasFeeMode;
};
