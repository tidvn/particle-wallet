import type { AuthType, SocialAuthType } from './authType';
import type { CaptchaRequest, CognitoResult, DeviceInfo, LoginAccount, LoginBindRequest, LoginBindThirdpartyRequest, LoginRequest, OriginalUserInfo, SecurityAccount, ThirdpartyAuthUrlResult, UserInfoSync, UserWalletRequestParam } from './types';
declare const pnApi: {
    /**
     * send auth code
     * @param data phone or email
     */
    sendCaptcha(data: CaptchaRequest): Promise<boolean>;
    /**
     * login
     * @param data
     */
    login(data: LoginRequest): Promise<OriginalUserInfo>;
    loginWithThirdparty(provider: SocialAuthType | AuthType.jwt, code: string): Promise<OriginalUserInfo>;
    /**
     * 三方账号授权登录
     * @param provider
     * @param code
     * @param nonce
     * @returns
     */
    loginWithThirdpartyV2(provider: SocialAuthType, code: string, nonce: string): Promise<OriginalUserInfo>;
    /**
     * 获取三方授权url
     *
     * @param provider
     * @param redirectUrl
     * @returns
     */
    getThirdpartyAuthUrl(provider: SocialAuthType, redirectUrl: string, appState?: string, prompt?: 'none' | 'consent' | 'select_account'): Promise<ThirdpartyAuthUrlResult>;
    /**
     * 登录绑定email/phone
     */
    loginBindings(data: LoginBindRequest): Promise<OriginalUserInfo>;
    loginBindingsCheck(params: {
        phone: string;
    } | {
        email: string;
    }): Promise<boolean>;
    getLoginBindings(): Promise<LoginAccount[]>;
    deleteLoginBinding(params: {
        id_combined: string;
        security_account_verify_token: string;
    }): Promise<boolean>;
    loginBindingsThirdparty(data: LoginBindThirdpartyRequest): Promise<OriginalUserInfo>;
    getTwitterToken(): Promise<string>;
    syncUserInfo(): Promise<UserInfoSync>;
    logout(): Promise<boolean>;
    updateWallet(uuid: string, params: UserWalletRequestParam): Promise<boolean>;
    loginCognito(): Promise<CognitoResult>;
    sendSecurityAccountsCode(data: CaptchaRequest): Promise<boolean>;
    bindSecurityAccount(params: {
        phone: string;
        code: string;
    } | {
        email: string;
        code: string;
    }): Promise<SecurityAccount>;
    getSecurityAccountCode(verifyCodeMethod: AuthType.email | AuthType.phone): Promise<boolean>;
    getSecurityAccountToken({ verifyCodeMethod, code, }: {
        verifyCodeMethod: AuthType.email | AuthType.phone;
        code: string;
    }): Promise<string>;
    setPaymentPassword({ password, verifyCodeMethod, code, }: {
        password: string;
        verifyCodeMethod: AuthType.email | AuthType.phone;
        code: string;
    }): Promise<SecurityAccount>;
    updatePaymentPassword({ password, oldPassword, }: {
        password: string;
        oldPassword: string;
    }): Promise<SecurityAccount>;
    verifyPaymentPassword(password: string): Promise<string>;
    deletePaymentPassword(password: string): Promise<SecurityAccount>;
    getAuthorizations(): Promise<DeviceInfo[]>;
    deleteAuthorization(projectAppUuid: string): Promise<boolean>;
};
export default pnApi;
