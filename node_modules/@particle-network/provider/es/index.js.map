{
  "version": 3,
  "sources": ["../src/provider.ts", "../src/auth-adapter.ts", "../src/types.ts", "../src/connection.ts", "../src/utils.ts", "../src/delegate-provider.ts"],
  "sourcesContent": ["import { Auth, intToHex, JsonRpcRequest, ParticleRpcRequest, rpcUrl } from '@particle-network/auth';\nimport { Chain } from '@particle-network/chains';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AuthEVMAdapter } from './auth-adapter';\nimport { HttpConnection } from './connection';\nimport {\n    IEthereumProvider,\n    IJsonRpcConnection,\n    IJsonRpcProvider,\n    notSupportMethods,\n    particleSignerMethods,\n    ProviderAccounts,\n    ProviderError,\n    signerMethods,\n} from './types';\nimport { getVersion } from './utils';\n\nexport class ParticleProvider extends IJsonRpcProvider implements IEthereumProvider {\n    public readonly isParticleNetwork = true;\n\n    private connection: IJsonRpcConnection;\n\n    private authAdapter: AuthEVMAdapter;\n\n    constructor(private auth: Auth) {\n        super();\n        this.auth = auth;\n        this.connection = this.setConnection();\n        this.authAdapter = new AuthEVMAdapter(this.auth);\n        this.auth.on('chainChanged', (chain: Chain) => {\n            if (chain.name !== 'Solana') {\n                this.emit('chainChanged', intToHex(chain.id));\n            }\n        });\n        if (typeof window !== 'undefined' && window.particle) {\n            window.particle.particleProvider = this;\n        }\n    }\n\n    get version() {\n        console.log('get version');\n        return getVersion();\n    }\n\n    private setConnection(): IJsonRpcConnection {\n        return new HttpConnection({\n            url: `${rpcUrl()}/evm-chain`,\n            basicCredentials: this.auth.basicCredentials(),\n            chainId: () => this.auth.getChainId(),\n            authentication: this.auth.config,\n        });\n    }\n\n    private emit(eventName: string | symbol, ...args: any[]): boolean {\n        return this.events.emit(eventName, ...args);\n    }\n\n    public async disconnect(): Promise<void> {\n        return this.auth.logout();\n    }\n\n    /**\n     * Enable the provider by invoking the `eth_requestAccounts` RPC method.\n     */\n    public async enable(): Promise<ProviderAccounts> {\n        return this.request({\n            method: 'eth_requestAccounts',\n        });\n    }\n\n    public async request(request: Partial<JsonRpcRequest>): Promise<any> {\n        if (!request.method || notSupportMethods.includes(request.method)) {\n            return Promise.reject(ProviderError.unsupportedMethod());\n        }\n        if (!this.connection.connected) {\n            await this.open();\n        }\n\n        console.log('Particle Provider Request', request);\n\n        const rpcRequest = {\n            chainId: Number(this.auth.getChainId()),\n            id: request.id ?? uuidv4(),\n            jsonrpc: request.jsonrpc ?? '2.0',\n            method: request.method,\n            params: request.params,\n        };\n\n        if (signerMethods.includes(request.method) || particleSignerMethods.includes(request.method)) {\n            return this.authAdapter.request(request);\n        } else {\n            return this.requestStrict(rpcRequest);\n        }\n    }\n\n    private async requestStrict(request: ParticleRpcRequest): Promise<any> {\n        return this.connection.send(request).then((output) => {\n            if (output.error) {\n                return Promise.reject(output.error);\n            } else {\n                return Promise.resolve(output.result);\n            }\n        });\n    }\n\n    protected async open() {\n        await this.connection.open();\n        this.connection.on('close', () => this.emit('disconnect'));\n        this.emit('connect', {\n            chainId: intToHex(this.auth.getChainId()),\n        });\n    }\n\n    protected async close() {\n        await this.connection.close();\n    }\n}\n", "import type { Auth, JsonRpcRequest } from '@particle-network/auth';\nimport { addHexPrefix, intToHex, isNullish } from '@particle-network/auth';\nimport { ChainId, chains } from '@particle-network/chains';\nimport { Buffer } from 'buffer';\nimport type { IAuthAdapter } from './types';\nimport { ProviderError } from './types';\n\nexport class AuthEVMAdapter implements IAuthAdapter {\n    constructor(private auth: Auth) {\n        this.auth = auth;\n    }\n\n    public async request(request: Partial<JsonRpcRequest>): Promise<any> {\n        if (request.method === 'eth_requestAccounts' || request.method === 'eth_accounts') {\n            let wallet = this.auth.getWallet();\n            if (wallet) {\n                return [wallet.public_address];\n            }\n            await this.auth.login();\n            wallet = this.auth.getWallet();\n            if (wallet) {\n                return [wallet.public_address];\n            } else {\n                throw new Error('Create wallet failed');\n            }\n        } else if (request.method === 'eth_chainId') {\n            return intToHex(this.auth.getChainId());\n        } else if (request.method === 'eth_sendTransaction') {\n            if (request.params && request.params instanceof Array && request.params[0]) {\n                const txData = request.params[0];\n                if (isNullish(txData.type)) {\n                    if (chains.isChainSupportEIP1559(this.auth.getChain())) {\n                        // set transaction default type \"0x2\", EIP1559.\n                        txData.type = '0x2';\n                    } else {\n                        txData.type = '0x0';\n                    }\n                }\n                if (isNullish(txData.chainId)) {\n                    txData.chainId = intToHex(this.auth.getChainId());\n                }\n                if (isNullish(txData.nonce)) {\n                    txData.nonce = '0x0';\n                }\n                if (isNullish(txData.data)) {\n                    txData.data = '0x';\n                }\n\n                return this.auth.sendTransaction(this.legacyToString(request.params[0]));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (\n            request.method === 'eth_signTypedData_v3' ||\n            request.method === 'eth_signTypedData_v4' ||\n            request.method === 'eth_signTypedData_v4_uniq'\n        ) {\n            if (request.params && request.params instanceof Array && request.params.length >= 2) {\n                let typedData = request.params[1];\n                if (typeof typedData === 'string' && !typedData.startsWith('0x')) {\n                    typedData = addHexPrefix(Buffer.from(typedData).toString('hex'));\n                }\n                return this.auth.sign(request.method, this.legacyToString(typedData));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (request.method === 'eth_signTypedData' || request.method === 'eth_signTypedData_v1') {\n            if (request.params && request.params instanceof Array && request.params[0]) {\n                let typedData = request.params[0];\n                if (typeof typedData === 'string' && !typedData.startsWith('0x')) {\n                    typedData = addHexPrefix(Buffer.from(typedData).toString('hex'));\n                }\n                return this.auth.sign(request.method, this.legacyToString(typedData));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (request.method === 'personal_sign' || request.method === 'personal_sign_uniq') {\n            if (request.params && request.params instanceof Array && request.params[0]) {\n                return this.auth.sign(request.method, this.legacyToString(request.params[0]));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (request.method === 'wallet_switchEthereumChain') {\n            if (request.params && request.params instanceof Array && request.params[0] && request.params[0].chainId) {\n                const chainId = Number(request.params[0].chainId) as ChainId;\n                const chain = chains.getEVMChainInfoById(chainId);\n                // for each key\n                if (chain) {\n                    await this.auth.switchChain(chain);\n                    return Promise.resolve(null);\n                }\n                return Promise.reject(ProviderError.unsupportedChain());\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else {\n            return Promise.reject(ProviderError.unsupportedMethod());\n        }\n    }\n\n    private legacyToString(params: unknown): string {\n        let message;\n        if (typeof params === 'number') {\n            message = addHexPrefix(params.toString(16));\n        } else if (typeof params === 'string') {\n            if (params.toString().startsWith('0x')) {\n                message = params;\n            } else {\n                message = addHexPrefix(Buffer.from(params).toString('hex'));\n            }\n        } else {\n            message = addHexPrefix(Buffer.from(JSON.stringify(params)).toString('hex'));\n        }\n        return message;\n    }\n}\n", "import { JsonRpcRequest, JsonRpcResponse, ParticleRpcRequest, RequestArguments } from '@particle-network/auth';\nimport { EventEmitter } from 'events';\n\nexport class ProviderError extends Error {\n    constructor(public code: number, public message: string, public data?: unknown) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.data = data;\n    }\n\n    public static userRejectedRequest() {\n        return new ProviderError(4001, 'The user rejected the request');\n    }\n\n    public static userCancelOperation() {\n        return new ProviderError(4011, 'The user cancel the operation');\n    }\n\n    public static unauthorized() {\n        return new ProviderError(4100, 'The requested method and/or account has not been authorized by the user');\n    }\n\n    public static unsupportedMethod() {\n        return new ProviderError(4200, 'The Provider does not support the requested method');\n    }\n\n    public static unsupportedChain() {\n        return new ProviderError(4201, 'The Provider does not support the chain');\n    }\n\n    public static disconnected() {\n        return new ProviderError(4900, 'The Provider is disconnected from all chains');\n    }\n\n    public static chainDisconnected() {\n        return new ProviderError(4901, 'The Provider is not connected to the requested chain');\n    }\n\n    public static paramsError() {\n        return new ProviderError(8002, 'Param error, see doc for more info');\n    }\n}\n\nexport interface ProviderMessage {\n    type: string;\n    data: unknown;\n}\n\nexport interface ProviderConnectInfo {\n    chainId: string;\n}\n\nexport type ProviderChainId = string;\n\nexport type ProviderAccounts = string[];\n\nexport interface EIP1102Request extends RequestArguments {\n    method: 'eth_requestAccounts';\n}\n\nexport interface ConnectionConfig {\n    url: string;\n    basicCredentials: string;\n    chainId: () => number;\n    authentication: ParticleAuthentication;\n}\n\nexport interface ParticleAuthentication {\n    projectId: string;\n    clientKey: string;\n}\n\nexport abstract class IEvents {\n    public abstract events: EventEmitter;\n\n    // events\n    public abstract on(event: string, listener: any): this;\n    public abstract once(event: string, listener: any): this;\n    public abstract off(event: string, listener: any): this;\n    public abstract removeListener(event: string, listener: any): this;\n}\n\nexport abstract class IJsonRpcConnection extends IEvents {\n    public events = new EventEmitter();\n\n    public abstract connected: boolean;\n    public abstract connecting: boolean;\n\n    public on(event: string, listener: any) {\n        this.events.on(event, listener);\n        return this;\n    }\n\n    public once(event: string, listener: any) {\n        this.events.once(event, listener);\n        return this;\n    }\n\n    public off(event: string, listener: any) {\n        this.events.off(event, listener);\n        return this;\n    }\n\n    public removeListener(event: string, listener: any) {\n        this.events.removeListener(event, listener);\n        return this;\n    }\n\n    public abstract open(): Promise<void>;\n    public abstract close(): Promise<void>;\n    public abstract send(request: ParticleRpcRequest): Promise<JsonRpcResponse>;\n}\n\nexport abstract class IJsonRpcProvider extends IEvents implements IEthereumProvider {\n    public events = new EventEmitter();\n    public on(event: string, listener: any) {\n        this.events.on(event, listener);\n        return this;\n    }\n\n    public once(event: string, listener: any) {\n        this.events.once(event, listener);\n        return this;\n    }\n\n    public off(event: string, listener: any) {\n        this.events.off(event, listener);\n        return this;\n    }\n\n    public removeListener(event: string, listener: any) {\n        this.events.removeListener(event, listener);\n        return this;\n    }\n\n    abstract request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport interface IEthereumProvider {\n    // connection event\n    on(event: 'connect', listener: (info: ProviderConnectInfo) => void): this;\n    // disconnection event\n    on(event: 'disconnect', listener: (error?: ProviderError) => void): this;\n    // arbitrary messages\n    on(event: 'message', listener: (message: ProviderMessage) => void): this;\n    // chain changed event\n    on(event: 'chainChanged', listener: (chainId: ProviderChainId) => void): this;\n    // accounts changed event\n    on(event: 'accountsChanged', listener: (accounts: ProviderAccounts) => void): this;\n\n    on(event: string, listener: any): this;\n\n    once(event: string, listener: any): this;\n\n    off(event: string, listener: any): this;\n\n    removeListener(event: string, listener: any): this;\n\n    request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport interface IAuthAdapter {\n    request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport const notSupportMethods = ['eth_signTransaction', 'eth_sign', 'eth_sendRawTransaction'];\n\nexport const signerMethods = [\n    'eth_requestAccounts', //EIP-1102\n    'eth_accounts',\n    'eth_chainId',\n    'eth_sendTransaction',\n    'eth_signTypedData',\n    'eth_signTypedData_v1',\n    'eth_signTypedData_v3',\n    'eth_signTypedData_v4',\n    'personal_sign',\n    'wallet_switchEthereumChain', //EIP-3326\n    'wallet_addEthereumChain', //EIP-3085\n    'wallet_watchAsset', //EIP-747\n];\n\nexport const particleSignerMethods = [\n    'personal_sign_uniq', //particle mpc signature uniq\n    'eth_signTypedData_v4_uniq', //particle mpc signature uniq\n];\n", "import type { JsonRpcResponse, ParticleRpcRequest } from '@particle-network/auth';\nimport { isHttpUrl } from '@particle-network/auth';\nimport type { AxiosInstance } from 'axios';\nimport axios from 'axios';\nimport { IJsonRpcConnection } from './types';\nimport type { ConnectionConfig } from './types';\n\nexport class HttpConnection extends IJsonRpcConnection {\n    private api: AxiosInstance | undefined;\n\n    private registering = false;\n\n    constructor(private config: ConnectionConfig) {\n        super();\n        if (!isHttpUrl(config.url)) {\n            throw new Error(`Provided URL is not compatible with HTTP connection: ${config.url}`);\n        }\n        this.config = config;\n    }\n\n    get connected(): boolean {\n        return typeof this.api !== 'undefined';\n    }\n\n    get connecting(): boolean {\n        return this.registering;\n    }\n\n    public async open(): Promise<void> {\n        this.api = await this.register();\n    }\n\n    public async close(): Promise<void> {\n        this.onClose();\n    }\n\n    public async send(request: ParticleRpcRequest): Promise<JsonRpcResponse> {\n        if (typeof this.api === 'undefined') {\n            this.api = await this.register();\n        }\n        return this.api.post('/', request).then((res) => res.data);\n    }\n\n    // ---------- Private ----------------------------------------------- //\n\n    private async register(): Promise<AxiosInstance> {\n        const connectConfig = this.config;\n        if (!isHttpUrl(connectConfig.url)) {\n            throw new Error(`Provided URL is not compatible with HTTP connection: ${connectConfig.url}`);\n        }\n        if (this.registering) {\n            return new Promise((resolve, reject) => {\n                this.events.once('open', () => {\n                    if (typeof this.api === 'undefined') {\n                        return reject(new Error('HTTP connection is missing or invalid'));\n                    }\n                    resolve(this.api);\n                });\n            });\n        }\n        this.registering = true;\n        const api = axios.create({\n            baseURL: connectConfig.url,\n            timeout: 30_000, // 30 secs\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        });\n        api.interceptors.request.use(\n            function (config) {\n                if (!config.params) {\n                    config.params = {};\n                }\n                config.params.chainId = config.data?.chainId ?? connectConfig.chainId();\n                config.params.projectUuid = connectConfig.authentication.projectId;\n                config.params.projectKey = connectConfig.authentication.clientKey;\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n        this.onOpen(api);\n        return api;\n    }\n\n    private onOpen(api: AxiosInstance) {\n        this.api = api;\n        this.registering = false;\n        this.events.emit('open');\n    }\n\n    private onClose() {\n        this.api = undefined;\n        this.events.emit('close');\n    }\n}\n", "export function getVersion(): string {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const packages = require('../package.json');\n    return `web_${packages.version}`;\n}\n", "import { Auth, JsonRpcRequest, ParticleRpcRequest, rpcUrl } from '@particle-network/auth';\nimport { v4 as uuidv4 } from 'uuid';\nimport { HttpConnection } from './connection';\nimport {\n    IEthereumProvider,\n    IJsonRpcConnection,\n    IJsonRpcProvider,\n    ProviderAccounts,\n    ProviderError,\n    notSupportMethods,\n    particleSignerMethods,\n    signerMethods,\n} from './types';\n\nexport class ParticleDelegateProvider extends IJsonRpcProvider implements IEthereumProvider {\n    public readonly isParticleDelegateProvider = true;\n\n    private connection: IJsonRpcConnection;\n\n    private chainId: number | undefined;\n\n    constructor(private auth: Auth, readonly signerProvider: IEthereumProvider) {\n        super();\n        this.connection = this.setConnection();\n        this.listenEvent();\n    }\n\n    private listenEvent() {\n        const event = this.events;\n        this.signerProvider.on('connect', (result) => event.emit('connect', result));\n        this.signerProvider.on('disconnect', (result) => event.emit('disconnect', result));\n        this.signerProvider.on('message', (result) => event.emit('message', result));\n        this.signerProvider.on('chainChanged', (result) => event.emit('chainChanged', result));\n        this.signerProvider.on('accountsChanged', (result) => event.emit('accountsChanged', result));\n    }\n\n    private setConnection(): IJsonRpcConnection {\n        return new HttpConnection({\n            url: `${rpcUrl()}/evm-chain`,\n            basicCredentials: this.auth.basicCredentials(),\n            chainId: () => this.chainId ?? this.auth.getChainId(),\n            authentication: this.auth.config,\n        });\n    }\n\n    async disconnect(): Promise<void> {\n        const provider = this.signerProvider as any;\n        if (provider.disconnect && typeof provider.disconnect === 'function') {\n            try {\n                await provider.disconnect();\n            } catch (e) {\n                // ignore\n            }\n        }\n    }\n\n    /**\n     * Enable the provider by invoking the `eth_requestAccounts` RPC method.\n     */\n    public async enable(): Promise<ProviderAccounts> {\n        const provider = this.signerProvider as any;\n        let result;\n        if (provider.enable && typeof provider.enable === 'function') {\n            try {\n                result = await provider.enable();\n            } catch (e) {\n                // ignore\n                result = await this.request({\n                    method: 'eth_requestAccounts',\n                });\n            }\n        }\n        return result;\n    }\n\n    public async request(request: Partial<JsonRpcRequest>): Promise<any> {\n        if (!request.method || notSupportMethods.includes(request.method)) {\n            return Promise.reject(ProviderError.unsupportedMethod());\n        }\n        if (!this.connection.connected) {\n            await this.open();\n        }\n\n        const rpcRequest = {\n            id: request.id ?? uuidv4(),\n            jsonrpc: request.jsonrpc ?? '2.0',\n            method: request.method,\n            params: request.params,\n        };\n\n        if (signerMethods.includes(rpcRequest.method) || this.isParticleSignerMethod(rpcRequest.method)) {\n            console.log('Particle Signer Provider Request', rpcRequest);\n            return await this.signerProvider.request(rpcRequest);\n        } else {\n            try {\n                this.chainId = Number(await this.signerProvider.request({ method: 'eth_chainId' }));\n            } catch (error) {\n                this.chainId = Number(this.auth.getChainId());\n            }\n            const particlePpcRequest = { ...rpcRequest, chainId: this.chainId };\n            console.log('Particle Provider Delegate Request', particlePpcRequest);\n            return await this.requestStrict(particlePpcRequest);\n        }\n    }\n\n    private isParticleSignerMethod(method: string): boolean {\n        return (this.signerProvider as any).isParticleNetwork && particleSignerMethods.includes(method);\n    }\n\n    private async requestStrict(request: ParticleRpcRequest): Promise<any> {\n        return this.connection.send(request).then((output) => {\n            if (output.error) {\n                return Promise.reject(output.error);\n            } else {\n                return Promise.resolve(output.result);\n            }\n        });\n    }\n\n    private async open() {\n        await this.connection.open();\n    }\n}\n"],
  "mappings": "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",
  "names": ["intToHex", "Buffer", "Buffer", "intToHex", "rpcUrl", "uuidv4", "rpcUrl", "uuidv4"]
}
