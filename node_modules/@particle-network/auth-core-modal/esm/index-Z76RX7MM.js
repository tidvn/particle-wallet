"use client";
import {
  useConnect
} from "./chunk-GASJHXJV.js";
import "./chunk-4QYUCQME.js";
import {
  isServer,
  useCustomNavigate,
  useParticleAuth
} from "./chunk-L6THLJH3.js";
import "./chunk-LQ53OFQ3.js";

// src/pages/index/index.tsx
import { isConnected } from "@particle-network/auth-core";
import { message } from "antd";
import base64url from "base64url";
import qs from "qs";
import React, { useEffect } from "react";

// src/pages/index/index.less
var index_default = ".index-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n";

// src/pages/index/index.tsx
var Index = () => {
  const { connect } = useConnect();
  const navigate = useCustomNavigate();
  const { setConnectionStatus, socialConnectCallback } = useParticleAuth();
  const thirdpartyLogin = async () => {
    var _a;
    try {
      const query = qs.parse(!isServer() ? window.location.search : "", {
        ignoreQueryPrefix: true
      });
      const particleThirdpartyParamsContent = query == null ? void 0 : query.particleThirdpartyParams;
      if (!particleThirdpartyParamsContent) {
        if (!isConnected()) {
          setConnectionStatus("disconnected");
        }
        return;
      }
      delete query.particleThirdpartyParams;
      const replaceUrl = (window.location.origin + window.location.pathname + "?" + qs.stringify(query)).replace(
        /\?$/,
        ""
      );
      window.history.replaceState({}, document.title, replaceUrl);
      document.title = document.title || replaceUrl;
      const particleThirdpartyParams = JSON.parse(base64url.decode(particleThirdpartyParamsContent));
      const { code, nonce, appState, error } = particleThirdpartyParams;
      const appStateObj = appState ? JSON.parse(base64url.decode(appState)) : {};
      const { authorization, chain, purpose, verifyToken } = appStateObj;
      if (error) {
        if (!isConnected()) {
          setConnectionStatus("disconnected");
        }
        if (!purpose) {
          (_a = socialConnectCallback == null ? void 0 : socialConnectCallback.onError) == null ? void 0 : _a.call(socialConnectCallback, new Error(error));
        } else {
          message.error(error);
        }
        return;
      }
      const authType = nonce.split("@")[0];
      if (purpose === "bindLoginAccount") {
        navigate("/login-account/bind-loading", {
          state: {
            authType,
            verifyToken,
            code,
            nonce
          },
          replace: true
        });
      } else {
        await new Promise((resolve) => {
          setTimeout(() => {
            resolve(true);
          }, 20);
        });
        await connect({ socialType: authType, code, nonce, authorization, chain });
      }
    } catch (error) {
      console.error("after redirect, login or bind", error);
      if (!isConnected()) {
        setConnectionStatus("disconnected");
      }
    }
  };
  useEffect(() => {
    thirdpartyLogin();
  }, []);
  return /* @__PURE__ */ React.createElement("div", { className: "index-container" }, /* @__PURE__ */ React.createElement("style", null, index_default));
};
var index_default2 = Index;
export {
  index_default2 as default
};
//# sourceMappingURL=index-Z76RX7MM.js.map
