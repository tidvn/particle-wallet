{
  "version": 3,
  "sources": ["../src/pages/account/paymentVerifyModal/index.tsx"],
  "sourcesContent": ["import { ApiError, verifyPaymentPassword } from '@particle-network/auth-core';\nimport { useRequest } from 'ahooks';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ParticleDrawer from '../../../components/particle-drawer';\nimport { useAuthCoreModal, useParticleAuth } from '../../../context';\nimport ParticleKeywords from '../ParticleKeywords';\nimport styles from './index.less';\nexport interface PaymentVerify {\n    visible: boolean;\n    onVerifyCompleted?: (password: string) => void;\n    onVerifyFailed?: (message: string) => void;\n    type?: 'close' | 'verify';\n}\n\n//\u652F\u4ED8\u65F6\u9A8C\u8BC1\nconst PaymentVerifyModal = ({ props }: { props: PaymentVerify }) => {\n    const { setPaymentVerify, setWrongPassword } = useParticleAuth();\n    const { t } = useTranslation();\n\n    const [pwd, setPwd] = useState('');\n    const { authCoreModal } = useAuthCoreModal();\n    useEffect(() => {\n        if (props.visible) {\n            setPwd('');\n        }\n    }, [props.visible]);\n\n    const { loading: verifyLoading, run: runVerify } = useRequest(verifyPaymentPassword, {\n        manual: true,\n        onSuccess: (result, params) => {\n            setPaymentVerify({ visible: false });\n            props.onVerifyCompleted?.(pwd);\n        },\n        onError: (error: any) => {\n            console.log('verify password error', error);\n            setPwd('');\n            if (error?.error_code === ApiError.WrongPaymentPassword) {\n                setWrongPassword({ visible: true });\n            } else if (error?.error_code === ApiError.SecurityAccountFrozen) {\n                const seconds = error.extra.seconds || 0;\n                setWrongPassword({\n                    visible: true,\n                    accountFrozen: {\n                        seconds: seconds,\n                    },\n                });\n            }\n        },\n    });\n\n    const closeVerify = () => {\n        if (verifyLoading) return false;\n        setPaymentVerify({ visible: false });\n        props.onVerifyFailed?.(t('common.cancel'));\n    };\n\n    const checkInputPwd = (value: string) => {\n        setPwd(value);\n        if (value.length === 6) {\n            runVerify(value);\n        }\n    };\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <ParticleDrawer\n                visible={props.visible}\n                placement=\"bottom\"\n                height={421}\n                closable={false}\n                maskClosable={false}\n                onClose={closeVerify}\n                className=\"payment-password-drawer\"\n                title={\n                    (props.type === 'close'\n                        ? t('account.close_payment_password')\n                        : t('account.payment_password')) as string\n                }\n                forceRender={true}\n                getContainer={() => {\n                    return authCoreModal.rootBody as HTMLElement;\n                }}\n            >\n                <div className=\"content payment-verify-content\">\n                    <ParticleKeywords onChange={checkInputPwd} value={pwd} keyboardInvisible={verifyLoading} />\n                </div>\n            </ParticleDrawer>\n        </>\n    );\n};\n\nexport default PaymentVerifyModal;\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA,SAAS,UAAU,6BAA6B;AAChD,SAAS,kBAAkB;AAC3B,OAAO,SAAS,WAAW,gBAAgB;AAC3C,SAAS,sBAAsB;;;;;;AAa/B,IAAM,qBAAqB,CAAC,EAAE,MAAM,MAAgC;AAChE,QAAM,EAAE,kBAAkB,iBAAiB,IAAI,gBAAgB;AAC/D,QAAM,EAAE,EAAE,IAAI,eAAe;AAE7B,QAAM,CAAC,KAAK,MAAM,IAAI,SAAS,EAAE;AACjC,QAAM,EAAE,cAAc,IAAI,iBAAiB;AAC3C,YAAU,MAAM;AACZ,QAAI,MAAM,SAAS;AACf,aAAO,EAAE;AAAA,IACb;AAAA,EACJ,GAAG,CAAC,MAAM,OAAO,CAAC;AAElB,QAAM,EAAE,SAAS,eAAe,KAAK,UAAU,IAAI,WAAW,uBAAuB;AAAA,IACjF,QAAQ;AAAA,IACR,WAAW,CAAC,QAAQ,WAAW;AA9BvC;AA+BY,uBAAiB,EAAE,SAAS,MAAM,CAAC;AACnC,kBAAM,sBAAN,+BAA0B;AAAA,IAC9B;AAAA,IACA,SAAS,CAAC,UAAe;AACrB,cAAQ,IAAI,yBAAyB,KAAK;AAC1C,aAAO,EAAE;AACT,WAAI,+BAAO,gBAAe,SAAS,sBAAsB;AACrD,yBAAiB,EAAE,SAAS,KAAK,CAAC;AAAA,MACtC,YAAW,+BAAO,gBAAe,SAAS,uBAAuB;AAC7D,cAAM,UAAU,MAAM,MAAM,WAAW;AACvC,yBAAiB;AAAA,UACb,SAAS;AAAA,UACT,eAAe;AAAA,YACX;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ,CAAC;AAED,QAAM,cAAc,MAAM;AAnD9B;AAoDQ,QAAI;AAAe,aAAO;AAC1B,qBAAiB,EAAE,SAAS,MAAM,CAAC;AACnC,gBAAM,mBAAN,+BAAuB,EAAE,eAAe;AAAA,EAC5C;AAEA,QAAM,gBAAgB,CAAC,UAAkB;AACrC,WAAO,KAAK;AACZ,QAAI,MAAM,WAAW,GAAG;AACpB,gBAAU,KAAK;AAAA,IACnB;AAAA,EACJ;AAEA,SACI,0DACI,oCAAC,eAAO,0BAA4B,GACpC;AAAA,IAAC;AAAA;AAAA,MACG,SAAS,MAAM;AAAA,MACf,WAAU;AAAA,MACV,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,cAAc;AAAA,MACd,SAAS;AAAA,MACT,WAAU;AAAA,MACV,OACK,MAAM,SAAS,UACV,EAAE,gCAAgC,IAClC,EAAE,0BAA0B;AAAA,MAEtC,aAAa;AAAA,MACb,cAAc,MAAM;AAChB,eAAO,cAAc;AAAA,MACzB;AAAA;AAAA,IAEA,oCAAC,SAAI,WAAU,oCACX,oCAAC,4BAAiB,UAAU,eAAe,OAAO,KAAK,mBAAmB,eAAe,CAC7F;AAAA,EACJ,CACJ;AAER;AAEA,IAAOA,8BAAQ;",
  "names": ["paymentVerifyModal_default"]
}
