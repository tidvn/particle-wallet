{
  "version": 3,
  "sources": ["../src/context/hooks/useAuthCore.ts", "../src/common/config/index.ts", "../src/context/hooks/useLogin.ts", "../src/repository/index.ts", "../src/api/master-password.ts", "../src/context/hooks/useConnect.ts", "../src/context/hooks/useCustomize.ts", "../src/utils/number-utils.ts", "../src/context/hooks/useUserInfo.ts", "../src/context/hooks/useEthereum.ts", "../src/utils/evmSendTransaction.ts", "../src/utils/transaction-utils.ts", "../src/context/evmProvider.ts", "../src/context/hooks/useIsMounted.ts", "../src/context/hooks/useSolana.ts", "../src/context/solanaWallet.ts"],
  "sourcesContent": ["import {\n    AuthCoreEvent,\n    getSecurityAccount,\n    hasMasterPassword,\n    hasPaymentPassword,\n    isConnected,\n    isNeedRestoreWallet,\n    particleAuth,\n} from '@particle-network/auth-core';\nimport { walletEntryPlugin, type WalletConfig } from '@particle-network/wallet';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useCustomNavigate, useParticleAuth } from '..';\nimport { AuthError } from '../../api/model/authError';\nimport globalConfig from '../../common/config';\nimport { AuthPage } from '../../components/customRouter';\nimport { PageType } from '../../pages/account/accountVerify/config';\nimport { sendAnalyticsActive } from '../../utils/sendAnalyticsActive';\nimport type { OpenBuyOptions, OpenBuyOptionsKeys } from '../types';\n\ninterface OpenWalletOptions {\n    windowSize?: 'small' | 'large';\n    pathName?: string;\n    query?: Record<string, unknown>;\n    topMenuType?: 'close' | 'fullscreen';\n}\n\nexport const useAuthCore = () => {\n    const navigate = useCustomNavigate();\n    const { userInfo, modalOptions } = useParticleAuth();\n    const [needRestoreWallet, setNeedRestoreWallet] = useState(isNeedRestoreWallet());\n\n    const openAccountAndSecurity = useCallback(() => {\n        navigate(AuthPage.AccountSecurity);\n    }, [navigate]);\n\n    const openSetMasterPassword = useCallback(() => {\n        if (hasMasterPassword()) {\n            throw new Error('Master password already exists.');\n        }\n        navigate('account/master-password');\n    }, [navigate]);\n\n    const openChangeMasterPassword = useCallback(() => {\n        if (!hasMasterPassword()) {\n            throw new Error('Master password not exist, please set it first!');\n        }\n        if (isNeedRestoreWallet()) {\n            throw new Error('Wallet not restore, please restore it by master password first!');\n        }\n        navigate('account/master-password/change');\n    }, [navigate]);\n\n    const openRestoreByMasterPassword = useCallback(() => {\n        if (!hasMasterPassword()) {\n            throw new Error('Master password not exists.');\n        }\n        if (!isNeedRestoreWallet()) {\n            throw new Error('Wallet has been restore.');\n        }\n        navigate(AuthPage.MasterPasswordVerify);\n    }, [navigate]);\n\n    const openWallet = useCallback((options?: OpenWalletOptions) => {\n        const { windowSize, pathName, query, topMenuType } = options || {};\n        if (!isConnected()) {\n            throw AuthError.notLogin();\n        }\n        walletEntryPlugin.openWallet({\n            windowSize: windowSize || 'large',\n            pathName: pathName || '/',\n            query,\n            topMenuType,\n        });\n        sendAnalyticsActive('open_wallet');\n    }, []);\n\n    const buildWalletUrl = useCallback((options?: WalletConfig): string => {\n        if (!isConnected()) {\n            throw AuthError.notLogin();\n        }\n        return walletEntryPlugin.getWalletUrl(options);\n    }, []);\n\n    const openBuy = useCallback(\n        (options?: OpenBuyOptions) => {\n            let url = `${globalConfig.env.buyUrl}/?language=${modalOptions.language || 'en'}&theme=${\n                modalOptions.themeType || 'light'\n            }`;\n            if (modalOptions.wallet?.customStyle) {\n                const { light, dark } = modalOptions.wallet.customStyle;\n                url += `&customStyle=${encodeURIComponent(\n                    Buffer.from(JSON.stringify({ light, dark })).toString('base64')\n                )}`;\n            }\n\n            if (options) {\n                Object.keys(options).forEach((key) => {\n                    const value = options[key as OpenBuyOptionsKeys];\n                    if (value) {\n                        url += `&${key}=${encodeURIComponent(value)}`;\n                    }\n                });\n            }\n            if (typeof window !== 'undefined') {\n                window.open(url);\n            }\n        },\n        [modalOptions.wallet, modalOptions.themeType, modalOptions.language]\n    );\n\n    const openSetPaymentPassword = useCallback(\n        (securityAccountEmailOrPhone: string) => {\n            const securityAccount = getSecurityAccount();\n            if (!securityAccount.email && !securityAccount.phone) {\n                throw new Error('Please set security account first!');\n            }\n            if (hasPaymentPassword()) {\n                throw new Error('Payment password already exists.');\n            }\n\n            if (\n                securityAccountEmailOrPhone &&\n                securityAccountEmailOrPhone !== securityAccount.email &&\n                securityAccountEmailOrPhone !== securityAccount.phone\n            ) {\n                throw new Error('Invalid security account.');\n            }\n            navigate('account/set-password', {\n                state: {\n                    account: securityAccountEmailOrPhone,\n                },\n            });\n        },\n        [navigate]\n    );\n\n    const openChangePaymentPassword = useCallback(() => {\n        if (!hasPaymentPassword()) {\n            throw new Error('Payment password not exists.');\n        }\n        navigate('account/change-password');\n    }, [navigate]);\n\n    const openSetSecurityAccount = useCallback(() => {\n        const securityAccount = getSecurityAccount();\n        if (securityAccount.email && securityAccount.phone) {\n            throw new Error('Security account already exists.');\n        }\n\n        const showSwitch = !securityAccount.email && !securityAccount.phone;\n\n        if ((securityAccount.email && !securityAccount.phone) || (!securityAccount.email && securityAccount.phone)) {\n            navigate('/account/verify', {\n                state: {\n                    account: securityAccount.email || securityAccount.phone,\n                    authType: securityAccount.email ? 'phone' : 'email',\n                    redirectUrl: '/account/security',\n                    pageType: PageType.VerifySecurityAccount_SetSecurityAccount,\n                },\n            });\n        } else {\n            if (userInfo?.email && !securityAccount.phone) {\n                navigate('account/bind', {\n                    state: { showSwitch, accountType: 'phone', redirectUrl: AuthPage.AccountSecurity },\n                });\n            } else if (!securityAccount.email) {\n                navigate('account/bind', {\n                    state: { showSwitch, accountType: 'email', redirectUrl: AuthPage.AccountSecurity },\n                });\n            } else {\n                navigate('account/bind', {\n                    state: { showSwitch, accountType: 'phone', redirectUrl: AuthPage.AccountSecurity },\n                });\n            }\n        }\n    }, [navigate, userInfo]);\n\n    const openLinkLoginAccount = useCallback(() => {\n        const securityAccount = getSecurityAccount();\n        if (!securityAccount.email && !securityAccount.phone) {\n            throw new Error('Please set security account first!');\n        }\n        navigate(AuthPage.LoginAccount);\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userInfo) {\n            setNeedRestoreWallet(isNeedRestoreWallet());\n        } else {\n            setNeedRestoreWallet(false);\n        }\n    }, [userInfo]);\n\n    useEffect(() => {\n        const onWalletRestored = () => {\n            setNeedRestoreWallet(isNeedRestoreWallet());\n        };\n        particleAuth.on(AuthCoreEvent.ParticleWalletRestored, onWalletRestored);\n        return () => {\n            particleAuth.off(AuthCoreEvent.ParticleWalletRestored, onWalletRestored);\n        };\n    }, []);\n\n    return {\n        userInfo,\n        needRestoreWallet,\n        openAccountAndSecurity,\n        openSetMasterPassword,\n        openChangeMasterPassword,\n        openRestoreByMasterPassword,\n        openSetPaymentPassword,\n        openChangePaymentPassword,\n        openSetSecurityAccount,\n        openLinkLoginAccount,\n        openWallet,\n        buildWalletUrl,\n        openBuy,\n    };\n};\n", "import { isServer } from '../../utils';\n\ntype Env = {\n    buyUrl: string;\n};\n\nclass GlobalConfig {\n    #devEnv: Env = {\n        buyUrl: 'https://ramp-debug.particle.network',\n    };\n\n    #stagingEnv: Env = {\n        buyUrl: 'https://ramp-staging.particle.network',\n    };\n\n    #productionEnv: Env = {\n        buyUrl: 'https://ramp.particle.network',\n    };\n\n    get env() {\n        if (!isServer() && window.__PARTICLE_ENVIRONMENT__ === 'development') {\n            return this.#devEnv;\n        } else if (!isServer() && window.__PARTICLE_ENVIRONMENT__ === 'staging') {\n            return this.#stagingEnv;\n        } else {\n            return this.#productionEnv;\n        }\n    }\n}\n\nconst globalConfig = new GlobalConfig();\nexport default globalConfig;\n", "import { RecordType } from '@particle-network/analytics';\nimport type { ConnectParam, SocialAuthType } from '@particle-network/auth-core';\nimport { analyticsRecord, connect, thirdpartyAuth } from '@particle-network/auth-core';\nimport { type Chain } from '@particle-network/chains';\nimport base64url from 'base64url';\nimport { useCallback } from 'react';\nimport { useCustomNavigate, useParticleAuth } from '..';\nimport { isPromptSetMasterPassword } from '../../api/master-password';\nimport { AuthPage } from '../../components/customRouter';\nimport type { Authorization, ConnectWithSocialOptions } from '../../types';\nimport { sendAnalyticsActive } from '../../utils/sendAnalyticsActive';\nimport { AuthCoreModalEvent } from '../types';\n\nconst useLogin = () => {\n    const navigate = useCustomNavigate();\n    const { loginSuccessRedirectToApp, modalOptions, events } = useParticleAuth();\n    const loginHandler = useCallback(\n        async (data: ConnectParam, emitError: boolean = true) => {\n            try {\n                const userInfo = await connect(data);\n                sendAnalyticsActive('login', userInfo);\n\n                analyticsRecord({\n                    // eslint-disable-next-line camelcase\n                    record_type: RecordType.PAGE_LOGIN_BUTTON_CLICK_SUCCESS, // \u767B\u5F55\u6210\u529F\n                });\n                console.log('login successful, check master password');\n\n                if (userInfo.security_account?.has_set_master_password) {\n                    console.log('login successful, start verify master password');\n                    navigate(AuthPage.MasterPasswordVerify, {\n                        replace: true,\n                        state: {\n                            loginVerifyMasterPassword: true,\n                        },\n                    });\n                } else {\n                    if (\n                        isPromptSetMasterPassword(\n                            modalOptions.promptSettingConfig?.promptMasterPasswordSettingWhenLogin\n                        )\n                    ) {\n                        console.log('login successful, popup set master password');\n                        navigate(AuthPage.MasterPasswordPrompt, {\n                            replace: true,\n                        });\n                    } else {\n                        loginSuccessRedirectToApp();\n                    }\n                }\n            } catch (error) {\n                analyticsRecord({\n                    // eslint-disable-next-line camelcase\n                    record_type: RecordType.PAGE_LOGIN_BUTTON_CLICK_FAILURE, // \u767B\u5F55\u5931\u8D25\n                });\n                if (emitError) {\n                    console.log('login failed, emit LoginFail event', error);\n                    events.emit(AuthCoreModalEvent.LoginFail, error);\n                } else {\n                    throw error;\n                }\n            }\n        },\n        [modalOptions.promptSettingConfig, navigate, loginSuccessRedirectToApp]\n    );\n\n    const socialAuthLogin = useCallback(\n        async (\n            options: ConnectWithSocialOptions & {\n                authorization?: Authorization;\n                chain?: Chain;\n            }\n        ) => {\n            try {\n                const appState = base64url(\n                    JSON.stringify({\n                        chain: options.chain,\n                        authorization: options.authorization,\n                        socialType: options.socialType,\n                    })\n                );\n                await thirdpartyAuth({\n                    authType: options.socialType as SocialAuthType,\n                    appState,\n                    prompt: options.prompt,\n                });\n            } catch (error) {\n                events.emit(AuthCoreModalEvent.LoginFail, error);\n            }\n        },\n        [events]\n    );\n\n    return { loginHandler, socialAuthLogin };\n};\n\nexport default useLogin;\n", "export function save(key: string, value: string | null) {\n    if (value) {\n        localStorage.setItem(key, value);\n    } else {\n        removeItem(key);\n    }\n}\n\nexport function load(key: string): string | null {\n    return localStorage.getItem(key);\n}\n\nexport function once(key: string): boolean {\n    const value = localStorage.getItem(key);\n\n    if (!value) {\n        localStorage.setItem(key, '1');\n    }\n    return Boolean(value);\n}\n\nexport function removeItem(key: string) {\n    localStorage.removeItem(key);\n}\n\nexport class PreferenceKey {\n    static PN_OPEN_SET_PAYMENT_PASSWORD = 'PN_OPEN_SET_PAYMENT_PASSWORD';\n    static PN_OPEN_SET_MASTER_PASSWORD = 'PN_OPEN_SET_MASTER_PASSWORD';\n}\n", "import { PreferenceKey, once } from '../repository';\nimport { PromptSettingType } from './model/bundle';\n\nexport const isPromptSetMasterPassword = (promptMasterPasswordSettingWhenLogin?: number | boolean) => {\n    if (\n        promptMasterPasswordSettingWhenLogin === PromptSettingType.every ||\n        promptMasterPasswordSettingWhenLogin === PromptSettingType.everyAndNotSkip\n    ) {\n        return true;\n    } else if (\n        promptMasterPasswordSettingWhenLogin ||\n        promptMasterPasswordSettingWhenLogin === PromptSettingType.first\n    ) {\n        return !once(PreferenceKey.PN_OPEN_SET_MASTER_PASSWORD);\n    } else {\n        return false;\n    }\n};\n", "import {\n    AuthCoreEvent,\n    AuthType,\n    check,\n    disconnect,\n    getCloudflareTurnstileResponse,\n    getConnectCaptcha,\n    isConnected,\n    isNullish,\n    particleAuth,\n    requireNotNullish,\n    type CloudflareOptions,\n    type ConnectParam,\n    type E164Phone,\n    type UserInfo,\n} from '@particle-network/auth-core';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { AuthPage } from '../../components/customRouter';\nimport { useCustomNavigate, useEvents, useParticleAuth } from '../../context';\nimport type { ConnectOptions } from '../../types/connectOptions';\nimport { isValidCaptcha, isValidE164PhoneNumber, isValidEmail } from '../../utils';\nimport { AuthCoreModalEvent } from '../types';\nimport useLogin from './useLogin';\n\nexport const useConnect = () => {\n    const navigate = useCustomNavigate();\n    const { events } = useEvents();\n    const {\n        modalOptions,\n        setLoginAuthorization,\n        setConnectionStatus,\n        connectionStatus,\n        setAuthCoreModal,\n        socialConnectCallback,\n        setSocialConnectCallback,\n    } = useParticleAuth();\n    const { loginHandler, socialAuthLogin } = useLogin();\n\n    const isLoginDirectly = useCallback((options: ConnectOptions) => {\n        // @ts-ignore\n        const { email, phone, code, jwt, socialType } = options;\n\n        return ((isValidEmail(email) || isValidE164PhoneNumber(phone)) && isValidCaptcha(code)) || socialType || jwt;\n    }, []);\n\n    const connect = useCallback(\n        async (options?: ConnectOptions): Promise<UserInfo | undefined> => {\n            if (options && options.authorization) {\n                check(options.chain, 'chain is required when authorization is provided');\n            }\n            if (options && modalOptions.authTypes && modalOptions.authTypes.length > 0) {\n                if ('email' in options && !isNullish(options.email)) {\n                    check(\n                        modalOptions.authTypes.includes(AuthType.email),\n                        'Email login is not supported, please add AuthType.email to AuthCoreContextProvider init-param \"authTypes\"'\n                    );\n                } else if ('phone' in options && !isNullish(options.phone)) {\n                    check(\n                        modalOptions.authTypes.includes(AuthType.phone),\n                        'Phone login is not supported, please add AuthType.phone to AuthCoreContextProvider init-param \"authTypes\"'\n                    );\n                } else if ('socialType' in options && options.socialType) {\n                    const type = (options.socialType as string) === 'twitterv1' ? 'twitter' : options.socialType;\n                    check(\n                        modalOptions.authTypes.includes(type as AuthType),\n                        `${type} login is not supported, please add AuthType.${type} to AuthCoreContextProvider init-param \"authTypes\"`\n                    );\n                } else if ('jwt' in options && options.jwt) {\n                    check(\n                        modalOptions.authTypes.includes(AuthType.jwt),\n                        'JWT login is not supported, please add AuthType.jwt to AuthCoreContextProvider init-param \"authTypes\"'\n                    );\n                }\n            }\n            setConnectionStatus('connecting');\n            return new Promise((resolve, reject) => {\n                events.once(AuthCoreModalEvent.LoginSuccess, (userInfo) => {\n                    setConnectionStatus('connected');\n                    // \u5173\u95ED\u7A97\u53E3\n                    setAuthCoreModal({\n                        particleModalVisible: false,\n                    });\n                    const { socialType, nonce, code } = (options as any) || {};\n                    if (socialType && nonce && code) {\n                        socialConnectCallback?.onSuccess?.(userInfo);\n                    }\n                    resolve(userInfo);\n                });\n\n                events.once(AuthCoreModalEvent.LoginFail, (error) => {\n                    setConnectionStatus('disconnected');\n                    setAuthCoreModal({\n                        particleModalVisible: false,\n                    });\n                    const { socialType, nonce, code } = (options as any) || {};\n                    if (socialType && nonce && code) {\n                        socialConnectCallback?.onError?.(error);\n                    }\n                    reject(error);\n                });\n                if (options && isLoginDirectly(options)) {\n                    const { authorization, chain, socialType, nonce, prompt, code } = options as any;\n                    if (authorization) {\n                        setLoginAuthorization({ authorization, chain: requireNotNullish(chain) });\n                    } else {\n                        setLoginAuthorization(undefined);\n                    }\n                    if (socialType && (!nonce || !code)) {\n                        socialAuthLogin({\n                            socialType,\n                            prompt,\n                            authorization,\n                            chain,\n                        });\n                    } else {\n                        loginHandler(options as ConnectParam);\n                    }\n                } else {\n                    navigate(AuthPage.Login, {\n                        state: options,\n                    });\n                }\n            });\n        },\n        [events, modalOptions.authTypes, loginHandler, isLoginDirectly, navigate, socialConnectCallback]\n    );\n\n    useEffect(() => {\n        const onConnect = () => {\n            setConnectionStatus('connected');\n        };\n\n        const onDisconnect = () => {\n            setConnectionStatus('disconnected');\n        };\n        particleAuth.on(AuthCoreEvent.ParticleAuthConnect, onConnect);\n        particleAuth.on(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n\n        if (isConnected()) {\n            setConnectionStatus('connected');\n        }\n\n        return () => {\n            particleAuth.off(AuthCoreEvent.ParticleAuthConnect, onConnect);\n            particleAuth.off(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);\n        };\n    }, []);\n\n    const requestConnectCaptcha = useCallback(\n        async (\n            config: { email: string } | { phone: E164Phone; cloudflareOptions?: CloudflareOptions }\n        ): Promise<boolean> => {\n            if ('email' in config && config.email) {\n                return await getConnectCaptcha(config);\n            } else if ('phone' in config && config.phone) {\n                const token = await getCloudflareTurnstileResponse(config.cloudflareOptions);\n                // eslint-disable-next-line camelcase\n                return await getConnectCaptcha({ phone: config.phone, cf_turnstile_response: token });\n            }\n            throw new Error('Invalid config');\n        },\n        []\n    );\n\n    const connected = useMemo(() => connectionStatus === 'connected', [connectionStatus]);\n\n    return {\n        connect,\n        disconnect,\n        connectionStatus,\n        connected,\n        requestConnectCaptcha,\n        setSocialConnectCallback,\n    };\n};\n", "import type { AuthType, ERC4337Options } from '@particle-network/auth-core';\nimport type { WalletOption } from '@particle-network/wallet';\nimport { useParticleAuth } from '..';\nimport type { CurrencyUnit, Theme } from '../../types';\nimport { type CustomStyle, type Language } from '../types';\nimport type { PromptSettingConfig } from './../../api/model/bundle';\n\nexport const useCustomize = () => {\n    const { modalOptions, setModalOptions } = useParticleAuth();\n\n    const setThemeType = (themeType?: Theme) => {\n        setModalOptions({\n            themeType,\n        });\n    };\n\n    const setCustomStyle = (customStyle?: CustomStyle) => {\n        setModalOptions({\n            customStyle: customStyle ? { ...customStyle } : undefined,\n        });\n    };\n\n    const setLanguage = (language?: Language) => {\n        setModalOptions({\n            language,\n        });\n    };\n\n    const setAuthTypes = (authTypes?: AuthType[]) => {\n        setModalOptions({\n            authTypes: authTypes ? [...authTypes] : undefined,\n        });\n    };\n\n    const setFiatCoin = (fiatCoin?: CurrencyUnit) => {\n        setModalOptions({\n            fiatCoin,\n        });\n    };\n\n    const setERC4337 = (erc4337?: ERC4337Options) => {\n        setModalOptions({\n            erc4337,\n        });\n    };\n\n    const setWalletOptions = (wallet: Omit<WalletOption, 'language' | 'erc4337'>) => {\n        setModalOptions({\n            wallet: { ...wallet },\n        });\n    };\n\n    const setPromptSettingConfig = (promptSettingConfig?: PromptSettingConfig) => {\n        setModalOptions({\n            promptSettingConfig,\n        });\n    };\n\n    return {\n        themeType: modalOptions.themeType,\n        setThemeType,\n        customStyle: modalOptions.customStyle,\n        setCustomStyle: setCustomStyle,\n        walletOptions: modalOptions.wallet,\n        setWalletOptions,\n        language: modalOptions.language,\n        setLanguage,\n        authTypes: modalOptions.authTypes,\n        setAuthTypes,\n        fiatCoin: modalOptions.fiatCoin,\n        setFiatCoin,\n        erc4337: modalOptions.erc4337,\n        setERC4337,\n        promptSettingConfig: modalOptions.promptSettingConfig,\n        setPromptSettingConfig,\n    };\n};\n", "import type { PrefixedHexString } from '@ethereumjs/util';\nimport { isHexString, stripHexPrefix } from '@ethereumjs/util';\nimport { BigNumber } from 'bignumber.js';\nimport BN from 'bn.js';\nimport ethjs from 'ethjs-unit';\nimport numbro from 'numbro';\nimport { bnToHex, isNullish, toHexPrefixString } from './common-utils';\n\nexport function formatTokenAmount(amount: number, decimals: number): string {\n    if (!amount || !decimals) {\n        return '0';\n    }\n\n    return numbro(amount / Math.pow(10, decimals)).format({\n        thousandSeparated: true,\n        mantissa: decimals,\n        trimMantissa: true,\n    });\n}\n\nexport function toWeiBigNumber(amount: string | number | undefined, unit = 'ether'): BigNumber {\n    return new BigNumber(bnToHex(toWei(amount, unit)));\n}\n\nexport function toBigNumber(amount: string | number | undefined): BigNumber {\n    if (typeof amount === 'string' || typeof amount === 'number') {\n        return new BigNumber(amount);\n    }\n    return new BigNumber(toHexPrefixString(amount));\n}\n\nexport function toWei(amount: BN | string | number | undefined, unit = 'ether'): BN {\n    if (!amount) {\n        return new BN(0);\n    }\n\n    return ethjs.toWei(amount, unit);\n}\n\nexport function fromWei(amount: BN | PrefixedHexString | undefined, unit = 'ether'): string {\n    if (!amount) {\n        return '0';\n    }\n\n    let result;\n    if (typeof amount === 'string' && amount.startsWith('0x')) {\n        result = ethjs.fromWei(new BN(stripHexPrefix(amount), 16), unit);\n    } else {\n        result = ethjs.fromWei(amount, unit);\n    }\n    return result;\n}\n\nexport function fromWeiFormat(amount: BN | PrefixedHexString | undefined, unit = 'ether', mantissa = 6): string {\n    if (!amount) {\n        return '0';\n    }\n\n    let result;\n    if (typeof amount === 'string' && amount.startsWith('0x')) {\n        result = ethjs.fromWei(new BN(stripHexPrefix(amount), 16), unit);\n    } else {\n        console.log('');\n        result = ethjs.fromWei(amount, unit);\n    }\n    return numbro(result).format({\n        thousandSeparated: true,\n        trimMantissa: true,\n        mantissa: mantissa,\n    });\n}\n\nexport function formatPrice({\n    amount,\n    price,\n    mantissa,\n    fiatCoin,\n}: {\n    amount: string | number;\n    price: number;\n    mantissa?: number;\n    fiatCoin: string;\n}): string {\n    if (!price) {\n        return '';\n    }\n    const value = new BigNumber(amount).multipliedBy(new BigNumber(price));\n    if (isNullish(mantissa)) {\n        if (value.lt(new BigNumber(1))) {\n            mantissa = 4;\n        } else {\n            mantissa = 2;\n        }\n    }\n\n    return `\u2248${numbro(value)\n        .format({\n            thousandSeparated: true,\n            trimMantissa: true,\n            mantissa: mantissa,\n        })\n        .replace(/-0$/, '0')} ${fiatCoin.toUpperCase()}`;\n}\n\nexport function trimDecimals(value: number | string, mantissa = 6): string {\n    return numbro(value).format({\n        thousandSeparated: true,\n        trimMantissa: true,\n        mantissa: mantissa,\n    });\n}\n\nexport function fromSunFormat(amount: PrefixedHexString | string, mantissa = 6): string {\n    const bn = new BigNumber(amount, isHexString(amount) ? 16 : 10);\n    const value = bn.div(new BigNumber(1000_000)).toString(10);\n    return numbro(value).format({\n        thousandSeparated: true,\n        trimMantissa: true,\n        mantissa: mantissa,\n    });\n}\n\n/**\n * \u683C\u5F0F\u5316\u4EE3\u5E01\u6570\u91CF\n * @param value \u539F\u59CB\u503C\uFF0C\u53EF\u4EE5\u662F BigNumber\u3001number \u6216 string \u7C7B\u578B\n * @param decimals \u5C0F\u6570\u4F4D\u6570\n * @returns \u683C\u5F0F\u5316\u540E\u7684\u4EE3\u5E01\u6570\u91CF\n */\nexport const formatTokenAmount2 = (value: BigNumber | number | string, decimals: number): string => {\n    let bn: BigNumber;\n    if (!(value instanceof BigNumber)) {\n        bn = new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));\n    } else {\n        bn = value;\n    }\n\n    const str = bn.toFixed();\n    const [int, dec] = str.split('.');\n    let decimalLength = 9;\n\n    if (int.length > 15) {\n        return bn.toExponential(2); // \u4F7F\u7528\u79D1\u5B66\u8BA1\u6570\u6CD5\uFF0C\u5C0F\u6570\u70B9\u540E\u4E24\u4F4D\n    }\n\n    if (int.length > 5) {\n        decimalLength = Math.max(9 - (int.length - 5), 0);\n    }\n\n    if (dec && decimalLength > 0) {\n        const decPart = dec.slice(0, decimalLength);\n        return new BigNumber(`${int}.${decPart}`).toFixed();\n    }\n\n    return int;\n};\n\n/**\n * \u683C\u5F0F\u5316\u6CD5\u5E01\u6570\u91CF\n * @param value \u539F\u59CB\u503C\uFF0C\u53EF\u4EE5\u662F BigNumber\u3001number \u6216 string \u7C7B\u578B\n * @returns \u683C\u5F0F\u5316\u540E\u7684\u6CD5\u5E01\u6570\u91CF\n */\nexport const formatFiatAmount = (value: BigNumber | number | string): string => {\n    let bn: BigNumber;\n    if (!(value instanceof BigNumber)) {\n        bn = new BigNumber(value);\n    } else {\n        bn = value;\n    }\n\n    const str = bn.toFixed();\n    const [int, dec] = str.split('.');\n\n    if (dec) {\n        const decPart = dec.slice(0, 4);\n        return new BigNumber(`${int}.${decPart}`).toFixed();\n    }\n\n    return int;\n};\n", "import { useParticleAuth } from '..';\n\nexport const useUserInfo = () => {\n    const { userInfo } = useParticleAuth();\n    return {\n        userInfo,\n    };\n};\n", "import {\n    AuthCoreEvent,\n    AuthType,\n    EvmRpcMethod,\n    SignTypedDataVersion,\n    check,\n    getLatestAuthType,\n    isConnected,\n    particleAuth,\n    requireNotNullish,\n    type EIP1559TxData,\n    type MessageTypes,\n    type PrefixedHexString,\n    type TxData,\n    type TypedDataV1,\n    type TypedMessage,\n} from '@particle-network/auth-core';\nimport { chains, type ChainInfo } from '@particle-network/chains';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useCustomNavigate, useEvents, useModalOptions, useParticleAuth } from '..';\nimport { AuthError } from '../../api/model/authError';\nimport { AuthPage } from '../../components/customRouter';\nimport { getEvmChain } from '../../utils/chain-utils';\nimport { toHexPrefixString } from '../../utils/common-utils';\nimport evmSendTransaction from '../../utils/evmSendTransaction';\nimport { EVMProvider } from '../evmProvider';\nimport { AuthCoreModalEvent } from '../types';\nimport { useAuthCore } from './useAuthCore';\nimport { useConnect } from './useConnect';\nimport { useUserInfo } from './useUserInfo';\n\nexport const useEthereum = () => {\n    const navigate = useCustomNavigate();\n\n    const { events } = useEvents();\n\n    const [chainId, setChainId] = useState<number>(Number(particleAuth.ethereum.chainId));\n\n    const [chainInfo, setChainInfo] = useState<ChainInfo>(requireNotNullish(getEvmChain(chainId)));\n\n    const [address, setAddress] = useState(particleAuth.ethereum.selectedAddress);\n\n    const { userInfo } = useUserInfo();\n\n    const { needRestoreWallet } = useAuthCore();\n\n    const { modalOptions } = useModalOptions();\n\n    const { setAuthCoreModal } = useParticleAuth();\n\n    const { connect } = useConnect();\n\n    const silentApprove = useMemo(() => {\n        if (\n            needRestoreWallet ||\n            userInfo?.security_account.has_set_payment_password ||\n            modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign ||\n            getLatestAuthType() !== AuthType.jwt\n        ) {\n            return false;\n        }\n        return true;\n    }, [\n        userInfo?.security_account.has_set_payment_password,\n        needRestoreWallet,\n        modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign,\n    ]);\n\n    useEffect(() => {\n        const onChainChanged = (chainId: string) => {\n            setChainId(Number(chainId));\n        };\n        particleAuth.ethereum.on('chainChanged', onChainChanged);\n\n        const onConnect = () => {\n            setAddress(particleAuth.ethereum.selectedAddress);\n        };\n        particleAuth.ethereum.on('connect', onConnect);\n\n        const onAccountsChanged = (accounts: string[]) => {\n            if (accounts[0]) {\n                setAddress(accounts[0]);\n            }\n        };\n        particleAuth.ethereum.on('accountsChanged', onAccountsChanged);\n\n        const onDisconnect = () => {\n            setAddress(null);\n        };\n        particleAuth.ethereum.on('disconnect', onDisconnect);\n\n        const onRequestAccount = ({ resolve, reject }: any) => {\n            connect()\n                .then((userInfo) => {\n                    resolve(userInfo);\n                })\n                .catch((error) => {\n                    reject(error);\n                });\n        };\n        particleAuth.on(AuthCoreEvent.RequestEthereumAccount, onRequestAccount);\n\n        return () => {\n            particleAuth.ethereum.off('chainChanged', onChainChanged);\n            particleAuth.ethereum.off('connect', onConnect);\n            particleAuth.ethereum.off('accountsChanged', onAccountsChanged);\n            particleAuth.ethereum.off('disconnect', onDisconnect);\n            particleAuth.off(AuthCoreEvent.RequestEthereumAccount, onRequestAccount);\n        };\n    }, [connect]);\n\n    useEffect(() => {\n        if (chainId) {\n            setChainInfo(requireNotNullish(getEvmChain(chainId)));\n        }\n    }, [chainId]);\n\n    const checkAuthCoreState = () => {\n        check(particleAuth, 'Please init first!');\n        check(isConnected(), AuthError.notLogin());\n        check(particleAuth.ethereum.selectedAddress, 'Please create wallet first!');\n    };\n\n    const signImpl = useCallback(\n        async <T>(state: { method: string; param: unknown }): Promise<T> => {\n            checkAuthCoreState();\n            const result = await new Promise<T>((resolve, reject) => {\n                if (events.listenerCount(AuthCoreModalEvent.SignResponse) > 0) {\n                    reject(AuthError.pending('sign'));\n                } else {\n                    events.once(AuthCoreModalEvent.SignResponse, (response) => {\n                        if (response.error) {\n                            reject(response.error);\n                        } else {\n                            resolve(response.result);\n                        }\n                        setAuthCoreModal({ particleModalVisible: false });\n                    });\n                    navigate(AuthPage.EvmSign, {\n                        replace: true,\n                        state,\n                    });\n                }\n            });\n            return result;\n        },\n        [navigate, events]\n    );\n\n    const signMessage = useCallback(\n        async (message: PrefixedHexString | string, uniq?: boolean): Promise<string> => {\n            if (silentApprove) {\n                const result = await particleAuth.ethereum.signMessage(toHexPrefixString(message), uniq);\n                return result;\n            } else {\n                const result = await signImpl<string>({\n                    param: toHexPrefixString(message),\n                    method: uniq ? EvmRpcMethod.personalSignUniq : EvmRpcMethod.personalSign,\n                });\n                return result;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signTypedData = useCallback(\n        async <V extends SignTypedDataVersion, T extends MessageTypes>({\n            data,\n            version,\n            uniq,\n        }: {\n            data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n            version: V;\n            uniq?: boolean;\n        }): Promise<string> => {\n            if (silentApprove) {\n                const result = await particleAuth.ethereum.signTypedData({ data, version, uniq });\n                return result;\n            } else {\n                const result = await signImpl<string>({\n                    param: data,\n                    method: getSignTypedDataMethod({ version, uniq }),\n                });\n                return result;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const sendTransaction = useCallback(\n        async (transaction: Omit<TxData, 'from'> | Omit<EIP1559TxData, 'from'>): Promise<string> => {\n            if (transaction.chainId && !chains.getEVMChainInfoById(Number(transaction.chainId))) {\n                throw new Error(`The chainId: ${transaction.chainId} is not supported.`);\n            }\n\n            if (silentApprove) {\n                const result = await evmSendTransaction(transaction);\n                return result;\n            } else {\n                const result = await signImpl<string>({\n                    param: { ...transaction, from: address, chainId: transaction.chainId || chainId },\n                    method: EvmRpcMethod.ethSendTransaction,\n                });\n                return result;\n            }\n        },\n        [address, chainId, signImpl, silentApprove]\n    );\n\n    const switchChain = useCallback(async (id: number | PrefixedHexString) => {\n        await requireNotNullish(particleAuth, 'Please init first!').ethereum.switchChain(id);\n    }, []);\n\n    const enable = useCallback(async (): Promise<string> => {\n        const result = await requireNotNullish(particleAuth, 'Please init first!').ethereum.enable();\n        return result[0];\n    }, []);\n\n    const provider = useMemo(() => {\n        const eip1193Provider = new EVMProvider();\n        eip1193Provider.signMessage = signMessage;\n        eip1193Provider.signTypedData = signTypedData;\n        eip1193Provider.sendTransaction = sendTransaction;\n        return eip1193Provider;\n    }, []);\n\n    useEffect(() => {\n        if (provider) {\n            provider.signMessage = signMessage;\n            provider.signTypedData = signTypedData;\n            provider.sendTransaction = sendTransaction;\n        }\n    }, [provider, signMessage, signTypedData, sendTransaction]);\n\n    return {\n        provider,\n        address,\n        chainId,\n        chainInfo,\n        switchChain,\n        signMessage,\n        signTypedData,\n        sendTransaction,\n        enable,\n    };\n};\n\nfunction getSignTypedDataMethod({ version, uniq }: { version: SignTypedDataVersion; uniq?: boolean }): string {\n    if (SignTypedDataVersion.V1 === version) {\n        return EvmRpcMethod.ethSignTypedDataV1;\n    } else if (SignTypedDataVersion.V3 === version) {\n        return EvmRpcMethod.ethSignTypedDataV3;\n    } else {\n        return uniq ? EvmRpcMethod.ethSignTypedDataV4Uniq : EvmRpcMethod.ethSignTypedDataV4;\n    }\n}\n", "import {\n    EvmEnhancedMethod,\n    GasFeeMode,\n    isNullish,\n    particleAuth,\n    type EIP1559TxData,\n    type GasFeeResult,\n    type TxData,\n} from '@particle-network/auth-core';\nimport { chains } from '@particle-network/chains';\nimport { bnToHex } from './common-utils';\nimport { toWei } from './number-utils';\nimport { parseTransaction } from './transaction-utils';\n\nconst evmSendTransaction = async (transaction: Omit<TxData | EIP1559TxData, 'from'>): Promise<string> => {\n    const chainId = Number(transaction.chainId || particleAuth.ethereum.chainId);\n    const txData = {\n        ...transaction,\n        from: particleAuth.ethereum.selectedAddress!,\n        chainId,\n    };\n\n    const chain = chains.getEVMChainInfoById(chainId)!;\n\n    if (isNullish(txData.data)) {\n        txData.data = '0x';\n    }\n\n    const evmTx = parseTransaction(txData, chain);\n\n    if (!evmTx.gasLimit) {\n        evmTx.gasLimit = await fetchEstimateGas(\n            { from: evmTx.from, to: evmTx.to, value: evmTx.value, data: evmTx.data },\n            chainId\n        );\n    }\n\n    if (Number(evmTx.type) === 2) {\n        if (!evmTx.maxPriorityFeePerGas || !evmTx.maxFeePerGas) {\n            const gasFee = await fetchSuggestedGasFee(chainId);\n            evmTx.maxFeePerGas = bnToHex(toWei(gasFee[GasFeeMode.medium].maxFeePerGas, 'gwei'));\n            evmTx.maxPriorityFeePerGas = bnToHex(toWei(gasFee[GasFeeMode.medium].maxPriorityFeePerGas, 'gwei'));\n        }\n    } else {\n        if (!evmTx.gasPrice) {\n            const gasFee = await fetchSuggestedGasFee(chainId);\n            evmTx.gasPrice = bnToHex(toWei(gasFee[GasFeeMode.medium].maxFeePerGas, 'gwei'));\n        }\n    }\n\n    const result = await particleAuth.ethereum.sendTransaction(evmTx);\n    return result;\n};\n\nconst fetchEstimateGas = async (\n    param: {\n        from: string;\n        to?: string;\n        value?: string | number;\n        data?: string;\n    },\n    chainId: number\n): Promise<string> => {\n    if (!param.to || param.to.length === 0) {\n        delete param.to;\n    }\n    const result = await particleAuth.ethereum.request({\n        chainId,\n        method: 'eth_estimateGas',\n        params: [param],\n    });\n    return result;\n};\n\nconst fetchSuggestedGasFee = async (chainId: number): Promise<GasFeeResult> => {\n    const result = await particleAuth.ethereum.request({\n        chainId,\n        method: EvmEnhancedMethod.suggestedGasFees,\n    });\n    return result;\n};\n\nexport default evmSendTransaction;\n", "import { isHexString } from '@ethereumjs/util';\nimport type { GasFeeMode } from '@particle-network/auth-core';\nimport { tronAddressToHex, type EIP1559TxData, type EVMTransaction, type TxData } from '@particle-network/auth-core';\nimport type { Chain, ChainInfo } from '@particle-network/chains';\nimport { chains } from '@particle-network/chains';\nimport { BigNumber } from 'bignumber.js';\nimport { toHexPrefixString } from './common-utils';\n\nexport function isEIP1559Type(type: string | number | undefined): boolean {\n    if (typeof type == 'number') {\n        return type === 2;\n    } else if (typeof type == 'string') {\n        return Number(type) === 2;\n    }\n    return false;\n}\n\nconst parseValue = (value: string | number) => {\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return value;\n        } else {\n            return `0x${new BigNumber(value).toString(16)}`;\n        }\n    } else {\n        return toHexPrefixString(value);\n    }\n};\n\nexport function parseTransaction(txData: TxData | EIP1559TxData, chainInfo: ChainInfo): EVMTransaction {\n    let nonce,\n        gasPrice,\n        gasLimit,\n        from,\n        to,\n        value,\n        data,\n        type,\n        chainId,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        action,\n        gasLevel;\n\n    const tron = isTron(chainInfo);\n    if (tron && !isHexString(txData.from)) {\n        from = tronAddressToHex(txData.from);\n    } else {\n        from = txData.from;\n    }\n    if (txData.to) {\n        if (tron && !isHexString(txData.to)) {\n            to = tronAddressToHex(txData.to);\n        } else {\n            to = txData.to;\n        }\n    }\n\n    if (txData.gas && !txData.gasLimit) {\n        gasLimit = parseValue(txData.gas);\n    } else if (txData.gasLimit) {\n        gasLimit = parseValue(txData.gasLimit);\n    }\n    if (txData.value) {\n        value = parseValue(txData.value);\n    }\n    if (txData.data) {\n        data = toHexPrefixString(txData.data);\n    }\n    if (txData.chainId) {\n        chainId = parseValue(txData.chainId);\n    } else {\n        chainId = parseValue(chainInfo.id);\n    }\n    if (txData.nonce) {\n        nonce = parseValue(txData.nonce);\n    }\n    if ('maxPriorityFeePerGas' in txData && txData.maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = parseValue(txData.maxPriorityFeePerGas);\n    }\n    if ('maxFeePerGas' in txData && txData.maxFeePerGas) {\n        maxFeePerGas = parseValue(txData.maxFeePerGas);\n    }\n    if (txData.gasPrice) {\n        gasPrice = parseValue(txData.gasPrice);\n    }\n\n    if (txData.type || txData.type === 0) {\n        type = parseValue(txData.type);\n    } else {\n        if (\n            'maxPriorityFeePerGas' in txData &&\n            txData.maxPriorityFeePerGas &&\n            'maxFeePerGas' in txData &&\n            txData.maxFeePerGas &&\n            chains.isChainSupportEIP1559(chainInfo)\n        ) {\n            type = '0x2';\n        } else if ('gasPrice' in txData && txData.gasPrice) {\n            type = '0x0';\n        } else {\n            type = chains.isChainSupportEIP1559(chainInfo) ? '0x2' : '0x0';\n        }\n    }\n\n    if (txData.action && ['normal', 'cancel', 'speedup'].includes(txData.action)) {\n        action = txData.action;\n    } else {\n        action = undefined;\n    }\n\n    if (txData.gasLevel && ['custom', 'low', 'medium', 'high'].includes(txData.gasLevel)) {\n        gasLevel = txData.gasLevel as GasFeeMode;\n    } else {\n        gasLevel = undefined;\n    }\n\n    return {\n        nonce,\n        gasPrice,\n        gasLimit,\n        from,\n        to,\n        value,\n        data,\n        type,\n        chainId,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        action,\n        gasLevel,\n    };\n}\n\nexport function isEMVMethod(method: string): boolean {\n    return typeof method === 'string' && (method.startsWith('eth_') || method.startsWith('personal_'));\n}\n\n/**\n * isEVMAddress\n * @param address\n * @returns\n */\nexport function isEVMAddress(address: string): boolean {\n    // @ts-ignore\n    return address && address.length === 42 && address.startsWith('0x');\n}\n\nexport function isTron(chain: Chain): boolean {\n    return chain.name.toLowerCase() === 'tron';\n}\n", "import { addHexPrefix, isHexString } from '@ethereumjs/util';\nimport { providerErrors, rpcErrors } from '@metamask/rpc-errors';\nimport {\n    EvmRpcMethod,\n    ethereumUtils,\n    isNullish,\n    requireNotNullish,\n    type EIP1193Provider,\n    type EIP1559TxData,\n    type MessageTypes,\n    type PrefixedHexString,\n    type RpcInput,\n    type SignTypedDataVersion,\n    type TxData,\n    type TypedDataV1,\n    type TypedMessage,\n} from '@particle-network/auth-core';\nimport { chains } from '@particle-network/chains';\n\nexport class EVMProvider implements EIP1193Provider {\n    signMessage = async (message: PrefixedHexString | string, uniq?: boolean): Promise<string> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    sendTransaction = async (transaction: Omit<TxData | EIP1559TxData, 'from'>): Promise<string> => {\n        throw new Error('sendTransaction not implemented.');\n    };\n\n    signTypedData = async <V extends SignTypedDataVersion, T extends MessageTypes>({\n        data,\n        version,\n        uniq,\n    }: {\n        data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n        version: V;\n        uniq?: boolean;\n    }): Promise<string> => {\n        throw new Error('signTypedData not implemented.');\n    };\n\n    get selectedAddress(): string | null {\n        return requireNotNullish(window.particleAuth).ethereum.selectedAddress;\n    }\n\n    get chainId(): string {\n        return requireNotNullish(window.particleAuth).ethereum.chainId;\n    }\n\n    isConnected(): boolean {\n        return requireNotNullish(window.particleAuth).ethereum.isConnected();\n    }\n\n    on(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.on(event, listener);\n        return this;\n    }\n\n    once(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.once(event, listener);\n        return this;\n    }\n\n    off(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.off(event, listener);\n        return this;\n    }\n\n    removeListener(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.ethereum.removeListener(event, listener);\n        return this;\n    }\n\n    /**\n     * @deprecated user `request` instead\n     */\n    async enable(): Promise<string[]> {\n        return await requireNotNullish(window.particleAuth).ethereum.enable();\n    }\n\n    async disconnect() {\n        return await requireNotNullish(window.particleAuth).ethereum.disconnect();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(data: Partial<RpcInput>): Promise<any> {\n        const method = data.method;\n        if (!method) {\n            throw rpcErrors.invalidParams('Invalid parameters: method is required.');\n        }\n        if (Object.values(EvmRpcMethod).includes(method as EvmRpcMethod)) {\n            if (method === EvmRpcMethod.ethAccounts || method === EvmRpcMethod.ethRequestAccounts) {\n                return await requireNotNullish(window.particleAuth).ethereum.request(data);\n            } else if (method === EvmRpcMethod.ethChainId) {\n                return this.chainId;\n            } else if (method.startsWith(EvmRpcMethod.ethSignTypedData)) {\n                this.#checkConnected();\n                /**\n                 * v1: https://medium.com/metamask/scaling-web3-with-signtypeddata-91d6efc8b290\n                 * v3: https://medium.com/metamask/eip712-is-coming-what-to-expect-and-how-to-use-it-bb92fd1a7a26\n                 * v4: https://docs.metamask.io/wallet/reference/eth_signtypeddata_v4/\n                 */\n                const isV1 = ethereumUtils.isSignTypedDataV1(method);\n                const from = isV1 ? data?.params?.[1] : data?.params?.[0];\n                let typedData = isV1 ? data?.params?.[0] : data?.params?.[1];\n                if (!from || typeof from !== 'string') {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide an Ethereum address.');\n                }\n                if (!typedData) {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide typed data.');\n                }\n                if (from.toLowerCase() !== this.selectedAddress?.toLowerCase()) {\n                    throw providerErrors.unauthorized();\n                }\n                if (typeof typedData === 'string') {\n                    typedData = JSON.parse(typedData);\n                }\n                const uniq = ethereumUtils.isUniq(method);\n                const version = ethereumUtils.getSignTypedVersion(method);\n\n                const result = await this.signTypedData({\n                    data: typedData as any, // eslint-disable-line\n                    version,\n                    uniq,\n                });\n                return result;\n            } else if (method.startsWith(EvmRpcMethod.personalSign)) {\n                this.#checkConnected();\n                let message = data?.params?.[0];\n                const from = data?.params?.[1];\n                if (!message || typeof message !== 'string') {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide a valid message.');\n                }\n                if (!from || typeof from !== 'string') {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide an Ethereum address.');\n                }\n                if (from.toLowerCase() !== this.selectedAddress?.toLowerCase()) {\n                    throw providerErrors.unauthorized();\n                }\n\n                if (!isHexString(message)) {\n                    message = addHexPrefix(Buffer.from(message).toString('hex'));\n                }\n                const uniq = ethereumUtils.isUniq(method);\n                const result = await this.signMessage(message as PrefixedHexString, uniq);\n                return result;\n            } else if (method === EvmRpcMethod.walletSwitchEthereumChain) {\n                return await requireNotNullish(window.particleAuth).ethereum.request(data);\n            } else if (method === EvmRpcMethod.ethSendTransaction) {\n                this.#checkConnected();\n                const chainId = Number(data.chainId || this.chainId);\n                const chain = chains.getEVMChainInfoById(chainId);\n                if (!chain) {\n                    throw providerErrors.chainDisconnected();\n                }\n                const txData = data.params?.[0] as any; // eslint-disable-line\n                if (!txData) {\n                    throw rpcErrors.invalidParams('Invalid parameters: must provide an transaction data.');\n                }\n                if (isNullish(txData.type)) {\n                    if (chains.isChainSupportEIP1559(chain)) {\n                        // set transaction default type \"0x2\", EIP1559.\n                        txData.type = '0x2';\n                    } else {\n                        txData.type = '0x0';\n                    }\n                }\n                if (isNullish(txData.chainId)) {\n                    txData.chainId = `0x${chainId.toString(16)}`;\n                }\n                if (isNullish(txData.nonce)) {\n                    txData.nonce = '0x0';\n                }\n                if (isNullish(txData.data)) {\n                    txData.data = '0x';\n                }\n                const result = await this.sendTransaction(txData);\n                return result;\n            } else {\n                throw providerErrors.unsupportedMethod();\n            }\n        } else {\n            return await requireNotNullish(window.particleAuth).ethereum.request(data);\n        }\n    }\n\n    #checkConnected() {\n        if (!this.isConnected()) {\n            throw providerErrors.unauthorized();\n        }\n    }\n}\n", "import { useEffect, useReducer } from 'react';\n\nexport const useIsMounted = () => {\n    const [mounted, setMounted] = useReducer(() => true, false);\n    useEffect(setMounted, [setMounted]);\n    return mounted;\n};\n", "import {\n    AuthCoreEvent,\n    AuthType,\n    SolanaRpcMethod,\n    check,\n    getLatestAuthType,\n    isConnected,\n    particleAuth,\n    requireNotNullish,\n} from '@particle-network/auth-core';\nimport { chains, type ChainInfo } from '@particle-network/chains';\nimport type { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useCustomNavigate, useEvents, useModalOptions, useParticleAuth } from '..';\nimport { AuthError } from '../../api/model/authError';\nimport { AuthPage } from '../../components/customRouter';\nimport { getSolanaChain } from '../../utils/chain-utils';\nimport { SolanaWallet } from '../solanaWallet';\nimport { AuthCoreModalEvent } from '../types';\nimport { useAuthCore } from './useAuthCore';\nimport { useConnect } from './useConnect';\nimport { useUserInfo } from './useUserInfo';\n\nexport const useSolana = () => {\n    const navigate = useCustomNavigate();\n\n    const { events } = useEvents();\n\n    const [chainId, setChainId] = useState<number>(particleAuth.solana.chainId);\n\n    const [chainInfo, setChainInfo] = useState<ChainInfo>(\n        requireNotNullish(getSolanaChain(particleAuth.solana.chainId))\n    );\n\n    const [address, setAddress] = useState(particleAuth.solana.selectedAddress);\n\n    const { setAuthCoreModal } = useParticleAuth();\n\n    const { connect } = useConnect();\n\n    const { userInfo } = useUserInfo();\n\n    const { needRestoreWallet } = useAuthCore();\n\n    const { modalOptions } = useModalOptions();\n\n    const silentApprove = useMemo(() => {\n        if (\n            needRestoreWallet ||\n            userInfo?.security_account.has_set_payment_password ||\n            modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign ||\n            getLatestAuthType() !== AuthType.jwt\n        ) {\n            return false;\n        }\n        return true;\n    }, [\n        userInfo?.security_account.has_set_payment_password,\n        needRestoreWallet,\n        modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign,\n    ]);\n\n    useEffect(() => {\n        const onChainChanged = (chainId: number) => {\n            setChainId(chainId);\n        };\n        particleAuth.solana.on('chainChanged', onChainChanged);\n\n        const onConnect = () => {\n            setAddress(particleAuth.solana.selectedAddress);\n        };\n        particleAuth.solana.on('connect', onConnect);\n\n        setChainId(particleAuth.solana.chainId ?? 101);\n\n        const onDisconnect = () => {\n            setAddress(null);\n        };\n        particleAuth.solana.on('disconnect', onDisconnect);\n\n        const onRequestAccount = ({ resolve, reject }: any) => {\n            connect()\n                .then((userInfo) => {\n                    resolve(userInfo);\n                })\n                .catch((error) => {\n                    reject(error);\n                });\n        };\n        particleAuth.on(AuthCoreEvent.RequestSolanaAccount, onRequestAccount);\n\n        return () => {\n            particleAuth.solana.off('chainChanged', onChainChanged);\n            particleAuth.solana.off('connect', onConnect);\n            particleAuth.solana.off('disconnect', onDisconnect);\n            particleAuth.off(AuthCoreEvent.RequestSolanaAccount, onRequestAccount);\n        };\n    }, [connect]);\n\n    useEffect(() => {\n        if (chainId) {\n            setChainInfo(requireNotNullish(getSolanaChain(chainId)));\n        }\n    }, [chainId]);\n\n    const checkAuthCoreState = () => {\n        check(particleAuth, 'Please init first!');\n        check(isConnected(), AuthError.notLogin());\n        check(particleAuth.solana.selectedAddress, 'Please create wallet first!');\n    };\n\n    const signImpl = useCallback(\n        async <T>(state: { method: string; param: unknown; chainId?: number }): Promise<T> => {\n            checkAuthCoreState();\n            const result = await new Promise<T>((resolve, reject) => {\n                if (events.listenerCount(AuthCoreModalEvent.SignResponse) > 0) {\n                    reject(AuthError.pending('sign'));\n                } else {\n                    events.once(AuthCoreModalEvent.SignResponse, (response) => {\n                        if (response.error) {\n                            reject(response.error);\n                        } else {\n                            resolve(response.result);\n                        }\n                        setAuthCoreModal({ particleModalVisible: false });\n                    });\n                    navigate(AuthPage.SolanaSign, {\n                        replace: true,\n                        state,\n                    });\n                }\n            });\n            return result;\n        },\n        [navigate]\n    );\n\n    const signMessage = useCallback(\n        async (message: Uint8Array): Promise<Uint8Array> => {\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signMessage(message);\n                return signature;\n            } else {\n                const signature = await signImpl<Uint8Array>({\n                    param: message,\n                    method: SolanaRpcMethod.signMessage,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signTransaction = useCallback(\n        async <T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<T> => {\n            check(!chainId || chains.getSolanaChainInfoById(chainId), `The chainId: ${chainId} is not supported`);\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signTransaction(transaction, chainId);\n                return signature;\n            } else {\n                const signature = await signImpl<T>({\n                    param: transaction,\n                    method: SolanaRpcMethod.signTransaction,\n                    chainId,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signAllTransactions = useCallback(\n        async <T extends Transaction | VersionedTransaction>(transactions: T[], chainId?: number): Promise<T[]> => {\n            check(!chainId || chains.getSolanaChainInfoById(chainId), `The chainId: ${chainId} is not supported`);\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signAllTransactions(transactions, chainId);\n                return signature;\n            } else {\n                const signature = await signImpl<T[]>({\n                    param: transactions,\n                    method: SolanaRpcMethod.signAllTransactions,\n                    chainId,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const signAndSendTransaction = useCallback(\n        async <T extends Transaction | VersionedTransaction>(transaction: T, chainId?: number): Promise<string> => {\n            check(!chainId || chains.getSolanaChainInfoById(chainId), `The chainId: ${chainId} is not supported`);\n            if (silentApprove) {\n                const signature = await particleAuth.solana.signAndSendTransaction(transaction, chainId);\n                return signature;\n            } else {\n                const signature = await signImpl<string>({\n                    param: transaction,\n                    method: SolanaRpcMethod.signAndSendTransaction,\n                    chainId,\n                });\n                return signature;\n            }\n        },\n        [signImpl, silentApprove]\n    );\n\n    const switchChain = useCallback(async (id: number) => {\n        await requireNotNullish(particleAuth, 'Please init first!').solana.switchChain(id);\n    }, []);\n\n    const enable = useCallback(async (): Promise<string> => {\n        await requireNotNullish(particleAuth, 'Please init first!').solana.connect();\n        return requireNotNullish(particleAuth.solana.selectedAddress);\n    }, []);\n\n    const wallet = useMemo(() => {\n        const solanaWallet = new SolanaWallet();\n        solanaWallet.signMessage = signMessage;\n        solanaWallet.signTransaction = signTransaction;\n        solanaWallet.signAllTransactions = signAllTransactions;\n        solanaWallet.signAndSendTransaction = signAndSendTransaction;\n        return solanaWallet;\n    }, []);\n\n    useEffect(() => {\n        if (wallet) {\n            wallet.signMessage = signMessage;\n            wallet.signTransaction = signTransaction;\n            wallet.signAllTransactions = signAllTransactions;\n            wallet.signAndSendTransaction = signAndSendTransaction;\n        }\n    }, [wallet, signMessage, signTransaction, signAllTransactions, signAndSendTransaction]);\n\n    return {\n        address,\n        chainId,\n        chainInfo,\n        switchChain,\n        signMessage,\n        signTransaction,\n        signAllTransactions,\n        signAndSendTransaction,\n        enable,\n        wallet,\n    };\n};\n", "import type { RpcInput } from '@particle-network/auth-core';\nimport type { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\n\nexport class SolanaWallet {\n    readonly isParticleNetwork = true;\n\n    name = 'Particle';\n    url = 'https://particle.network';\n    icon = 'https://static.particle.network/wallet-icons/Particle.png';\n\n    on(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.on(event, listener);\n        return this;\n    }\n\n    once(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.once(event, listener);\n        return this;\n    }\n\n    off(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.off(event, listener);\n        return this;\n    }\n\n    removeListener(event: string, listener: (...args: any[]) => void): this {\n        window.particleAuth?.solana.removeListener(event, listener);\n        return this;\n    }\n\n    get connecting(): boolean {\n        return window.particleAuth?.solana.connecting ?? false;\n    }\n\n    get connected(): boolean {\n        return window.particleAuth?.solana.connected ?? false;\n    }\n\n    async publicKey(): Promise<PublicKey | undefined> {\n        return window.particleAuth?.solana.publicKey();\n    }\n\n    get selectedAddress(): string | null {\n        return window.particleAuth?.solana.selectedAddress ?? null;\n    }\n\n    get chainId(): number {\n        return window.particleAuth?.solana.chainId ?? 101;\n    }\n\n    async connect(): Promise<void> {\n        await window.particleAuth?.solana.connect();\n    }\n\n    async disconnect(): Promise<void> {\n        await window.particleAuth?.solana.disconnect();\n    }\n\n    signTransaction = async <T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        chainId?: number\n    ): Promise<T> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    signAllTransactions = async <T extends Transaction | VersionedTransaction>(\n        transactions: T[],\n        chainId?: number\n    ): Promise<T[]> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    signAndSendTransaction = async <T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        chainId?: number\n    ): Promise<string> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    signMessage = async (message: Uint8Array): Promise<Uint8Array> => {\n        throw new Error('signMessage not implemented.');\n    };\n\n    switchChain = async (chainId: number) => {\n        await window.particleAuth?.solana.switchChain(chainId);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(data: Partial<RpcInput>): Promise<any> {\n        return window.particleAuth?.solana.request(data);\n    }\n}\n"],
  "mappings": "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",
  "names": ["useCallback", "useCallback", "AuthCoreEvent", "isConnected", "isNullish", "particleAuth", "useCallback", "useEffect", "useCallback", "connect", "isNullish", "useEffect", "particleAuth", "AuthCoreEvent", "isConnected", "AuthCoreEvent", "AuthType", "EvmRpcMethod", "check", "isConnected", "particleAuth", "requireNotNullish", "chains", "useCallback", "useEffect", "useMemo", "useState", "isNullish", "particleAuth", "chains", "isHexString", "BigNumber", "BigNumber", "isHexString", "particleAuth", "chains", "isNullish", "isHexString", "isNullish", "requireNotNullish", "chains", "requireNotNullish", "isHexString", "chains", "isNullish", "useState", "particleAuth", "requireNotNullish", "connect", "useMemo", "_a", "AuthType", "useEffect", "chainId", "userInfo", "AuthCoreEvent", "check", "isConnected", "useCallback", "EvmRpcMethod", "chains", "useEffect", "AuthCoreEvent", "AuthType", "check", "getLatestAuthType", "isConnected", "particleAuth", "requireNotNullish", "chains", "useCallback", "useEffect", "useMemo", "useState", "useState", "particleAuth", "requireNotNullish", "connect", "useMemo", "_a", "getLatestAuthType", "AuthType", "useEffect", "chainId", "userInfo", "AuthCoreEvent", "check", "isConnected", "useCallback", "chains"]
}
