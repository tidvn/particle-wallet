{
  "version": 3,
  "sources": ["../src/pages/account/accountBind/index.tsx", "../src/pages/account/accountBind/captcha-input.tsx"],
  "sourcesContent": ["import { DownOutlined } from '@ant-design/icons';\nimport { getBindSecurityAccounCaptcha, getCloudflareTurnstileResponse } from '@particle-network/auth-core';\nimport { useRequest } from 'ahooks';\nimport { Button } from 'antd';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { defaultCountriesData, getCurrentCountry } from '../../../api/model/all-countries';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport PowerFooter from '../../../components/power-footer';\nimport { useAuthCoreModal, useCustomNavigate } from '../../../context';\nimport { useCustomize } from '../../../context/hooks/useCustomize';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { EmailRegExp, isPhoneValid } from '../../../utils';\nimport CaptchaInput from './captcha-input';\nimport styles from './index.less';\n\nconst AccountBind = (props: any) => {\n    const navigate = useCustomNavigate();\n\n    const { t } = useTranslation();\n    const state = props;\n    const redirectUrl = (state as any)?.redirectUrl;\n    const verifyToken = (state as any)?.verifyToken;\n    const message = useMessage();\n    const clickRef = useRef<any>();\n    const [bindAccount, setBindAccount] = useState<string>('');\n    const [countryData, setCountryData] = useState(['United States', 'us', '1']);\n    const [isSendCode, setIsSendCode] = useState(false);\n    const accountInputRef = useRef(null);\n    const [errorMsg, setError] = useState('');\n\n    const { themeType, language } = useCustomize();\n\n    const { authCoreModal } = useAuthCoreModal();\n\n    const [accountType, setAccountType] = useState<string>('email');\n\n    useEffect(() => {\n        if (accountType === 'phone' || (state as any)?.showSwitch) {\n            const currentCountry = getCurrentCountry();\n            if (currentCountry) {\n                setCountryData(currentCountry);\n            }\n        }\n    }, [accountType, (state as any)?.showSwitch]);\n\n    const [visbSelectCountry, setVisbSelectCountry] = useState(false);\n    useEffect(() => {\n        if (visbSelectCountry) {\n            document.addEventListener('click', clickCallback, true);\n            return () => {\n                document.removeEventListener('click', clickCallback, true);\n            };\n        }\n    }, [visbSelectCountry]);\n\n    const clickCallback = (event: any) => {\n        setTimeout(() => {\n            if (clickRef.current?.contains(event.target)) {\n                return;\n            }\n            setVisbSelectCountry(false);\n        });\n    };\n    useEffect(() => {\n        const type = (state as any)?.accountType;\n        if (type) {\n            setAccountType(type);\n        }\n    }, [state]);\n\n    const { loading: codeLoading, run: runGetCode } = useRequest(getBindSecurityAccounCaptcha, {\n        manual: true,\n        onSuccess: (result, params) => {\n            setIsSendCode(result);\n        },\n        onError: (error: any) => {\n            const code = error?.error_code || 0;\n            if (code === 50003 || code === 50004) {\n                setBindAccount('');\n                (accountInputRef.current as any).value = '';\n            }\n        },\n    });\n\n    const checkAndRequestCode = () => {\n        let account = (accountInputRef.current as any).value;\n\n        if (accountType === 'email') {\n            if (!account) {\n                return setError(t('account.input_vaild_email') as string);\n            } else if (!EmailRegExp.test(account)) {\n                return setError(t('login.email_format_error') as string);\n            }\n        } else {\n            const regionCode = countryData[1].toUpperCase();\n            if (!account && account !== '0') {\n                return setError(t('account.input_vaild_mobile') as string);\n            } else if (!isPhoneValid(account, regionCode)) {\n                return setError(t('login.phone_format_error') as string);\n            } else {\n                account = `+${countryData[2]}${account}`;\n            }\n        }\n        setBindAccount(account);\n        if (!account.includes('@')) {\n            getCloudflareTurnstileResponse({\n                theme: themeType,\n                language,\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n            })\n                .then((token) => {\n                    runGetCode({\n                        phone: account,\n                        // eslint-disable-next-line camelcase\n                        cf_turnstile_response: token,\n                    });\n                })\n                .catch((error) => {\n                    message.error(t('error.server_20112'));\n                });\n        } else {\n            runGetCode({\n                email: account,\n            });\n        }\n    };\n\n    const changeAccountType = () => {\n        setAccountType(accountType === 'email' ? 'phone' : 'email');\n        setBindAccount('');\n    };\n\n    useEffect(() => {\n        setTimeout(() => {\n            (accountInputRef.current as any)?.focus();\n        });\n    }, []);\n\n    // \u8F93\u5165\u9A8C\u8BC1\u7801\n    if (isSendCode) {\n        return (\n            <CaptchaInput\n                bindAccount={bindAccount}\n                redirectUrl={redirectUrl || ''}\n                verifyToken={verifyToken}\n                backToInputAccount={() => {\n                    setIsSendCode(false);\n                }}\n            />\n        );\n    }\n    return (\n        <div className=\"set-email-container\">\n            <style>{styles as unknown as string}</style>\n            <SVGIcon className=\"icon-navigation-back\" name=\"circle_back\" onClick={() => navigate(-1)} />\n            <h2 className=\"set-email-title\">\n                {accountType === 'email' ? t('account.set_your_email') : t('account.set_your_mobile')}\n            </h2>\n            <p className=\"set-email-desc-1\">\n                {accountType === 'email' ? t('account.set_your_email_tip') : t('account.set_your_mobile_tip')}\n            </p>\n\n            {accountType === 'email' ? (\n                <>\n                    <div className=\"account-input-box\">\n                        <input\n                            onInput={() => setError('')}\n                            className=\"input_email\"\n                            type=\"email\"\n                            placeholder={t('account.place_email_address') as string}\n                            ref={accountInputRef}\n                            defaultValue={bindAccount}\n                            // \u56DE\u8F66\u4E8B\u4EF6\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    checkAndRequestCode();\n                                }\n                            }}\n                        />\n                    </div>\n                </>\n            ) : (\n                <>\n                    <div className=\"account-input-box phone\" ref={clickRef}>\n                        {visbSelectCountry && (\n                            <div className=\"account-select-country\">\n                                {defaultCountriesData.map((item, index) => (\n                                    <p\n                                        key={index}\n                                        className=\"account-select-country-item\"\n                                        onClick={() => {\n                                            setCountryData(item);\n                                            setVisbSelectCountry(false);\n                                        }}\n                                    >\n                                        <div className=\"country-box\">\n                                            <div className=\"country-flag\">{getUnicodeFlagIcon(`${item[1]}`)}</div>\n                                            <span className=\"country-name\">{item[0]}</span>\n                                        </div>\n                                        <div className=\"country-code\">{'+' + item[2]}</div>\n                                    </p>\n                                ))}\n                            </div>\n                        )}\n                        <div className=\"account-select-opt\" onClick={() => setVisbSelectCountry(!visbSelectCountry)}>\n                            <div className=\"account-select-icon\">{getUnicodeFlagIcon(`${countryData[1]}`)}</div>\n                            <DownOutlined className=\"down-more\" />\n                        </div>\n                        <span>+{countryData[2]}</span>\n                        <input\n                            onInput={() => {\n                                setError('');\n\n                                (accountInputRef.current as any).value =\n                                    (accountInputRef.current as any).value.match(/^\\d+/)?.[0] || '';\n                            }}\n                            type=\"text\"\n                            className=\"no-number dd\"\n                            placeholder={t('account.mobile') as string}\n                            ref={accountInputRef}\n                            onWheel={(e: any) => e.target.blur()}\n                            defaultValue={bindAccount.replace(`+${countryData[2]}`, '')}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    checkAndRequestCode();\n                                }\n                            }}\n                            onFocus={() => {\n                                document.querySelector('.account-input-box.phone')?.setAttribute('data-focus', 'true');\n                            }}\n                            onBlur={() => {\n                                document.querySelector('.account-input-box.phone')?.setAttribute('data-focus', 'false');\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n            <p className={`error-tip ${errorMsg ? 'show' : ''}`}>{errorMsg}</p>\n\n            <Button\n                className=\"send-code-btn account-submit-btn bottom-margin\"\n                loading={codeLoading}\n                onClick={checkAndRequestCode}\n            >\n                {t('login.get_captcha')}\n            </Button>\n\n            {(state as any)?.showSwitch && (\n                <div className=\"account-switch-item\" onClick={changeAccountType}>\n                    {accountType === 'email' ? t('account.switch_text_mobile') : t('account.switch_text_email')}\n                </div>\n            )}\n            <PowerFooter />\n        </div>\n    );\n};\n\nexport default AccountBind;\n", "import {\n    ApiError,\n    bindSecurityAccount,\n    getBindSecurityAccounCaptcha,\n    getCloudflareTurnstileResponse,\n    syncUserInfo,\n} from '@particle-network/auth-core';\nimport { useInterval, useRequest } from 'ahooks';\nimport { Button } from 'antd';\nimport throttle from 'lodash/throttle.js';\nimport qs from 'qs';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport PowerFooter from '../../../components/power-footer';\nimport AuthCode from '../../../components/react-auth-code-input';\nimport { useAuthCoreModal, useCustomNavigate } from '../../../context';\nimport { useCustomize } from '../../../context/hooks/useCustomize';\nimport useMessage from '../../../context/hooks/useMessage';\nimport styles from './index.less';\n\nconst CaptchaInput = (props: any) => {\n    const { bindAccount, backToInputAccount, redirectUrl = '', verifyToken = '' } = props;\n    const message = useMessage();\n    const { t } = useTranslation();\n\n    const { themeType, language } = useCustomize();\n\n    const navigate = useCustomNavigate();\n\n    const [captchaCode, setCaptchaCode] = useState<string>('');\n\n    const [interval, setInterval] = useState<number | undefined>(1000);\n\n    const [countdown, setCountdown] = useState(60);\n\n    const [errorTip, setErrorTip] = useState<string>();\n\n    const inputRef = useRef(null);\n\n    const { authCoreModal } = useAuthCoreModal();\n\n    useInterval(() => {\n        if (countdown > 0) {\n            const result = countdown - 1;\n            setCountdown(result);\n            if (result === 0) {\n                setInterval(undefined);\n            }\n        }\n    }, interval);\n\n    const { loading: bindLoading, run: runBinding } = useRequest(bindSecurityAccount, {\n        manual: true,\n        onSuccess: (result: any) => {\n            syncUserInfo();\n\n            if (redirectUrl) {\n                navigate(redirectUrl.split('?')[0], {\n                    replace: true,\n                    back: true,\n                    state: {\n                        ...qs.parse(redirectUrl.split('?')[1]),\n                        verifyToken: result?.token,\n                        account: bindAccount,\n                    },\n                });\n            } else if (!result.has_set_payment_password) {\n                // router to set payment password\n                navigate('/account/set-password');\n            } else {\n                navigate('/account/security', { replace: true });\n            }\n        },\n        onError: (error: any) => {\n            console.log('bind accounts error', error);\n            if (error?.error_code === ApiError.InvalidCode) {\n                setErrorTip(t('login.invalid_code') as string);\n            } else if (error?.error_code === ApiError.ResendCode) {\n                setErrorTip(t('login.please_send_again') as string);\n            }\n        },\n    });\n\n    const { loading: codeLoading, run: runGetCode } = useRequest(getBindSecurityAccounCaptcha, {\n        manual: true,\n        onSuccess: (result, params) => {\n            if (!interval) {\n                setCountdown(60);\n                setInterval(1000);\n            }\n        },\n        onError: (error: any) => {\n            setCountdown(0);\n            setInterval(undefined);\n        },\n    });\n\n    const submitBind = (code?: string) => {\n        let param: { email?: string; phone?: string; code: string; token?: string };\n        if (bindAccount.includes('@')) {\n            param = { email: bindAccount, code: code || captchaCode };\n        } else {\n            param = { phone: bindAccount, code: code || captchaCode };\n        }\n\n        if (verifyToken) {\n            param.token = verifyToken;\n        }\n        runBinding(param as any);\n    };\n\n    const requestCaptchaCode = () => {\n        setErrorTip('');\n        if (bindAccount.includes('@')) {\n            runGetCode({\n                email: bindAccount,\n            });\n        } else {\n            getCloudflareTurnstileResponse({\n                theme: themeType,\n                language,\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n            })\n                .then((token) => {\n                    runGetCode({\n                        phone: bindAccount,\n                        // eslint-disable-next-line camelcase\n                        cf_turnstile_response: token,\n                    });\n                })\n                .catch((error) => {\n                    message.error(t('error.server_20112'));\n                });\n        }\n    };\n\n    const onCodeInputChange = (code: string) => {\n        setCaptchaCode(code);\n        setErrorTip('');\n        if (code.length === 6) {\n            throttleSubmitBind(code);\n        }\n    };\n\n    const throttleSubmitBind = useCallback(\n        throttle(\n            (code) => {\n                submitBind(code);\n            },\n            1000,\n            {\n                leading: true,\n                trailing: false,\n            }\n        ),\n        []\n    );\n\n    useEffect(() => {\n        const elements = document.getElementsByClassName('react-input-code');\n        const contextmenuEvent = (e: any) => e.preventDefault();\n        elements[0]?.addEventListener('contextmenu', contextmenuEvent);\n        return () => {\n            elements[0]?.removeEventListener('contextmenu', contextmenuEvent);\n        };\n    }, []);\n\n    const handleCodeInputFocus = () => {\n        const elements = document.getElementsByClassName('input-code-item');\n        //@ts-ignore\n        elements[Math.min(captchaCode.length, 5)]?.focus();\n    };\n\n    return (\n        <div className=\"set-email-container\">\n            <style>{styles as unknown as string}</style>\n            <SVGIcon className=\"icon-navigation-back\" name=\"circle_back\" onClick={backToInputAccount} />\n            <h2 className=\"set-email-title\">{t('account.enter_code')}</h2>\n            <p className=\"set-email-desc-2\" style={{ margin: 20 }}>\n                {bindAccount}\n            </p>\n            <div onClick={handleCodeInputFocus}>\n                <AuthCode\n                    containerClassName=\"react-input-code\"\n                    inputClassName=\"input-code-item\"\n                    allowedCharacters=\"numeric\"\n                    length={6}\n                    ref={inputRef}\n                    placeholder={' '}\n                    onChange={onCodeInputChange}\n                />\n            </div>\n\n            {errorTip && <div className=\"code-error\">{errorTip}</div>}\n\n            <Button\n                disabled={captchaCode.length !== 6}\n                className=\"account-submit-btn\"\n                loading={bindLoading}\n                onClick={() => submitBind()}\n            >\n                {t('common.confirm')}\n            </Button>\n\n            <Button className=\"send-again\" onClick={requestCaptchaCode} disabled={countdown > 0 || codeLoading}>\n                {countdown > 0 ? `${t('login.send_again')} (${countdown}s)` : t('login.send_again')}\n            </Button>\n            <div className=\"back\" onClick={backToInputAccount}>\n                <SVGIcon className=\"arrow1-icon\" name=\"arrow1_icon\" />\n                <span>{t('login.back')}</span>\n            </div>\n            <PowerFooter />\n        </div>\n    );\n};\n\nexport default CaptchaInput;\n"],
  "mappings": "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",
  "names": ["getBindSecurityAccounCaptcha", "getCloudflareTurnstileResponse", "useRequest", "Button", "React", "useEffect", "useRef", "useState", "useTranslation", "_a", "useTranslation", "useRef", "useState", "useEffect", "useRequest", "getBindSecurityAccounCaptcha", "getCloudflareTurnstileResponse", "React", "Button", "accountBind_default"]
}
