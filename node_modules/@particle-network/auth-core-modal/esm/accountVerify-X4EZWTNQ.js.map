{
  "version": 3,
  "sources": ["../src/pages/account/accountVerify/index.tsx"],
  "sourcesContent": ["import {\n    ApiError,\n    AuthType,\n    bindLoginAccount,\n    getBindSecurityAccounCaptcha,\n    getCloudflareTurnstileResponse,\n    getSecurityAccountCaptcha,\n    getSecurityAccountToken,\n    setPaymentPassword,\n    syncUserInfo,\n    thirdpartyAuth,\n    type SocialAuthType,\n} from '@particle-network/auth-core';\nimport { useInterval, useRequest } from 'ahooks';\nimport { Button, Modal } from 'antd';\nimport base64url from 'base64url';\nimport throttle from 'lodash/throttle.js';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport PowerFooter from '../../../components/power-footer';\nimport AuthCode from '../../../components/react-auth-code-input';\nimport { useAuthCoreModal, useCustomNavigate, useCustomRouter, useParticleAuth } from '../../../context';\nimport { useCustomize } from '../../../context/hooks/useCustomize';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { displayEmail, displayPhone } from '../../../utils/common-utils';\nimport { getAccountList } from '../../loginAccount';\nimport { PageType } from './config';\nimport styles from './index.less';\n\ninterface IParams {\n    account: string; // \u8FDB\u5165\u9875\u9762\u65F6\u4F1A\u7ED9\u8FD9\u4E2A\u8D26\u6237\u53D1\u9001\u9A8C\u8BC1\u7801\uFF0C\u8FD9\u4E2A\u8D26\u6237\u53EF\u80FD\u662F\u5B89\u5168\u8D26\u53F7\uFF0C\u4E5F\u53EF\u80FD\u662F\u8981\u7ED1\u5B9A\u7684\u8D26\u53F7\n    pageType: PageType;\n    unbindAccount: string; //\u89E3\u7ED1\u624B\u673A\u3001\u90AE\u7BB1\u65F6\u4F7F\u7528\n    authType: AuthType;\n    verifyToken: string;\n    redirectUrl: string;\n    password: string; // \u91CD\u7F6E\u5BC6\u7801\u65F6\u9700\u8981\n}\n\nconst AccountVerify = (props: any) => {\n    const navigate = useCustomNavigate();\n    const { t } = useTranslation();\n\n    const state = props;\n\n    const message = useMessage();\n\n    const { customRouter } = useCustomRouter();\n\n    const { themeType, language } = useCustomize();\n\n    const { account, pageType, authType, verifyToken, redirectUrl, password } = state as IParams;\n\n    const [code, setCode] = useState<string>('');\n\n    const [interval, setInterval] = useState<number | undefined>(1000);\n\n    const [countdown, setCountdown] = useState(60);\n\n    const [errorTip, setErrorTip] = useState<string>();\n    const { authCoreModal } = useAuthCoreModal();\n    const { userInfo } = useParticleAuth();\n\n    const inputRef = useRef(null);\n\n    useInterval(() => {\n        if (countdown > 0) {\n            const result = countdown - 1;\n            setCountdown(result);\n            if (result === 0) {\n                setInterval(undefined);\n            }\n        }\n    }, interval);\n\n    // \u83B7\u53D6\u9A8C\u8BC1\u7801\n    const { run: runGetCode } = useRequest(\n        async (params) => {\n            console.log('get code', params);\n            if (pageType === PageType.BindLoginAccount) {\n                params = {\n                    [authType as string]: account,\n                    // eslint-disable-next-line camelcase\n                    cf_turnstile_response: params.cf_turnstile_response,\n                };\n                return getBindSecurityAccounCaptcha(params).then((res) => {\n                    return res;\n                });\n            } else {\n                return getSecurityAccountCaptcha(params.verifyCodeMethod);\n            }\n        },\n        {\n            manual: true,\n            onSuccess: (result, params) => {\n                if (!interval) {\n                    setCountdown(60);\n                    setInterval(1000);\n                }\n            },\n            onError: (error) => {\n                setCountdown(0);\n                setInterval(undefined);\n            },\n        }\n    );\n\n    // \u9A8C\u8BC1\u5B89\u5168\u8D26\u53F7\uFF0C\u83B7\u53D6token\n    const { loading: verifyLoading, runAsync: securityAccountsVerifyRequest } = useRequest(getSecurityAccountToken, {\n        manual: true,\n        onError: (error: any) => {\n            if (error?.error_code === ApiError.InvalidCode) {\n                setErrorTip(t('login.invalid_code') as string);\n            } else if (error?.error_code === ApiError.ResendCode) {\n                setErrorTip(t('login.please_send_again') as string);\n            } else {\n                error.message && message.error(error.message);\n            }\n        },\n    });\n\n    // \u7ED1\u5B9A\u767B\u5F55\u90AE\u7BB1\u6216\u624B\u673A\u53F7\n    const { loading: loadBindingLoading, runAsync: loginBindingsAsyncRequest } = useRequest(\n        async (params) => {\n            console.log('loginBindingsAsyncRequest', params);\n            return bindLoginAccount(params).then(async () => {\n                await syncUserInfo();\n            });\n        },\n        {\n            manual: true,\n            onSuccess: (data) => {\n                message.success(t('new.bind_login_account_success'));\n            },\n            onError: (error: any) => {\n                console.log('loginBindings', error);\n                let messageValue = error.message;\n                if (error?.error_code === ApiError.InvalidCode) {\n                    setErrorTip(t('login.invalid_code') as string);\n                    return;\n                } else if (error?.error_code === ApiError.ResendCode) {\n                    setErrorTip(t('login.please_send_again') as string);\n                    return;\n                } else if (error.error_code === 20109) {\n                    messageValue =\n                        authType == AuthType.email ? t('error.server_email_20109') : t('error.server_phone_20109');\n                } else {\n                    messageValue = error?.extra?.[0] || error.message;\n                }\n\n                Modal.error({\n                    title: messageValue,\n                    wrapClassName: 'auth-core-modal-error',\n                    getContainer: () => {\n                        return authCoreModal.rootBody as HTMLElement;\n                    },\n                    onOk: () => {\n                        (inputRef.current as any)?.clear();\n                        if (error.error_code === 20109) {\n                            // back\n                            navigate(-1);\n                        }\n                    },\n                });\n            },\n        }\n    );\n\n    // \u91CD\u7F6E\u652F\u4ED8\u5BC6\u7801\n    const { loading: resetLoading, run: runResetPaymentPassword } = useRequest(setPaymentPassword, {\n        manual: true,\n        onError: (error: any) => {\n            if (error?.error_code === ApiError.InvalidCode) {\n                setErrorTip(t('login.invalid_code') as string);\n            } else if (error?.error_code === ApiError.ResendCode) {\n                setErrorTip(t('login.please_send_again') as string);\n            }\n        },\n        onSuccess: (result, params) => {\n            syncUserInfo();\n\n            const paths = ['account/security', 'solana/sign', 'evm-chain/sign'];\n            const indexs = paths.map((path) => {\n                return customRouter.history?.findIndex((item) => item.path === path) as number;\n            });\n\n            const index = indexs.indexOf(Math.max(...indexs));\n\n            navigate(paths[index], { replace: true, back: true });\n        },\n    });\n\n    // \u89E3\u7ED1\u767B\u5F55\u8D26\u53F7\n    const { loading: deleteLoginAccountLoading, run: deleteLoginAccount } = useRequest(\n        // pnApi.deleteLoginBinding\n        () => new Promise((resolve, reject) => {}),\n        {\n            manual: true,\n            onSuccess: (result) => {\n                // const _userInfo = tokenProvider.userInfo;\n                // _userInfo.passkeys_id = undefined;\n                // tokenProvider.userInfo = _userInfo;\n                // setUserInfo({\n                //     passkeys_id: undefined,\n                // });\n                // route(-2);\n            },\n        }\n    );\n\n    const verifyCodeMethod = useMemo(() => {\n        return account?.includes('@') ? AuthType.email : AuthType.phone;\n    }, [account]);\n\n    useEffect(() => {\n        requestVerifyCode();\n    }, [account]);\n\n    const requestVerifyCode = () => {\n        setErrorTip('');\n        if (pageType === PageType.BindLoginAccount && authType === AuthType.phone) {\n            getCloudflareTurnstileResponse({\n                theme: themeType,\n                language,\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n            })\n                .then((token) => {\n                    runGetCode({\n                        // eslint-disable-next-line camelcase\n                        verify_code_method: verifyCodeMethod,\n                        // eslint-disable-next-line camelcase\n                        cf_turnstile_response: token,\n                    });\n                })\n                .catch(() => {\n                    message.error(t('error.server_20112'));\n                    navigate(-1);\n                });\n        } else {\n            runGetCode({\n                // eslint-disable-next-line camelcase\n                verifyCodeMethod: verifyCodeMethod,\n            });\n        }\n    };\n\n    const onCodeInputChange = (code: string) => {\n        setErrorTip('');\n        setCode(code);\n\n        if (code.length === 6) {\n            throttleConfirmCode(code);\n        }\n    };\n\n    const throttleConfirmCode = useCallback(\n        throttle(\n            (code) => {\n                confirmCode(code);\n            },\n            1000,\n            {\n                leading: true,\n                trailing: false,\n            }\n        ),\n        []\n    );\n\n    const resetPassword = (codeValue?: string) => {\n        runResetPaymentPassword({\n            password,\n            verifyCodeMethod: verifyCodeMethod,\n            code: codeValue || code,\n        });\n    };\n\n    const confirmCode = (code = '') => {\n        console.log('pageType', pageType);\n        if (errorTip) {\n            console.log('errorTip', errorTip);\n            return;\n        }\n        let data: any = { code };\n        if (pageType === PageType.ResetPaymentPassword) {\n            resetPassword(code);\n        } else if (pageType == PageType.VerifySecurityAccount_SetSecurityAccount) {\n            // \u7ED1\u5B9A\u5B89\u5168\u8D26\u53F7\u65F6\u524D\u7F6E\u9A8C\u8BC1\u5B89\u5168\u8D26\u53F7\n            securityAccountsVerifyRequest({\n                verifyCodeMethod: verifyCodeMethod,\n                code,\n            }).then((verifyToken) => {\n                navigate('/account/bind', {\n                    replace: true,\n                    state: {\n                        accountType: authType,\n                        verifyToken,\n                        redirectUrl,\n                    },\n                });\n            });\n        } else if (pageType === PageType.VerifySecurityAccount_BindLoginAccount) {\n            // \u7ED1\u5B9A\u767B\u5F55\u8D26\u53F7\u65F6\u524D\u7F6E\u9A8C\u8BC1\u5B89\u5168\u8D26\u53F7\n            securityAccountsVerifyRequest({\n                verifyCodeMethod: verifyCodeMethod,\n                code,\n            }).then((verifyToken) => {\n                const accountList = getAccountList({\n                    userInfo,\n                    t,\n                });\n                const { id, value } = accountList.find((item) => item.type === authType) || {};\n                // \u9A8C\u8BC1\u6210\u529F\u540E\uFF0C\u6839\u636E authType \u6267\u884C\u4E0D\u540C\u903B\u8F91\n                // AuthType.phone\uFF0CAuthType.email \u8DF3\u8F6C\u9875\u9762\uFF0C\u5176\u4ED6\u7684\u6267\u884Cauth\u7B7E\u540D\u8DF3\u8F6C\u767B\u5F55\u6388\u6743\n                if (authType === AuthType.phone || authType === AuthType.email || value || id) {\n                    navigate('/login-account/bind', {\n                        state: {\n                            authType,\n                            verifyToken,\n                        },\n                        replace: true,\n                    });\n                } else {\n                    console.log('\u7ED1\u5B9A\u7B2C\u4E09\u65B9 \u9875\u9762\u8DF3\u8F6C');\n                    const appState = base64url.encode(JSON.stringify({ verifyToken, purpose: 'bindLoginAccount' }));\n                    thirdpartyAuth({\n                        authType: authType as SocialAuthType,\n                        appState,\n                        prompt: 'select_account',\n                    }).catch((error) => {\n                        message.error(error?.message || error);\n                    });\n                }\n            });\n        } else if (pageType === PageType.BindLoginAccount) {\n            // eslint-disable-next-line camelcase\n            data = { ...data, security_account_verify_token: verifyToken, [authType as string]: account };\n            loginBindingsAsyncRequest(data).then((res) => {\n                navigate(-2);\n            });\n        } else if (pageType === PageType.UnbindLoginAccount) {\n            // passkeys\n        }\n    };\n\n    const formatDisplayAccount = (): string => {\n        if (account.includes('@')) {\n            return displayEmail(account);\n        } else {\n            return displayPhone(account);\n        }\n    };\n\n    useEffect(() => {\n        const elements = document.getElementsByClassName('react-input-code');\n        const contextmenuEvent = (e: any) => e.preventDefault();\n        elements[0]?.addEventListener('contextmenu', contextmenuEvent);\n        return () => {\n            elements[0]?.removeEventListener('contextmenu', contextmenuEvent);\n        };\n    }, []);\n\n    const handleCodeInputFocus = () => {\n        const elements = document.getElementsByClassName('input-code-item');\n        //@ts-ignore\n        elements[Math.min(code.length, 5)]?.focus();\n    };\n\n    return (\n        <div className=\"set-viery-container\">\n            <style>{styles as unknown as string}</style>\n            <div className=\"account-header\">\n                <SVGIcon\n                    className=\"icon-navigation-back\"\n                    name=\"circle_back\"\n                    onClick={() => {\n                        navigate(-1);\n                    }}\n                />\n            </div>\n            <h2 className=\"set-email-title\">{t('account.enter_code')}</h2>\n            <p className=\"set-email-desc-2\">{formatDisplayAccount()}</p>\n\n            <div onClick={handleCodeInputFocus}>\n                <AuthCode\n                    containerClassName=\"react-input-code\"\n                    inputClassName=\"input-code-item\"\n                    allowedCharacters=\"numeric\"\n                    length={6}\n                    ref={inputRef}\n                    placeholder={' '}\n                    onChange={onCodeInputChange}\n                />\n            </div>\n\n            {errorTip && <div className=\"code-error\">{errorTip}</div>}\n\n            <Button\n                className=\"account-submit-btn\"\n                loading={resetLoading || verifyLoading || loadBindingLoading || deleteLoginAccountLoading}\n                onClick={() => {\n                    setTimeout(() => {\n                        confirmCode(code);\n                    });\n                }}\n                disabled={code.length !== 6}\n            >\n                {t('common.confirm')}\n            </Button>\n\n            <Button className=\"send-again\" onClick={requestVerifyCode} disabled={countdown > 0}>\n                {countdown > 0 ? `${t('login.send_again')} (${countdown}s)` : t('login.send_again')}\n            </Button>\n            <div\n                className=\"back\"\n                onClick={() => {\n                    navigate(-1);\n                }}\n            >\n                <SVGIcon className=\"arrow1-icon\" name=\"arrow1_icon\" />\n                <span>{t('login.back')}</span>\n            </div>\n\n            <PowerFooter />\n        </div>\n    );\n};\n\nexport default AccountVerify;\n"],
  "mappings": "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",
  "names": ["_a", "code", "verifyToken", "accountVerify_default"]
}
