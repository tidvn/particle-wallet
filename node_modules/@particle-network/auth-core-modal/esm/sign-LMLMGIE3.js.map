{
  "version": 3,
  "sources": ["../src/pages/sign/index.tsx", "../src/pages/sign/components/evm-sign.tsx", "../src/context/hooks/usePending.tsx", "../src/pages/sign/evmContextProvider.tsx", "../src/utils/ethereumUtils.ts", "../src/pages/sign/riskReminder/index.tsx", "../src/pages/sign/riskTypography/index.tsx", "../src/pages/sign/components/NewErcTransfers.tsx", "../src/components/icon-edit-pen.tsx", "../src/components/icon-to.tsx", "../src/pages/sign/components/gas-display.tsx", "../src/pages/sign/components/no-gas.tsx", "../src/pages/sign/components/evm-gas.tsx"],
  "sourcesContent": ["import { isNeedRestoreWallet, syncUserInfo } from '@particle-network/auth-core';\nimport React, { useEffect } from 'react';\nimport { AuthPage } from '../../components/customRouter';\nimport { useCustomNavigate } from '../../context';\nimport EvmSign from './components/evm-sign';\nimport { EVMContextProvider } from './evmContextProvider';\n\nexport type EvmSignProps = {\n    method: string;\n    param: unknown;\n    loginAuthorizationSign?: boolean;\n};\n\nfunction Sign(props: EvmSignProps) {\n    const navigate = useCustomNavigate();\n\n    useEffect(() => {\n        syncUserInfo().catch((e) => console.log('syncUserInfo', e));\n        if (isNeedRestoreWallet()) {\n            navigate(AuthPage.MasterPasswordVerify);\n        }\n    }, []);\n\n    return (\n        <EVMContextProvider {...props}>\n            <EvmSign {...props} />\n        </EVMContextProvider>\n    );\n}\n\nexport default Sign;\n", "import { addHexPrefix, stripHexPrefix } from '@ethereumjs/util';\nimport { RecordType } from '@particle-network/analytics';\nimport {\n    EvmEnhancedMethod,\n    EvmRpcMethod,\n    TransactionSmartType,\n    analyticsRecord,\n    isConnected,\n    syncUserInfo,\n    type EVMDeserializeTransactionResult,\n    type EVMFunction,\n    type EVMNFTChange,\n    type EVMTransaction,\n} from '@particle-network/auth-core';\nimport { Button, Image, Modal, Tabs } from 'antd';\nimport { BigNumber } from 'bignumber.js';\nimport BN from 'bn.js';\n//@ts-ignore\nimport jt from 'json-toy';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { useTranslation } from 'react-i18next';\nimport { type EvmSignProps } from '..';\nimport { getEVMPublicAddress } from '../../../api/getPublicAddress';\nimport { AuthError } from '../../../api/model/authError';\nimport { PromptSettingType } from '../../../api/model/bundle';\nimport { AuthPage } from '../../../components/customRouter';\nimport CircleClose from '../../../components/icon/circle-close';\nimport IconCopy from '../../../components/icon/icon-copy';\nimport ParticleLoading from '../../../components/loading';\nimport PowerFooter from '../../../components/power-footer';\nimport { useAuthCoreModal, useCustomNavigate, useEvents, useParticleAuth } from '../../../context';\nimport { useEthereum } from '../../../context/hooks';\nimport { useError } from '../../../context/hooks/useError';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { usePaymentPassword } from '../../../context/hooks/usePaymentPassword';\nimport usePending from '../../../context/hooks/usePending';\nimport { AuthCoreModalEvent } from '../../../context/types';\nimport {\n    defaultTokenIcon,\n    formatAddress,\n    getChainDisplayName,\n    getChainIcon,\n    getNativeSymbol,\n} from '../../../utils/chain-utils';\nimport { shortString } from '../../../utils/common-utils';\nimport { ethereumUtils } from '../../../utils/ethereumUtils';\nimport { formatTokenAmount2, fromSunFormat, fromWeiFormat } from '../../../utils/number-utils';\nimport { isEIP1559Type, isEVMAddress, isTron, parseTransaction } from '../../../utils/transaction-utils';\nimport { useEVMTransaction } from '../evmContextProvider';\nimport riskModalStyle from '../riskModal/index.less';\nimport RiskReminder from '../riskReminder';\nimport RiskTypography from '../riskTypography';\nimport NewErcTransfers from './NewErcTransfers';\nimport EvmGas from './evm-gas';\nimport GasDisplay from './gas-display';\nimport styles from './info-sign.less';\nimport Menu from './menu';\nimport NoGas from './no-gas';\n\nimport biconomy000 from '../../../common/images/smartAccount/biconomy-000-icon.png';\nimport biconomyfff from '../../../common/images/smartAccount/biconomy-fff-icon.png';\nimport btc000 from '../../../common/images/smartAccount/btc-000-icon.png';\nimport btcfff from '../../../common/images/smartAccount/btc-fff-icon.png';\nimport cyberconnect000 from '../../../common/images/smartAccount/cyberconnect-000-icon.png';\nimport cyberconnectfff from '../../../common/images/smartAccount/cyberconnect-fff-icon.png';\nimport light000 from '../../../common/images/smartAccount/light-000-icon.png';\nimport lightfff from '../../../common/images/smartAccount/light-fff-icon.png';\nimport simple000 from '../../../common/images/smartAccount/simple-000-icon.png';\nimport simplefff from '../../../common/images/smartAccount/simple-fff-icon.png';\n\nenum RenderPageType {\n    SIGN_MESSAGE,\n    SEND_TX,\n    SIGN_TYPE_DATA,\n}\n\nexport const getAAIcon = (aaType: string, theme: string) => {\n    aaType = (aaType ?? 'biconomy')?.toLowerCase();\n    const aaIcons: Record<string, any> = {\n        biconomyfff,\n        biconomy000,\n        cyberconnectfff,\n        cyberconnect000,\n        simplefff,\n        simple000,\n        lightfff,\n        light000,\n        btcfff,\n        btc000,\n    };\n    const key = `${aaType}${theme === 'light' ? 'fff' : '000'}`;\n    return aaIcons[key] ?? aaIcons['biconomyfff'];\n};\n\nfunction EvmSign(props: EvmSignProps) {\n    const { method, param, loginAuthorizationSign } = props;\n\n    const { t } = useTranslation();\n    const message = useMessage();\n    const [loading, setLoading] = useState(false);\n\n    const [transactionInfo, setTransactionInfo] = useState<EVMDeserializeTransactionResult>();\n\n    const infoSignRef = useRef(null);\n\n    const [headerTitle, setHeaderTitle] = useState<string>('');\n    const { authCoreModal } = useAuthCoreModal();\n    const [headerDes, setHeaderDes] = useState<string>('');\n\n    const [gasVis, setGasVis] = useState<boolean>(false);\n\n    const navigate = useCustomNavigate();\n\n    const [renderPageType, setRenderPageType] = useState<RenderPageType | ''>('');\n\n    const [changeApproveAmount, setChangeApproveAmount] = useState<string>('');\n\n    const { errorHandle } = useError();\n\n    const {\n        transactionData,\n        gasError,\n        setTransaction,\n        updateTransaction,\n        currentChain: chainInfo,\n    } = useEVMTransaction();\n\n    const [riskPrompt, setRiskPrompt] = useState(false);\n\n    const { events } = useEvents();\n\n    const [addressDisplayed, setAddressDisplayed] = useState<string>();\n\n    const { hasSetPaymentPassword, showSetPaymentPasswordOrConfirm } = usePaymentPassword();\n\n    const { setPaymentVerify, setPaymentPassword, userInfo, modalOptions } = useParticleAuth();\n\n    const { address } = useEthereum();\n\n    const { checkPending } = usePending();\n\n    const loadsecurityAccounts = () => {\n        syncUserInfo()\n            .then(() => {\n                approveSign();\n            })\n            .catch((error) => {\n                setLoading(false);\n                message.error(error.message ?? 'Sign Error');\n            });\n    };\n\n    const { TabPane } = Tabs;\n\n    const isPersonalSign = useMemo(\n        () => method === EvmRpcMethod.personalSign || method === EvmRpcMethod.personalSignUniq,\n        [method]\n    );\n\n    const redirectToApp = ({ error, result }: { error?: AuthError; result?: unknown }) => {\n        events.emit(AuthCoreModalEvent.SignResponse, {\n            result,\n            error,\n        });\n    };\n\n    useEffect(() => {\n        getEVMPublicAddress({\n            erc4337: modalOptions.erc4337,\n            chainId: chainInfo.id,\n        })\n            .then((addr) => {\n                setAddressDisplayed(addr);\n            })\n            .catch((error) => {\n                console.error('get public address error', error);\n            });\n    }, [chainInfo.id, modalOptions.erc4337]);\n\n    useEffect(() => {\n        let renderPageType: RenderPageType | '' = '';\n        console.log(`evm sign method: ${method}, chainId: ${chainInfo.id}`);\n        if (isPersonalSign) {\n            //sign message\n            setHeaderTitle(t('sign.signature_message') as string);\n            setHeaderDes(t('sign.signature_title') as string);\n\n            renderPageType = RenderPageType.SIGN_MESSAGE;\n        } else if (method === EvmRpcMethod.ethSendTransaction) {\n            //send tx\n            setHeaderTitle(t('sign.send_transaction') as string);\n            setHeaderDes(t('sign.approve_and').format(getChainDisplayName(chainInfo)));\n            setTransactionData();\n            renderPageType = RenderPageType.SEND_TX;\n        } else if (method === EvmRpcMethod.ethSignTypedDataV4 || method === EvmRpcMethod.ethSignTypedDataV4Uniq) {\n            deserializeTypedData(JSON.stringify(param)).then((res) => {\n                if (res?.type === TransactionSmartType.SEAPORT_NFT_LISTING) {\n                    setHeaderTitle(t('sign.send_transaction') as string);\n                    setHeaderDes(t('sign.approve_and').format(getChainDisplayName(chainInfo)));\n                    renderPageType = RenderPageType.SEND_TX;\n                } else {\n                    renderPageType = RenderPageType.SIGN_TYPE_DATA;\n                    setHeaderTitle(t('sign.sign_typed_data') as string);\n                    setHeaderDes(t('sign.signature_title') as string);\n                }\n                setRenderPageType(renderPageType);\n            });\n        } else if (method.includes(EvmRpcMethod.ethSignTypedData)) {\n            //sign typed data\n            setHeaderTitle(t('sign.sign_typed_data') as string);\n            setHeaderDes(t('sign.signature_title') as string);\n            renderPageType = RenderPageType.SIGN_TYPE_DATA;\n        }\n\n        setRenderPageType(renderPageType);\n    }, [chainInfo]);\n\n    const setTransactionData = () => {\n        console.log('setTransactionData', param);\n        const txData = parseTransaction(param as any, chainInfo);\n        console.log('setTransactionData\uFF0C after parse', param);\n        setTransaction(txData);\n        deserializeTransaction(txData);\n    };\n\n    const deserializeTypedData = async (jsonStr: string) => {\n        const result = await window.particleAuth?.ethereum\n            .request({\n                chainId: chainInfo.id,\n                method: EvmEnhancedMethod.deserializeTypedData,\n                params: [jsonStr],\n            })\n            .catch((error) => {\n                console.log('deserializeTypedData error', error);\n                message.error(error.message ?? 'deserializeTypedData Error');\n            });\n        setTransactionInfo(result);\n        return result;\n    };\n\n    const deserializeTransaction = async (txData: EVMTransaction) => {\n        if (!checkTxData(txData)) {\n            return;\n        }\n\n        const { TransactionFactory } = await import('@ethereumjs/tx');\n        const tx = TransactionFactory.fromTxData(txData);\n        window.particleAuth?.ethereum\n            .request({\n                chainId: chainInfo.id,\n                method: EvmEnhancedMethod.deserializeTransaction,\n                params: [address, addHexPrefix(tx.serialize().toString('hex'))],\n            })\n            .then((result) => {\n                setTransactionInfo(result);\n            })\n            .catch((error) => {\n                console.log('deserializeTransaction error', error);\n                Modal.error({\n                    title: error.message ?? 'Deserialize Transaction Error',\n                    wrapClassName: 'auth-core-modal-error',\n                    getContainer: () => {\n                        return authCoreModal.rootBody as HTMLElement;\n                    },\n                    okCancel: true,\n                    cancelText: t('common.cancel'),\n                    okText: t('common.retry'),\n                    onOk: () => {\n                        deserializeTransaction(txData);\n                    },\n                });\n            });\n    };\n\n    const hasSecurityRisk = useMemo(() => {\n        return transactionInfo?.securityDetection && transactionInfo?.securityDetection.length > 0;\n    }, [transactionInfo?.securityDetection]);\n\n    const checkTxData = (txData: EVMTransaction): boolean => {\n        if (isTron(chainInfo)) {\n            if (!txData.from || !txData.to || !txData.value) {\n                Modal.error({\n                    title: 'Transaction error, see doc for more info',\n                    wrapClassName: 'auth-core-modal-error',\n                    getContainer: () => {\n                        return authCoreModal.rootBody as HTMLElement;\n                    },\n                    onOk: () => {\n                        redirectToApp({\n                            error: AuthError.paramsError(),\n                        });\n                    },\n                });\n                return false;\n            }\n\n            return true;\n        }\n        if (Number(txData.type) !== 0 && Number(txData.type) !== 1 && Number(txData.type) !== 2) {\n            Modal.error({\n                title: 'Transaction type error, see doc for more info',\n                wrapClassName: 'auth-core-modal-error',\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n                onOk: () => {\n                    redirectToApp({\n                        error: AuthError.paramsError(),\n                    });\n                },\n            });\n            return false;\n        } else if (isEIP1559Type(txData.type) && txData.maxFeePerGas && txData.maxPriorityFeePerGas) {\n            const maxFeePerGasBN = new BN(stripHexPrefix(txData.maxFeePerGas), 16);\n            const maxPriorityFeePerGasBN = new BN(stripHexPrefix(txData.maxPriorityFeePerGas), 16);\n            if (maxFeePerGasBN.lte(maxPriorityFeePerGasBN)) {\n                // maxFeePerGas cannot be less than maxPriorityFeePerGas\n                Modal.error({\n                    title: 'maxFeePerGas cannot be less than maxPriorityFeePerGas.',\n                    wrapClassName: 'auth-core-modal-error',\n                    getContainer: () => {\n                        return authCoreModal.rootBody as HTMLElement;\n                    },\n                    onOk: () => {\n                        redirectToApp({\n                            error: AuthError.feeError(),\n                        });\n                    },\n                });\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const decodeMessage = (message: string): string => {\n        const msg = Buffer.from(stripHexPrefix(message), 'hex').toString('utf-8');\n        if (isPersonalSign) {\n            if (/\uFFFD/.test(msg)) {\n                return message;\n            }\n        }\n        return msg;\n    };\n\n    const formatFunction = (evmFunction: EVMFunction): string => {\n        if (evmFunction.params.length > 0) {\n            const p = evmFunction.params.map((item) => item.type).join(', ');\n            return `${evmFunction.name}(${p})`;\n        }\n        return `${evmFunction.name}()`;\n    };\n\n    const approveSign = async (pendingConfirm = false) => {\n        if (!isConnected()) {\n            redirectToApp({\n                error: AuthError.notLogin(),\n            });\n            return;\n        }\n\n        analyticsRecord({\n            // eslint-disable-next-line camelcase\n            record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK, // confirm\u6309\u94AE\u70B9\u51FB\n        });\n\n        if (method === EvmRpcMethod.ethSendTransaction) {\n            if (await checkPending(approveSign, pendingConfirm)) {\n                return;\n            } else if (userInfo?.security_account?.has_set_payment_password) {\n                setPaymentVerify({\n                    visible: true,\n                    onVerifyCompleted: signTx,\n                });\n            } else {\n                showSetPaymentPasswordOrConfirm(signTx);\n            }\n        } else if (method.includes(EvmRpcMethod.ethSignTypedData) || isPersonalSign) {\n            if (userInfo?.security_account?.has_set_payment_password) {\n                setPaymentVerify({\n                    visible: true,\n                    onVerifyCompleted: signData,\n                });\n            } else {\n                if (\n                    method.includes(EvmRpcMethod.ethSignTypedData) ||\n                    modalOptions.promptSettingConfig?.promptPaymentPasswordSettingWhenSign ===\n                        PromptSettingType.everyAndNotSkip\n                ) {\n                    // method\u662Feth_signTypedData \u6216\u8005 \u5F3A\u5236\u8BBE\u7F6E\u652F\u4ED8\u5BC6\u7801\n                    showSetPaymentPasswordOrConfirm(signData);\n                } else {\n                    signData();\n                }\n            }\n        } else {\n            Modal.error({\n                title: `method ${method} not support`,\n                wrapClassName: 'auth-core-modal-error',\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n            });\n        }\n    };\n\n    const signTx = async () => {\n        if (!transactionData) return;\n\n        setLoading(true);\n\n        const unsigned = JSON.stringify(transactionData);\n        console.log('unsigned tx:', unsigned);\n\n        let result;\n        try {\n            result = await window.particleAuth?.ethereum.sendTransaction({ ...transactionData });\n            analyticsRecord({\n                // eslint-disable-next-line camelcase\n                record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_SUCCESS, // confirm\u6210\u529F\n            });\n        } catch (error: any) {\n            console.error(method, error);\n            analyticsRecord({\n                // eslint-disable-next-line camelcase\n                record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_FAILURE, // confirm\u5931\u8D25\n            });\n            if (error?.error_code === 50103 && !userInfo?.security_account?.has_set_payment_password) {\n                loadsecurityAccounts();\n            } else if (\n                error?.message === 'Local Key not found' ||\n                error?.message === 'Master password decryption error'\n            ) {\n                navigate(AuthPage.MasterPasswordVerify);\n            } else {\n                Modal.error({\n                    title: error.message ?? 'Send Transaction Error',\n                    wrapClassName: 'auth-core-modal-error',\n                    getContainer: () => {\n                        return authCoreModal.rootBody as HTMLElement;\n                    },\n                    okText: t('common.confirm'),\n                    onOk: () => {\n                        redirectToApp({\n                            error: error,\n                        });\n                    },\n                });\n            }\n        } finally {\n            setLoading(false);\n        }\n        if (result) {\n            redirectToApp({\n                result,\n            });\n        }\n    };\n\n    const signData = async () => {\n        setLoading(true);\n        let result;\n        try {\n            if (isPersonalSign) {\n                result = await window.particleAuth?.ethereum.signMessage(param as string);\n            } else {\n                result = await window.particleAuth?.ethereum.signTypedData({\n                    data: param as any,\n                    version: ethereumUtils.getSignTypedVersion(method),\n                    uniq: ethereumUtils.isSignTypedDataUniq(method),\n                });\n            }\n            analyticsRecord({\n                // eslint-disable-next-line camelcase\n                record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_SUCCESS, // confirm\u6210\u529F\n            });\n        } catch (error: any) {\n            console.error(method, error);\n            analyticsRecord({\n                // eslint-disable-next-line camelcase\n                record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_FAILURE, // confirm\u5931\u8D25\n            });\n            if (error?.error_code === 50103 && !userInfo?.security_account?.has_set_payment_password) {\n                loadsecurityAccounts();\n            } else if (\n                error?.message === 'Local Key not found' ||\n                error?.message === 'Master password decryption error'\n            ) {\n                navigate(AuthPage.MasterPasswordVerify);\n            } else {\n                message.error(error.message ?? (isPersonalSign ? 'Sign Message Error' : 'Sign Typed Data Error'));\n            }\n        } finally {\n            setLoading(false);\n        }\n\n        if (result) {\n            if (loginAuthorizationSign) {\n                events.emit(AuthCoreModalEvent.LoginSuccess, {\n                    ...userInfo,\n                    authorization: {\n                        message: param,\n                        signature: result,\n                    },\n                });\n            } else {\n                redirectToApp({\n                    result,\n                });\n            }\n        }\n    };\n\n    const cancelSign = async () => {\n        if (loading) {\n            return;\n        }\n        //\u8FD4\u56DEapp\n        redirectToApp({\n            error: AuthError.userRejectedRequest(),\n        });\n    };\n\n    const formatValue = (data: any) => {\n        if (isEVMAddress(data.value)) {\n            return shortString(formatAddress(data.value, chainInfo));\n        }\n        return data.value;\n    };\n\n    const signMessageTitle = useMemo(() => {\n        let title = '';\n        if (method.includes(EvmRpcMethod.ethSignTypedData)) {\n            try {\n                const { primaryType } = param as any;\n                title = primaryType;\n            } catch (error) {\n                // pase error\n            }\n        }\n        return title || 'Message';\n    }, [method, param]);\n\n    const sMessage = useMemo(() => {\n        if (method.includes(EvmRpcMethod.ethSignTypedData)) {\n            try {\n                const signQueryMessage = param as any;\n                let { message } = signQueryMessage;\n\n                if (!signQueryMessage.message) {\n                    message = signQueryMessage;\n                }\n\n                return message;\n            } catch (error) {\n                // pase error\n            }\n        }\n        return {};\n    }, [method, param]);\n\n    const getRow = (key: string, index: number) => {\n        key = key.replace('ROOT.', '');\n        let value = jt.getValByKeyPath(sMessage, key);\n        let isTitle = false;\n        if (typeof value !== 'string' && typeof value !== 'number') {\n            value = '';\n            isTitle = true;\n        }\n        const indent = key.split('.').length;\n\n        return (\n            <div key={index} className=\"s-row\">\n                <div\n                    className=\"label\"\n                    style={{\n                        paddingLeft: 20 * indent,\n                    }}\n                    data-type={isTitle ? 'title' : ''}\n                >\n                    {key.split('.').pop()}\uFF1A\n                </div>\n\n                {isEVMAddress(value) ? (\n                    <CopyToClipboard text={value} onCopy={() => message.success(t('new.copied_to'))}>\n                        <div className=\"value copy-text\">{formatValue({ value })}</div>\n                    </CopyToClipboard>\n                ) : (\n                    <div\n                        className=\"value\"\n                        onClick={(e) => {\n                            e.stopPropagation();\n                        }}\n                    >\n                        {value}\n                    </div>\n                )}\n            </div>\n        );\n    };\n    // sign message\n    const signMessage = () => {\n        return (\n            <div className=\"sign-message\">\n                <div\n                    className={'message' + (hasSetPaymentPassword ? '' : ' no-password-tip')}\n                    data-transaction-type={transactionInfo?.type}\n                >\n                    {!method.includes(EvmRpcMethod.ethSignTypedData) && (\n                        <div className=\"pre-wrap personal-message\">{decodeMessage(param as string)}</div>\n                    )}\n\n                    {method.includes(EvmRpcMethod.ethSignTypedData) && (\n                        <>\n                            <div className=\"s-row\">\n                                <div className=\"label\" data-type=\"title\">\n                                    {signMessageTitle}\n                                </div>\n                            </div>\n                            {jt.travelJson(sMessage).map((key: string, index: number) => {\n                                return getRow(key, index);\n                            })}\n                        </>\n                    )}\n                </div>\n            </div>\n        );\n    };\n\n    const getNFTName = (info: EVMNFTChange): string => {\n        if (info.name && info.name.length > 0) {\n            return info.name;\n        }\n\n        return `NFT#${info.tokenId}`;\n    };\n\n    const approveDisabled = (data?: EVMTransaction): boolean => {\n        if (method === EvmRpcMethod.ethSendTransaction) {\n            if (!data) {\n                return true;\n            }\n\n            if (isTron(chainInfo)) {\n                return false;\n            }\n\n            if (isEIP1559Type(data.type)) {\n                return !data.gasLimit || !data.maxPriorityFeePerGas || !data.maxFeePerGas;\n            } else {\n                return !data.gasLimit || !data.gasPrice;\n            }\n        }\n        return false;\n    };\n    const [displayDetail, setDisplayDetail] = useState<boolean>(false);\n\n    const isErc4361 = useMemo(() => {\n        // https://eips.ethereum.org/EIPS/eip-4361#example-message\n        let result = false;\n        if (isPersonalSign) {\n            const signMessage = decodeMessage(param as string);\n            const domain = signMessage.match(/^(.+)?\\swants you/)?.[1];\n            const address = signMessage.match(/wants you to sign in with your Ethereum account:\\n(.*)/)?.[1];\n            const uri = signMessage.match(/URI:(.*)/)?.[1];\n            const version = signMessage.match(/Version:(.*)/)?.[1];\n            const chainId = signMessage.match(/Chain ID:(.*)/)?.[1];\n            const nonce = signMessage.match(/Nonce:(.*)/)?.[1];\n            if (domain && address && uri && version && chainId && nonce) {\n                result = true;\n            }\n        }\n        return result;\n    }, [transactionData, isPersonalSign]);\n\n    useEffect(() => {\n        if (isErc4361) {\n            setHeaderTitle(t('new.sign_in_request') as string);\n            setHeaderDes(t('new.requesting_sign_4361') as string);\n        }\n    }, [isErc4361]);\n\n    // sign/send transaction\n    const signTransaction = () => {\n        return (\n            <Tabs defaultActiveKey=\"1\">\n                <TabPane tab={t('sign.details')} key=\"1\">\n                    <div className=\"balance-change\">\n                        <div className=\"title\">{t('sign.estimated_balance_change')}</div>\n                        <div className=\"change-body\">\n                            {transactionInfo?.estimatedChanges?.natives\n                                ?.filter((info) => info.address.toLowerCase() === address?.toLowerCase())\n                                ?.map((info, index) => {\n                                    return (\n                                        <div className=\"change-title\" key={`native-change-${index}`}>\n                                            {getNativeSymbol(chainInfo)}\n                                            <div\n                                                className=\"change-val\"\n                                                style={info.nativeChange.includes('-') ? { color: '#ea4335' } : {}}\n                                            >\n                                                {info.nativeChange.includes('-') || info.nativeChange === '0'\n                                                    ? ''\n                                                    : '+'}\n                                                {isTron(chainInfo)\n                                                    ? fromSunFormat(info.nativeChange)\n                                                    : fromWeiFormat(info.nativeChange, 'ether', 18)}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n\n                            {transactionInfo?.estimatedChanges?.nfts?.map((info, index) => {\n                                return (\n                                    <div className=\"change-title\" key={`nft-change-${index}`}>\n                                        {getNFTName(info)}\n                                        <div\n                                            className=\"change-val\"\n                                            style={info.amountChange < 0 ? { color: '#ea4335' } : {}}\n                                        >\n                                            {info.amountChange < 0 ? '' : '+'}\n                                            {info.amountChange}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n\n                            {transactionInfo?.estimatedChanges?.tokens?.map((info, index) => {\n                                return (\n                                    <div className=\"change-title\" key={`token-change-${index}`}>\n                                        {info.name ? info.name : 'Unknown Token'}\n                                        <div\n                                            className=\"change-val\"\n                                            style={info.amountChange < 0 ? { color: '#ea4335' } : {}}\n                                        >\n                                            {info.amountChange < 0 ? '' : '+'}\n                                            {formatTokenAmount2(info.amountChange, info.decimals)}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n\n                    {transactionInfo && (\n                        <div className=\"from-to\">\n                            <div className=\"address-item\">\n                                <div>{t('sign.from')}</div>\n                                <div>{shortString(formatAddress(transactionInfo.data.from, chainInfo))}</div>\n                            </div>\n                            <div className=\"address-item mt10\">\n                                <div>{t('sign.to')}</div>\n                                <div>{shortString(formatAddress(transactionInfo.data.to, chainInfo))}</div>\n                            </div>\n                            {!isTron(chainInfo) && (\n                                <div className=\"address-item mt10\">\n                                    <div>{t('sign.nonce')}</div>\n                                    <div>#{parseInt(transactionInfo.data.nonce)}</div>\n                                </div>\n                            )}\n                        </div>\n                    )}\n\n                    {!gasError && transactionData && !isTron(chainInfo) && (\n                        <GasDisplay\n                            openGasDrawer={() => setGasVis(true)}\n                            signLoading={loading}\n                            chainInfo={chainInfo}\n                            signMethod={method}\n                        />\n                    )}\n\n                    {gasError && !isTron(chainInfo) && <NoGas />}\n                </TabPane>\n                <TabPane tab={t('sign.data')} key=\"2\">\n                    <div>\n                        {transactionInfo && transactionInfo.data.function && (\n                            <div className=\"inner-instruction\" key={'instruction-function'}>\n                                <div className=\"inner-content\">\n                                    <div className=\"content-item\">\n                                        <div className=\"item\">\n                                            <div className=\"item-0\">\n                                                {t('sign.function_type')}{' '}\n                                                {formatFunction(transactionInfo.data.function)}\n                                            </div>\n\n                                            {transactionInfo.data.function.params.map((item) => (\n                                                <div className=\"item-1 mt10\" key={`instruction-function${item.name}`}>\n                                                    {shortString(item.name)}\n                                                    <span>{shortString(item.value)}</span>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n\n                        {/* hex data */}\n\n                        {transactionInfo && (\n                            <div className=\"inner-instruction\" key={'instruction-hex-data'}>\n                                <div className=\"inner-content\">\n                                    <div className=\"content-item\">\n                                        <div className=\"item\">\n                                            <div className=\"item-0\">{t('sign.hex_data')}</div>\n                                            <div className=\"item-1 mt10\">\n                                                <div className=\"data\">{transactionInfo.data.data}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </TabPane>\n            </Tabs>\n        );\n    };\n\n    const editApproveAmount = async (amount: string) => {\n        setChangeApproveAmount(amount);\n\n        if (amount && amount !== '' && transactionInfo) {\n            const { decimals = 18 } = transactionInfo?.estimatedChanges?.tokens?.[0] || {};\n\n            BigNumber.config({ EXPONENTIAL_AT: [-256, 256] });\n            const bn = new BigNumber(amount).multipliedBy(new BigNumber(10).pow(decimals));\n            const approveAmount = bn.toString();\n            BigNumber.config({ EXPONENTIAL_AT: [-7, 21] });\n\n            const spender = transactionInfo.data?.function?.params?.[0]?.value || '';\n\n            const encodeData = await window.particleAuth?.ethereum.request({\n                chainId: chainInfo.id,\n                method: 'particle_abi_encodeFunctionCall',\n                params: [transactionInfo.data.to, 'erc20_approve', [spender, approveAmount]],\n            });\n\n            updateTransaction({\n                data: encodeData,\n            });\n        }\n    };\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            {transactionInfo?.type ||\n            renderPageType === RenderPageType.SIGN_TYPE_DATA ||\n            renderPageType === RenderPageType.SIGN_MESSAGE ? (\n                <div\n                    className={`info-sign info-sign-${transactionInfo?.type}`}\n                    data-type={transactionInfo?.type}\n                    ref={infoSignRef}\n                >\n                    {!hasSetPaymentPassword && (\n                        <div className=\"has-payment-password\">\n                            <div className=\"has-payment-password-icon\"></div>\n                            <div className=\"has-payment-password-tip\">{t('account.waring_tip1')}</div>\n                            <div className=\"has-payment-password-set\" onClick={setPaymentPassword}>\n                                {t('account.set')}\n                            </div>\n                        </div>\n                    )}\n                    <div className={'scroll-part' + (hasSetPaymentPassword ? '' : ' no-password-tip')}>\n                        <Menu userInfo={userInfo} transactionInfo={transactionInfo} />\n                        <div className=\"info-request\">\n                            {modalOptions.erc4337 && (\n                                // <div className=\"aa-tag\">AA</div>\n                                <div className=\"aa-icon\">\n                                    <Image\n                                        src={getAAIcon(\n                                            ((modalOptions.erc4337 as any)?.name ?? 'BICONOMY').toLowerCase(),\n                                            modalOptions.themeType || 'light'\n                                        )}\n                                        fallback={defaultTokenIcon}\n                                        preview={false}\n                                    />\n                                </div>\n                            )}\n                            {headerTitle}\n                        </div>\n                        <div className=\"info-title\">\n                            <Image src={getChainIcon(chainInfo)} fallback={defaultTokenIcon} preview={false} />\n                            {getChainDisplayName(chainInfo)}\n                        </div>\n                        <CopyToClipboard\n                            text={addressDisplayed || ''}\n                            onCopy={() => message.success(t('new.copied_to'))}\n                        >\n                            <div className=\"info-address\">\n                                {shortString(addressDisplayed)}\n                                <div className=\"copy-icon\">\n                                    <IconCopy />\n                                </div>\n                            </div>\n                        </CopyToClipboard>\n                        <div className=\"info-des\">{headerDes}</div>\n                        <div className=\"apart-line\"></div>\n                        {transactionInfo?.type === TransactionSmartType.NativeTransfer ||\n                        transactionInfo?.type === TransactionSmartType.ERC20_TRANSFER ||\n                        transactionInfo?.type === TransactionSmartType.ERC20_APPROVE ||\n                        transactionInfo?.type === TransactionSmartType.ERC721_TRANFER ||\n                        transactionInfo?.type === TransactionSmartType.ERC1155_TRANFER ||\n                        transactionInfo?.type === TransactionSmartType.SEAPORT_CANCEL_ORDER ||\n                        transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER ||\n                        transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING ? (\n                            <NewErcTransfers\n                                setDisplayDetail={setDisplayDetail}\n                                displayDetail={displayDetail}\n                                gasError={gasError}\n                                setGasVis={setGasVis}\n                                formatFunction={formatFunction}\n                                transactionInfo={transactionInfo}\n                                changeApproveAmount={changeApproveAmount}\n                                setChangeApproveAmount={editApproveAmount}\n                                signLoading={loading}\n                                signMessage={signMessage}\n                                chainInfo={chainInfo}\n                                signMethod={method}\n                            />\n                        ) : method === EvmRpcMethod.ethSendTransaction ? (\n                            signTransaction()\n                        ) : method !== EvmRpcMethod.ethSendTransaction ? (\n                            signMessage()\n                        ) : (\n                            ''\n                        )}\n                    </div>\n\n                    <div className=\"btn-box\">\n                        <div>\n                            <Button className=\"btn-cancel\" onClick={cancelSign}>\n                                {t('common.cancel')}\n                            </Button>\n                            <Button\n                                className={`btn-approve ${gasError || hasSecurityRisk ? 'still-confirm' : ''}`}\n                                onClick={() => {\n                                    if (hasSecurityRisk) {\n                                        setRiskPrompt(true);\n                                    } else {\n                                        approveSign();\n                                    }\n                                }}\n                                loading={loading}\n                                disabled={approveDisabled(transactionData)}\n                            >\n                                {isErc4361\n                                    ? t('new.sign_in')\n                                    : gasError || hasSecurityRisk\n                                    ? t('common.still_confirm')\n                                    : t('common.confirm')}\n                            </Button>\n                        </div>\n\n                        <PowerFooter></PowerFooter>\n                    </div>\n\n                    {hasSecurityRisk && transactionInfo?.securityDetection && (\n                        <>\n                            <RiskReminder securityDetection={transactionInfo?.securityDetection}></RiskReminder>\n                            <Modal\n                                className=\"risk-modal\"\n                                open={riskPrompt}\n                                closeIcon={<CircleClose />}\n                                centered\n                                maskClosable={false}\n                                onCancel={() => {\n                                    setRiskPrompt(false);\n                                }}\n                                getContainer={() => {\n                                    return authCoreModal.rootBody as HTMLDivElement;\n                                }}\n                            >\n                                <style>{riskModalStyle as unknown as string}</style>\n                                <div className=\"risk-modal-title\">{t('sign.risk_hint_title')}</div>\n                                <RiskTypography\n                                    className=\"risk-modal-content\"\n                                    securityDetection={transactionInfo?.securityDetection}\n                                    title={t('sign.risk_identified') as string}\n                                />\n                                <div className=\"risk-bottom-btn-box\">\n                                    <Button\n                                        className=\"primary-antd-btn secondary\"\n                                        onClick={() => {\n                                            setRiskPrompt(false);\n                                        }}\n                                    >\n                                        {t('common.cancel')}\n                                    </Button>\n                                    <Button\n                                        className=\"primary-antd-btn danger\"\n                                        onClick={() => {\n                                            approveSign();\n                                            setRiskPrompt(false);\n                                        }}\n                                    >\n                                        {t('common.confirm')}\n                                    </Button>\n                                </div>\n                            </Modal>\n                        </>\n                    )}\n\n                    <EvmGas openGasDrawer={() => setGasVis(false)} visible={gasVis} />\n                </div>\n            ) : (\n                <ParticleLoading />\n            )}\n        </>\n    );\n}\n\nexport default EvmSign;\n", "import { Button, Modal } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuthCoreModal } from '..';\nimport { useEVMTransaction } from '../../pages/sign/evmContextProvider';\nimport { useAuthCore } from './useAuthCore';\nimport { useEthereum } from './useEthereum';\n\nconst usePending = () => {\n    const { t } = useTranslation();\n    const { transactionData, fetchPendingTransactions } = useEVMTransaction();\n\n    const { address } = useEthereum();\n    const { openWallet } = useAuthCore();\n    const { authCoreModal } = useAuthCoreModal();\n\n    const pendingModalRef = React.useRef<any>();\n\n    const { authCoreModalClose } = useAuthCoreModal();\n\n    const checkPending = async (approveSign: any, pendingConfirm: boolean) => {\n        let pendingTransactions = [];\n\n        if (\n            transactionData &&\n            transactionData.action !== 'cancel' &&\n            transactionData.action !== 'speedup' &&\n            !pendingConfirm\n        ) {\n            pendingTransactions = await fetchPendingTransactions(address as string);\n        }\n\n        if (\n            transactionData &&\n            transactionData.action !== 'cancel' &&\n            transactionData.action !== 'speedup' &&\n            !pendingConfirm &&\n            (pendingTransactions?.length >= 3 ||\n                !!pendingTransactions.find((item: any) => {\n                    const now = new Date().getTime();\n                    const timestamp = new Date(item.timestamp * 1000).getTime();\n                    return now - timestamp > 30 * 60 * 1000;\n                }))\n        ) {\n            // \u5F53\u8BE5\u5730\u5740\u6709\u8D85\u8FC73\u7B14\u4EA4\u6613\u6B63\u5728Pending\u6216\u4E00\u7B14\u4EA4\u6613timestamp\u8D85\u8FC730\u5206\u949F\u672A\u5B8C\u6210\u65F6\uFF0C\u7528\u6237\u518D\u6B21\u786E\u8BA4\u4EA4\u6613\u65F6\u5C06\u5F39\u51FA\u6B64\u5F39\u7A97\n            console.log('pendingTransactions', pendingTransactions);\n\n            pendingModalRef.current = Modal.warning({\n                className: 'pending-warning-modal  auth-core-modal-warning',\n                content: (\n                    <div className=\"content-wrap\">\n                        <div className=\"content\">{t('new.transaction_pending_v2')}</div>\n                        <div className=\"footer-btns\">\n                            <Button\n                                className=\"cancel-btn continue-btn\"\n                                disabled={pendingTransactions?.length >= 10}\n                                type=\"default\"\n                                onClick={() => {\n                                    approveSign(true);\n                                    pendingModalRef.current.destroy();\n                                }}\n                            >\n                                {t('new.continue')}\n                            </Button>\n                            <Button\n                                className=\"process-now-btn\"\n                                type=\"primary\"\n                                onClick={() => {\n                                    // \u53D6\u6D88\u7B7E\u540D\uFF0C\u8DF3\u8F6C\u5230wallet\n                                    console.log('>>>', '\u53D6\u6D88\u7B7E\u540D\uFF0C\u8DF3\u8F6C\u5230wallet');\n\n                                    pendingModalRef.current.destroy();\n                                    authCoreModalClose();\n\n                                    setTimeout(() => {\n                                        openWallet({\n                                            pathName: '/tokenDetail.html',\n                                            query: {\n                                                tokenAddress: 'native',\n                                                pageMode: 'Simple',\n                                            },\n                                            topMenuType: 'close',\n                                        });\n                                    }, 30);\n                                }}\n                            >\n                                {t('new.process_now')}\n                            </Button>\n                        </div>\n                    </div>\n                ),\n                closable: true,\n                maskClosable: false,\n                getContainer: () => {\n                    return (authCoreModal.rootBody as HTMLElement).querySelector('.info-sign') as HTMLElement;\n                },\n            });\n            return true;\n        }\n\n        return false;\n    };\n\n    return {\n        checkPending,\n    };\n};\n\nexport default usePending;\n", "import { intToHex } from '@ethereumjs/util';\nimport {\n    EvmEnhancedMethod,\n    EvmRpcMethod,\n    GasFeeMode,\n    type EVMTransaction,\n    type GasFee,\n    type GasFeeResult,\n    type TokenPrice,\n    type TotalAmount,\n    type TransactionData,\n    type TxData,\n} from '@particle-network/auth-core';\nimport { Ethereum, chains, type ChainInfo } from '@particle-network/chains';\nimport { useSetState } from 'ahooks';\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { useModalOptions } from '../../context';\nimport { useEthereum } from '../../context/hooks';\nimport useMessage from '../../context/hooks/useMessage';\nimport { bnToHex } from '../../utils/common-utils';\nimport { ethereumUtils } from '../../utils/ethereumUtils';\nimport { toWei } from '../../utils/number-utils';\nimport { isEIP1559Type } from '../../utils/transaction-utils';\n\ninterface EVMState {\n    setTransaction: (tx: EVMTransaction) => void;\n    transactionData?: EVMTransaction;\n    updateTransaction: (tx: Partial<TransactionData>) => void;\n    gasFeeMode?: GasFeeMode;\n    setGasFeeMode: (mode: GasFeeMode) => void;\n    fetchGasAsync: (params: { addresses: string[]; from: string; to?: string; value?: string; data?: string }) => void;\n    gasFeeDisplay?: GasFee;\n    totalAmountDisplay?: TotalAmount;\n    tokenPrice?: TokenPrice[];\n    gasError?: { code: number; message: string };\n    gasFeeResult?: GasFeeResult;\n    latestGasLimit?: string;\n    currentChain: ChainInfo;\n    fetchPendingTransactions: (account: string) => Promise<any[]>;\n}\n\nconst defaultData: EVMState = {\n    setTransaction: () => {},\n    updateTransaction: () => {},\n    setGasFeeMode: () => {},\n    fetchGasAsync: () => {},\n    currentChain: Ethereum,\n    fetchPendingTransactions: () => Promise.resolve([]),\n};\n\nexport const EVMContext = createContext<EVMState>(defaultData);\n\nexport const EVMContextProvider = (props: { method: string; param: unknown; children: React.ReactNode }) => {\n    const { modalOptions } = useModalOptions();\n    const [evmTransaction, setEVMTransaction] = useSetState<EVMTransaction>({ from: '' });\n    const [latestGasLimit, setLatestGasLimit] = useState<string>();\n    const [tokenPrice, setTokenProce] = useState<TokenPrice[]>();\n    const [feeMode, setFeeMode] = useState<GasFeeMode>(GasFeeMode.custom);\n    const [gasError, setGasError] = useState<{ code: number; message: string }>();\n    const [gasFeeResult, setGasFeeResult] = useState<GasFeeResult>();\n    const [gasFeeDisplay, setGasFeeDisplay] = useState<GasFee>();\n    const [totalAmountDisplay, setTotalAmountDisplay] = useState<TotalAmount>();\n    const message = useMessage();\n    const { chainInfo } = useEthereum();\n\n    const getTxChain = () => {\n        if (props.method === EvmRpcMethod.ethSendTransaction && (props.param as TxData).chainId) {\n            const chainId = (props.param as TxData).chainId;\n            const chain = chains.getEVMChainInfoById(Number(chainId));\n            return chain ?? chainInfo;\n        } else {\n            return chainInfo;\n        }\n    };\n    //\u4EA4\u6613\u8FC7\u7A0B\u4E2D\u5982\u679C\u5207\u6362\u4E86\u7F51\u7EDC\uFF0C\u4E0D\u5F71\u54CD\u5F53\u524D\u4EA4\u6613\n    const [currentChain, setCurrentChain] = useState<ChainInfo>(getTxChain());\n\n    const updateTransaction = (data: Partial<TransactionData>) => {\n        if (evmTransaction) {\n            if (data.maxFeePerGas) {\n                setEVMTransaction({ maxFeePerGas: data.maxFeePerGas });\n            }\n\n            if (data.maxPriorityFeePerGas) {\n                setEVMTransaction({ maxPriorityFeePerGas: data.maxPriorityFeePerGas });\n            }\n\n            if (data.gasLimit) {\n                setEVMTransaction({ gasLimit: data.gasLimit });\n            }\n\n            if (data.gasPrice) {\n                setEVMTransaction({ gasPrice: data.gasPrice });\n            }\n\n            if (data.data) {\n                setEVMTransaction({ data: data.data });\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (evmTransaction && gasFeeResult) {\n            const params = {\n                gasLimit: evmTransaction.gasLimit || '0x0',\n                baseFee: bnToHex(toWei(gasFeeResult.baseFee, 'gwei')),\n                maxFeePerGas: evmTransaction.maxFeePerGas,\n                maxPriorityFeePerGas: evmTransaction.maxPriorityFeePerGas,\n                gasPrice: evmTransaction.gasPrice,\n            };\n            const gasFeeDisplay = ethereumUtils.gasFee(params);\n            setGasFeeDisplay(gasFeeDisplay);\n\n            const totalAmountDisplay = ethereumUtils.totalAmount({\n                value: evmTransaction.value,\n                gasLimit: evmTransaction.gasLimit || '0x0',\n                baseFee: bnToHex(toWei(gasFeeResult.baseFee, 'gwei')),\n                maxFeePerGas: evmTransaction.maxFeePerGas,\n                maxPriorityFeePerGas: evmTransaction.maxPriorityFeePerGas,\n                gasPrice: evmTransaction.gasPrice,\n            });\n            setTotalAmountDisplay(totalAmountDisplay);\n        }\n    }, [evmTransaction, gasFeeResult]);\n\n    const setTransaction = (transaction: EVMTransaction) => {\n        setEVMTransaction(transaction);\n        if (transaction.gasLevel) {\n            setFeeMode(transaction.gasLevel as GasFeeMode);\n            console.log('update gas fee mode', transaction.gasLevel);\n        } else {\n            setFeeMode(GasFeeMode.custom);\n            console.log('update gas fee mode (default)', GasFeeMode.custom);\n        }\n    };\n\n    const setGasFeeMode = (gasFeeMode: GasFeeMode) => {\n        setFeeMode(gasFeeMode);\n        console.log('update gas fee mode (setGasFeeMode)', gasFeeMode);\n        if (evmTransaction && gasFeeResult && gasFeeMode !== GasFeeMode.custom) {\n            if (isEIP1559Type(evmTransaction.type)) {\n                setEVMTransaction({\n                    maxFeePerGas: bnToHex(toWei(gasFeeResult[gasFeeMode].maxFeePerGas, 'gwei')),\n                    maxPriorityFeePerGas: bnToHex(toWei(gasFeeResult[gasFeeMode].maxPriorityFeePerGas, 'gwei')),\n                });\n            } else {\n                setEVMTransaction({\n                    gasPrice: bnToHex(toWei(gasFeeResult[gasFeeMode].maxFeePerGas, 'gwei')),\n                });\n            }\n        }\n    };\n\n    const fetchGasAsync = (params: {\n        addresses: string[];\n        from: string;\n        to?: string;\n        value?: string;\n        data?: string;\n    }) => {\n        fetchGas(params)\n            .then(({ gasFee, prices, gasLimit }) => {\n                setGasFeeResult(gasFee);\n                setTokenProce(prices);\n                let gasLimitValue: string;\n                if (typeof gasLimit === 'string') {\n                    gasLimitValue = gasLimit;\n                    setLatestGasLimit(gasLimit);\n                    setGasError(undefined);\n                } else {\n                    if (!latestGasLimit) {\n                        gasLimitValue = intToHex(50000);\n                        setLatestGasLimit(gasLimitValue);\n                        setGasError({\n                            message: gasLimit.message,\n                            code: -32000,\n                        });\n                    } else {\n                        gasLimitValue = latestGasLimit;\n                    }\n                }\n\n                if (evmTransaction) {\n                    if (isEIP1559Type(evmTransaction.type)) {\n                        //eip 1559\n                        if (feeMode && feeMode !== GasFeeMode.custom) {\n                            evmTransaction.maxFeePerGas = bnToHex(toWei(gasFee[feeMode].maxFeePerGas, 'gwei'));\n                            evmTransaction.maxPriorityFeePerGas = bnToHex(\n                                toWei(gasFee[feeMode].maxPriorityFeePerGas, 'gwei')\n                            );\n                        } else if (!evmTransaction.maxFeePerGas || !evmTransaction.maxPriorityFeePerGas) {\n                            evmTransaction.maxFeePerGas = bnToHex(toWei(gasFee.medium.maxFeePerGas, 'gwei'));\n                            evmTransaction.maxPriorityFeePerGas = bnToHex(\n                                toWei(gasFee.medium.maxPriorityFeePerGas, 'gwei')\n                            );\n                            if (!evmTransaction.gasLimit) {\n                                setFeeMode(GasFeeMode.medium);\n                                console.log('update gas fee mode (fulfilled)', GasFeeMode.medium);\n                            }\n                        }\n                    } else {\n                        if (feeMode && feeMode !== GasFeeMode.custom) {\n                            evmTransaction.gasPrice = bnToHex(toWei(gasFee[feeMode].maxFeePerGas, 'gwei'));\n                        } else if (!evmTransaction.gasPrice) {\n                            evmTransaction.gasPrice = bnToHex(toWei(gasFee.medium.maxFeePerGas, 'gwei'));\n                            if (!evmTransaction.gasLimit) {\n                                setFeeMode(GasFeeMode.medium);\n                                console.log('update gas fee mode (fulfilled)', GasFeeMode.medium);\n                            }\n                        }\n                    }\n\n                    if (\n                        !evmTransaction.gasLimit ||\n                        feeMode !== GasFeeMode.custom ||\n                        Number(evmTransaction.gasLimit) < Number(gasLimitValue)\n                    ) {\n                        evmTransaction.gasLimit = gasLimitValue;\n                        console.log('update gasLimit(state.value):', gasLimitValue);\n                    }\n                    setEVMTransaction(evmTransaction);\n                }\n            })\n            .catch((error) => {\n                if (error?.message) {\n                    message.error(error?.message.replace('code:-32000,', ''));\n                }\n            });\n    };\n\n    const fetchSuggestedGasFee = useCallback(async (): Promise<GasFeeResult> => {\n        const result = await window.particleAuth?.ethereum.request({\n            chainId: currentChain.id,\n            method: EvmEnhancedMethod.suggestedGasFees,\n        });\n        return result;\n    }, [currentChain]);\n\n    const fetchPendingTransactions = useCallback(\n        async (account: string): Promise<any[]> => {\n            const result = await window.particleAuth?.ethereum.request({\n                chainId: currentChain.id,\n                method: EvmEnhancedMethod.getPendingTransactionsByAddress,\n                params: [account],\n            });\n            return result;\n        },\n        [currentChain]\n    );\n\n    const fetchPrice = useCallback(\n        async (addresses: string[]): Promise<TokenPrice[]> => {\n            const result = await window.particleAuth?.ethereum.request({\n                chainId: currentChain.id,\n                method: EvmEnhancedMethod.getPrice,\n                params: [addresses, [modalOptions.fiatCoin?.toLowerCase() || 'usd']],\n            });\n            return result;\n        },\n        [modalOptions.fiatCoin, currentChain]\n    );\n\n    const fetchEstimateGas = useCallback(\n        async (param: { from: string; to?: string; value?: string; data?: string }): Promise<string | Error> => {\n            if (!param.to || param.to.length === 0) {\n                delete param.to;\n            }\n            try {\n                const result = await window.particleAuth?.ethereum.request({\n                    chainId: currentChain.id,\n                    method: 'eth_estimateGas',\n                    params: [param],\n                });\n                return result;\n            } catch (error: unknown) {\n                return error as Error;\n            }\n        },\n        [currentChain]\n    );\n\n    const fetchGas = useCallback(\n        async ({\n            addresses,\n            from,\n            to,\n            value,\n            data,\n        }: {\n            addresses: string[];\n            from: string;\n            to?: string;\n            value?: string;\n            data?: string;\n        }) => {\n            try {\n                const result = await Promise.all([\n                    fetchSuggestedGasFee(),\n                    fetchPrice(addresses),\n                    fetchEstimateGas({\n                        from,\n                        to,\n                        value,\n                        data,\n                    }),\n                ]);\n                // The value we return becomes the `fulfilled` action payload\n                return {\n                    gasFee: result[0],\n                    prices: result[1],\n                    gasLimit: result[2],\n                };\n            } catch (error: any) {\n                if (error.code && error.message) {\n                    return Promise.reject({\n                        message: 'code:' + error.code + ', ' + error.message.toString(),\n                    });\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n        },\n        [fetchSuggestedGasFee, fetchPrice, fetchEstimateGas]\n    );\n\n    return (\n        <EVMContext.Provider\n            value={{\n                setTransaction,\n                updateTransaction,\n                setGasFeeMode,\n                fetchGasAsync,\n                fetchPendingTransactions,\n                transactionData: evmTransaction,\n                gasFeeDisplay,\n                totalAmountDisplay,\n                tokenPrice,\n                gasError,\n                gasFeeMode: feeMode,\n                gasFeeResult,\n                latestGasLimit,\n                currentChain,\n            }}\n        >\n            {props.children}\n        </EVMContext.Provider>\n    );\n};\n\nexport const useEVMTransaction = () => useContext(EVMContext);\n", "import {\n    EvmRpcMethod,\n    SignTypedDataVersion,\n    type GasFee,\n    type PrefixedHexString,\n    type TotalAmount,\n} from '@particle-network/auth-core';\nimport { BigNumber } from 'bignumber.js';\nimport { fromWeiFormat } from './number-utils';\n\nexport const ethereumUtils = {\n    gasFee({\n        gasLimit,\n        baseFee,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice,\n    }: {\n        gasLimit: PrefixedHexString | number;\n        baseFee: PrefixedHexString | number;\n        maxFeePerGas?: PrefixedHexString | number;\n        maxPriorityFeePerGas?: PrefixedHexString | number;\n        gasPrice?: PrefixedHexString | number;\n    }): GasFee {\n        if (maxFeePerGas && maxPriorityFeePerGas && baseFee && gasLimit) {\n            //eip 1559\n            const fee = new BigNumber(maxPriorityFeePerGas)\n                .plus(new BigNumber(baseFee))\n                .multipliedBy(new BigNumber(gasLimit));\n\n            const maxFee = new BigNumber(maxFeePerGas)\n                .plus(new BigNumber(baseFee))\n                .multipliedBy(new BigNumber(gasLimit));\n            return {\n                fee: fromWeiFormat(fee.toFixed()),\n                maxFee: fromWeiFormat(maxFee.toFixed()),\n            };\n        } else if (gasPrice) {\n            const fee = new BigNumber(gasPrice).multipliedBy(new BigNumber(gasLimit));\n            return {\n                maxFee: fromWeiFormat(fee.toFixed()),\n            };\n        }\n        return {\n            maxFee: '',\n        };\n    },\n\n    totalAmount({\n        value,\n        gasLimit,\n        baseFee,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice,\n    }: {\n        value?: PrefixedHexString | number;\n        gasLimit: PrefixedHexString | number;\n        baseFee: PrefixedHexString | number;\n        maxFeePerGas?: PrefixedHexString | number;\n        maxPriorityFeePerGas?: PrefixedHexString | number;\n        gasPrice?: PrefixedHexString | number;\n    }): TotalAmount {\n        if (!value) {\n            value = '0x0';\n        }\n        if (maxFeePerGas && maxPriorityFeePerGas) {\n            //eip 1559\n            const fee = new BigNumber(maxPriorityFeePerGas)\n                .plus(new BigNumber(baseFee))\n                .multipliedBy(new BigNumber(gasLimit));\n\n            const maxFee = new BigNumber(maxFeePerGas)\n                .plus(new BigNumber(baseFee))\n                .multipliedBy(new BigNumber(gasLimit));\n            return {\n                amount: fromWeiFormat(new BigNumber(value).plus(fee).toString()),\n                maxAmount: fromWeiFormat(new BigNumber(value).plus(maxFee).toString()),\n            };\n        } else if (gasPrice) {\n            const fee = new BigNumber(gasPrice).multipliedBy(new BigNumber(gasLimit));\n            return {\n                maxAmount: fromWeiFormat(new BigNumber(value).plus(fee).toString()),\n            };\n        }\n        return {\n            maxAmount: '',\n        };\n    },\n\n    getSignTypedVersion(method: string): SignTypedDataVersion {\n        if (method === EvmRpcMethod.ethSignTypedData || method === EvmRpcMethod.ethSignTypedDataV1) {\n            return SignTypedDataVersion.V1;\n        } else if (method === EvmRpcMethod.ethSignTypedDataV3) {\n            return SignTypedDataVersion.V3;\n        } else {\n            return SignTypedDataVersion.V4;\n        }\n    },\n\n    isSignTypedDataUniq(method: string): boolean {\n        return method.includes('uniq');\n    },\n};\n", "import { DownOutlined, UpOutlined } from '@ant-design/icons';\nimport { type SecurityDetection } from '@particle-network/auth-core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport RiskTypography from '../riskTypography';\nimport styles from './index.less';\n\ninterface Prop {\n    securityDetection: SecurityDetection[];\n}\n\nconst RiskReminder = (prop: Prop) => {\n    const { securityDetection } = prop;\n\n    const { t } = useTranslation();\n\n    const [fold, setFold] = useState(false);\n\n    const toggleFold = () => {\n        setFold(!fold);\n    };\n\n    useEffect(() => {\n        const doc = document.documentElement;\n        doc.style.setProperty('--risk-bar-height', '36px');\n        return () => {\n            doc.style.setProperty('--risk-bar-height', '0px');\n        };\n    }, []);\n\n    return (\n        <div className=\"risk-reminder\">\n            <style>{styles as unknown as string}</style>\n            <div className=\"risk-header\" onClick={toggleFold}>\n                <div className=\"risk-red-dot\"></div>\n                <div className=\"risk-found\">{t('sign.risk_found')}</div>\n                {fold ? <UpOutlined className=\"btn-risk-fold\" /> : <DownOutlined className=\"btn-risk-fold\" />}\n            </div>\n            <RiskTypography\n                className={fold ? 'hide' : ''}\n                securityDetection={securityDetection}\n                title={t('sign.risk_hint_title') as string}\n            />\n        </div>\n    );\n};\n\nexport default RiskReminder;\n", "import { type SecurityDetection } from '@particle-network/auth-core';\nimport { Tree } from 'antd';\nimport type { DataNode } from 'antd/es/tree';\nimport React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styles from './index.less';\n\ninterface Prop {\n    securityDetection: SecurityDetection[];\n    className?: string;\n    title?: string;\n}\n\nconst RiskTypography = (prop: Prop) => {\n    const { securityDetection, title } = prop;\n    const { t } = useTranslation();\n\n    const treeData = useMemo<DataNode[]>(() => {\n        const warningsTypes = securityDetection.filter((item) => item.warnings && item.warnings.length > 0);\n        const risksTypes = securityDetection.filter((item) => item.risks && item.risks.length > 0);\n\n        const data: DataNode[] = [];\n        if (risksTypes.length > 0) {\n            data.push({\n                title: t('sign.security_risk'),\n                key: '0-1',\n                icon: <div className=\"risk-icon danger\"></div>,\n                children: risksTypes.map((item) => {\n                    return {\n                        title: t(`risk.${item.type}`),\n                        key: item.type,\n                        icon: <div className=\"risk-dot danger\"></div>,\n                        children: item.risks?.map((risk) => {\n                            return {\n                                title: t(`risk.${risk}`),\n                                key: risk,\n                                icon: <div className=\"risk-dot danger\"></div>,\n                            };\n                        }),\n                    };\n                }),\n            });\n        }\n\n        if (warningsTypes.length > 0) {\n            data.push({\n                title: t('sign.transaction_may_fail'),\n                key: '0-0',\n                icon: <div className=\"risk-icon warning\"></div>,\n                children: warningsTypes.map((item) => {\n                    return {\n                        title: t(`risk.${item.type}`),\n                        key: item.type,\n                        icon: <div className=\"risk-dot warning\"></div>,\n                        children: item.warnings?.map((warning) => {\n                            return {\n                                title: t(`risk.${warning}`),\n                                key: warning,\n                                icon: <div className=\"risk-dot warning\"></div>,\n                            };\n                        }),\n                    };\n                }),\n            });\n        }\n\n        return data;\n    }, [securityDetection]);\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <div className={`risk-typography ${prop?.className}`}>\n                {title && <div className=\"risk-typography-title\">{title}</div>}\n                <Tree rootClassName=\"risk-tree\" showIcon defaultExpandAll treeData={treeData} selectable={false} />\n            </div>\n        </>\n    );\n};\n\nexport default RiskTypography;\n", "import {\n    EvmEnhancedMethod,\n    TransactionSmartType,\n    type EVMDeserializeTransactionResult,\n    type EVMFunction,\n    type EVMNFTChange,\n    type TokenPrice,\n} from '@particle-network/auth-core';\nimport type { ChainInfo } from '@particle-network/chains';\nimport { Form, Image, Input, Modal } from 'antd';\nimport { BigNumber } from 'bignumber.js';\nimport dayjs from 'dayjs';\nimport numbro from 'numbro';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport type { AuthError } from '../../../api/model/authError';\nimport IconEditPen from '../../../components/icon-edit-pen';\nimport IconTo from '../../../components/icon-to';\nimport CircleClose from '../../../components/icon/circle-close';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport { useAuthCoreModal, useParticleAuth } from '../../../context';\nimport {\n    defaultTokenIcon,\n    formatAddress,\n    formatPng,\n    getNativeSymbol,\n    getNativeTokenIcon,\n} from '../../../utils/chain-utils';\nimport { isNullish, shortString } from '../../../utils/common-utils';\nimport { ipfsToSrc } from '../../../utils/index';\nimport { formatPrice } from '../../../utils/number-utils';\nimport { isTron } from '../../../utils/transaction-utils';\nimport { useEVMTransaction } from '../evmContextProvider';\nimport GasDisplay from './gas-display';\nimport NoGas from './no-gas';\n\nconst trimDecimals = (value: string, decimals = 10) => {\n    let [integerPart, decimalPart] = value.split('.');\n    if (decimalPart && decimalPart.length > decimals) {\n        decimalPart = decimalPart.slice(0, decimals + 1).slice(0, -1);\n    }\n    return `${integerPart}.${decimalPart ?? ''}`.replace(/0+$/, '').replace(/\\.$/, '');\n};\n\ninterface Props {\n    displayDetail: boolean;\n    gasError: AuthError | undefined;\n    setGasVis: React.Dispatch<React.SetStateAction<boolean>>;\n    formatFunction: (evmFunction: EVMFunction) => string;\n    setDisplayDetail: React.Dispatch<React.SetStateAction<boolean>>;\n    transactionInfo: EVMDeserializeTransactionResult | undefined;\n    changeApproveAmount: string;\n    setChangeApproveAmount: (amount: string) => Promise<void>;\n    signLoading: boolean;\n    signMessage: () => JSX.Element;\n    chainInfo: ChainInfo;\n    signMethod: string;\n}\n\nconst NewErcTransfers = (props: Props) => {\n    const { t } = useTranslation();\n    const {\n        transactionInfo,\n        setDisplayDetail,\n        displayDetail,\n        gasError,\n        setGasVis,\n        formatFunction,\n        changeApproveAmount,\n        setChangeApproveAmount,\n        signLoading,\n        chainInfo,\n        signMethod,\n    } = props;\n\n    // const transaction = useAppSelector(selectTransaction);\n    const { transactionData, gasFeeDisplay, tokenPrice: nativeTokenPrice } = useEVMTransaction();\n    const [visibleModal, setVisibleModal] = useState<boolean>(false);\n    const [tokenPrice, setTokenPrice] = useState<number | undefined>(undefined);\n    const [editApproveAmountForm] = Form.useForm();\n\n    const { authCoreModal } = useAuthCoreModal();\n    const [changeApproveAmountLoading, setChangeApproveAmountLoading] = useState(false);\n    const { modalOptions } = useParticleAuth();\n\n    // to address\n    const to = useMemo(() => {\n        const params = transactionInfo?.data?.function?.params;\n        if (transactionInfo?.type == TransactionSmartType.ERC20_TRANSFER) {\n            return params ? (params[params.length === 3 ? 1 : 0].value as string) : '';\n        } else if (transactionInfo?.type == TransactionSmartType.ERC20_APPROVE) {\n            return params ? (params[0].value as string) : '';\n        } else if (transactionInfo?.type == TransactionSmartType.NativeTransfer) {\n            return transactionInfo.data.to;\n        } else if (\n            transactionInfo?.type == TransactionSmartType.ERC721_TRANFER ||\n            transactionInfo?.type == TransactionSmartType.ERC1155_TRANFER\n        ) {\n            return params ? (params[1].value as string) : '';\n        } else if (\n            transactionInfo?.type === TransactionSmartType.SEAPORT_CANCEL_ORDER ||\n            transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER\n        ) {\n            return transactionInfo.data.to;\n        } else {\n            return '';\n        }\n    }, [transactionInfo?.data?.function?.params, transactionInfo?.data?.to]);\n\n    const contractAddress = useMemo(() => {\n        if (transactionInfo?.estimatedChanges?.tokens?.[0]?.address) {\n            return transactionInfo.estimatedChanges.tokens[0].address;\n        } else {\n            return '';\n        }\n    }, [transactionInfo?.estimatedChanges]);\n\n    const {\n        tokenIcon = '',\n        tokenSymbol = '',\n        tokenDecimals = 18,\n    } = useMemo(() => {\n        let tokenIcon = '';\n        let tokenSymbol = '';\n        let tokenDecimals = 18;\n        if (\n            transactionInfo?.type == TransactionSmartType.ERC20_TRANSFER ||\n            transactionInfo?.type == TransactionSmartType.ERC20_APPROVE\n        ) {\n            tokenIcon = transactionInfo?.estimatedChanges?.tokens[0].image;\n            tokenSymbol = transactionInfo?.estimatedChanges?.tokens[0].symbol;\n            tokenDecimals = transactionInfo?.estimatedChanges?.tokens[0].decimals;\n            if (!tokenIcon) {\n                tokenIcon = defaultTokenIcon;\n            }\n        } else if (transactionInfo?.type == TransactionSmartType.NativeTransfer) {\n            tokenIcon = getNativeTokenIcon(chainInfo);\n            tokenSymbol = chainInfo?.nativeCurrency?.symbol || '';\n        }\n\n        return {\n            tokenIcon: formatPng(tokenIcon),\n            tokenSymbol,\n            tokenDecimals,\n        };\n    }, [transactionInfo?.estimatedChanges?.tokens, chainInfo]);\n\n    // \u6839\u636E\u5408\u7EA6\u5730\u5740 \u83B7\u53D6\u5408\u7EA6token\u7684price  setTokenPrice(tokenPrice);\n    useEffect(() => {\n        let addresses: string[] | undefined = undefined;\n        if (\n            contractAddress &&\n            (transactionInfo?.type == TransactionSmartType.ERC20_APPROVE ||\n                transactionInfo?.type == TransactionSmartType.ERC20_TRANSFER)\n        ) {\n            addresses = [contractAddress];\n        } else if (transactionInfo?.type == TransactionSmartType.NativeTransfer) {\n            addresses = ['native'];\n        }\n\n        if (addresses) {\n            window.particleAuth?.ethereum\n                .request({\n                    chainId: chainInfo.id,\n                    method: EvmEnhancedMethod.getPrice,\n                    params: [addresses, [modalOptions.fiatCoin?.toLowerCase() || 'usd']],\n                })\n                .then((res: TokenPrice[]) => {\n                    const tokenPrice =\n                        res.find((item) => item.address.toLowerCase() === addresses?.[0].toLowerCase())?.currencies?.[0]\n                            ?.price || 0;\n                    setTokenPrice(tokenPrice);\n                })\n                .catch((err) => {\n                    console.log('window.particleAuth?.ethereum', err);\n                });\n        }\n    }, [contractAddress]);\n\n    const amountChange = useMemo(() => {\n        let value = '';\n        const { decimals = 18, amountChange = 0 } = transactionInfo?.estimatedChanges?.tokens?.[0] || {};\n        if (transactionInfo?.type == TransactionSmartType.ERC20_APPROVE) {\n            const amount = transactionInfo.data?.function?.params?.[1]?.value as string;\n            value = new BigNumber(amount).dividedBy(new BigNumber(10).pow(decimals)).toString();\n        } else if (transactionInfo?.type == TransactionSmartType.ERC20_TRANSFER) {\n            value = new BigNumber(amountChange).dividedBy(new BigNumber(10).pow(decimals)).toString();\n        } else if (transactionInfo?.type == TransactionSmartType.NativeTransfer) {\n            const { nativeChange } = transactionInfo.estimatedChanges.natives[0];\n            value = new BigNumber(nativeChange)\n                .dividedBy(new BigNumber(10).pow(chainInfo.nativeCurrency.decimals))\n                .toString();\n        } else if (\n            transactionInfo?.type == TransactionSmartType.ERC721_TRANFER ||\n            transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER ||\n            transactionInfo?.type === TransactionSmartType.SEAPORT_CANCEL_ORDER ||\n            transactionInfo?.type == TransactionSmartType.ERC1155_TRANFER\n        ) {\n            value = transactionInfo.estimatedChanges?.nfts?.[0]?.amountChange?.toString();\n        }\n        return value || '';\n    }, [transactionInfo?.estimatedChanges?.tokens]);\n\n    const amountChangeUSD = useMemo(() => {\n        if (amountChange && tokenPrice) {\n            return formatPrice({\n                amount: amountChange,\n                price: tokenPrice,\n                fiatCoin: modalOptions.fiatCoin ?? 'USD',\n            });\n        } else {\n            return '';\n        }\n    }, [amountChange, tokenPrice]);\n\n    const formartApproveAmount = (value: BigNumber): string => {\n        const amount = value.toString();\n        if (amount.length < 10) {\n            return amount;\n        } else {\n            return value.toPrecision(10);\n        }\n    };\n\n    const formatAmountChange = useMemo(() => {\n        let value = changeApproveAmount || amountChange || '0';\n        if (transactionInfo?.type === TransactionSmartType.ERC20_APPROVE) {\n            value = formartApproveAmount(new BigNumber(value));\n        } else {\n            value = numbro(value).format({\n                thousandSeparated: true,\n                trimMantissa: true,\n                mantissa: 9,\n            });\n        }\n        return value || '0';\n    }, [transactionInfo?.type, amountChange, changeApproveAmount]);\n\n    const amountFontSize = useMemo(() => {\n        let fontSize = 22;\n        const len = (formatAmountChange?.length || 0) + (tokenSymbol?.length || 0);\n        if (len > 26) {\n            fontSize = 14;\n        } else if (len > 22) {\n            fontSize = 16;\n        } else if (len > 18) {\n            fontSize = 18;\n        }\n        return `${fontSize}px`;\n    }, [formatAmountChange, tokenSymbol]);\n\n    const nftData: EVMNFTChange | undefined = useMemo(() => {\n        return transactionInfo?.estimatedChanges?.nfts?.[0] || transactionInfo?.data?.offer?.[0];\n    }, [transactionInfo?.estimatedChanges?.nfts, transactionInfo?.data?.offer]);\n\n    const contentTitle: string = useMemo(() => {\n        if (transactionInfo?.type === TransactionSmartType.ERC20_APPROVE) {\n            return t('new.token_per');\n        } else if (transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER) {\n            return t('new.buy_nft');\n        } else if (transactionInfo?.type === TransactionSmartType.SEAPORT_CANCEL_ORDER) {\n            return t('new.cancel_nft_listing');\n        } else if (transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING) {\n            return t('new.nft_listing');\n        } else {\n            return t('new.confirmation');\n        }\n    }, [transactionInfo?.type]);\n\n    const hexData = useMemo(() => {\n        return transactionInfo?.data?.data || '';\n    }, [transactionInfo?.data?.data]);\n\n    /**\n     * toTag\n     */\n    const contractTag = useMemo(() => {\n        if (\n            (transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER ||\n                transactionInfo?.type === TransactionSmartType.SEAPORT_CANCEL_ORDER) &&\n            transactionInfo?.toTag\n        ) {\n            return ` (${transactionInfo?.toTag})`;\n        } else {\n            return '';\n        }\n    }, [transactionInfo?.type]);\n\n    const nftName = useMemo(() => {\n        if (nftData) {\n            if (nftData.name && nftData.name.length > 0) {\n                return nftData.name;\n            } else {\n                return `NFT#${nftData.tokenId}`;\n            }\n        }\n        return 'NFT';\n    }, [nftData]);\n\n    /**\n     * \u4EA4\u6613nonce\n     */\n    const nonce = useMemo(() => {\n        if (transactionInfo?.data?.nonce && !isTron(chainInfo)) {\n            return `#${parseInt(transactionInfo?.data?.nonce as string)}`;\n        } else {\n            return '';\n        }\n    }, [chainInfo, transactionInfo?.data?.nonce]);\n\n    /**\n     * NFT \u7C7B\u578B\n     */\n    const nftType = useMemo((): 'ERC1155' | 'ERC721' | '' => {\n        return transactionInfo?.estimatedChanges?.nfts?.[0]?.isSemiFungible === true\n            ? 'ERC1155'\n            : transactionInfo?.estimatedChanges?.nfts?.[0]?.isSemiFungible === false\n            ? 'ERC721'\n            : '';\n    }, [transactionInfo?.type, nftData?.isSemiFungible]);\n\n    /**\n     * nft \u4E0A\u67B6 \u6570\u91CF\n     */\n    const NFTListingQuantity = useMemo(() => {\n        return nftData?.amount || '';\n    }, [nftData]);\n\n    /**\n     * nft \u4EF7\u683C\n     */\n    const nftPrice = useMemo(() => {\n        const { symbol, decimals, amount } = transactionInfo?.price || {};\n        if (transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER && symbol && decimals && amount) {\n            const price = new BigNumber(amount).dividedBy(new BigNumber(10).pow(decimals));\n            return `${trimDecimals(price.toString(10))} ${symbol}`;\n        } else {\n            return '';\n        }\n    }, [transactionInfo?.type, transactionInfo?.price]);\n\n    const NFTListingData = useMemo(() => {\n        if (transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING) {\n            const seller = `${shortString(formatAddress(transactionInfo?.data?.offerer || '', chainInfo))}(${t(\n                'new.you'\n            )})`;\n            const symbol = transactionInfo?.data?.consideration?.[0]?.symbol || '';\n            let price = '';\n            let sellerEarnings = '';\n            let others = '';\n            const selfAddress = transactionInfo?.data?.offerer || '';\n            const startMS = Number(transactionInfo?.data?.startTime || 0) * 1000;\n            const startTime = dayjs(new Date(startMS)).format('MM/DD/YYYY hh:mm A');\n            let endTime = '';\n            if (transactionInfo?.data?.endTime && transactionInfo?.data?.endTime?.length > 10) {\n                // \u65E0\u9650\n                endTime = t('new.infinite');\n            } else {\n                const endMS = Number(transactionInfo?.data?.endTime || 0) * 1000;\n                endTime = dayjs(new Date(endMS)).format('MM/DD/YYYY hh:mm A');\n            }\n            if (transactionInfo?.data?.consideration) {\n                const list = transactionInfo?.data?.consideration;\n                let result = new BigNumber(0);\n                for (let i = 0; i < list.length; i++) {\n                    const item = list[i];\n                    result = result.plus(new BigNumber(item.amount));\n                    const amount = `${trimDecimals(\n                        new BigNumber(item.amount)\n                            .dividedBy(new BigNumber(10).pow(list?.[0]?.decimals ?? 18))\n                            .toString(10)\n                    )} ${symbol}`;\n                    if (item.recipient.toLowerCase() === selfAddress.toLowerCase()) {\n                        sellerEarnings = amount;\n                    } else {\n                        others = amount;\n                    }\n                }\n                result = result.dividedBy(new BigNumber(10).pow(list?.[0]?.decimals ?? 18));\n                price = `${trimDecimals(result.toString(10))} ${symbol}`;\n            }\n            return {\n                seller,\n                price,\n                sellerEarnings,\n                others,\n                startTime,\n                endTime,\n            };\n        } else {\n            return {};\n        }\n    }, [transactionInfo]);\n\n    return (\n        <div className=\"transfer-content\">\n            {transactionInfo && (\n                <div className=\"less-box\">\n                    <div className=\"groups\">\n                        <div className=\"item item1\">\n                            <div className=\"flex-sp-row row1\">\n                                <div className=\"left\">{contentTitle}</div>\n                                {nonce && <div className=\"right\">{nonce}</div>}\n                            </div>\n                            {/* ERC20_TRANSFER or NativeTransfer*/}\n                            {(transactionInfo?.type === TransactionSmartType.ERC20_TRANSFER ||\n                                transactionInfo?.type === TransactionSmartType.NativeTransfer) && (\n                                <div\n                                    className=\"flex-sp-row row2\"\n                                    data-feed-line={`${formatAmountChange}`.length > 13 ? true : false}\n                                >\n                                    <div className=\"left\">\n                                        <div className=\"icon\">\n                                            {!!tokenIcon && (\n                                                <Image\n                                                    className=\"icon\"\n                                                    src={tokenIcon}\n                                                    fallback={defaultTokenIcon}\n                                                    preview={false}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div className=\"right\">\n                                        <div className=\"amount\">\n                                            <div\n                                                className=\"change-val\"\n                                                style={{\n                                                    color: formatAmountChange?.includes?.('-')\n                                                        ? '#ea4335'\n                                                        : 'var(--text-color)',\n                                                    fontSize: amountFontSize,\n                                                }}\n                                            >\n                                                {formatAmountChange}\n                                            </div>\n                                            <div\n                                                className=\"symbol\"\n                                                style={{\n                                                    fontSize: amountFontSize,\n                                                }}\n                                            >\n                                                {tokenSymbol}\n                                            </div>\n                                        </div>\n                                        <div className=\"amount-usd\">{amountChangeUSD}</div>\n                                    </div>\n                                </div>\n                            )}\n                            {/* ERC20_APPROVE */}\n                            {transactionInfo?.type === TransactionSmartType.ERC20_APPROVE && (\n                                <div className=\"row-erc20-approve-content\">\n                                    <div className=\"flex-sp-row row-ac1\">\n                                        <img className=\"token-icon\" src={tokenIcon} alt=\"\" />\n                                        <div className=\"amount\">\n                                            {formatAmountChange}&nbsp;{tokenSymbol}\n                                        </div>\n                                    </div>\n                                    <div\n                                        className=\"flex-sp-row row-ac2\"\n                                        onClick={() => {\n                                            const amount = new BigNumber(changeApproveAmount || amountChange);\n                                            editApproveAmountForm.setFieldsValue({\n                                                amount: formartApproveAmount(amount),\n                                            });\n                                            setVisibleModal(true);\n                                        }}\n                                    >\n                                        <div>{t('new.edit_approve')}</div>\n                                        <div className=\"icon\">\n                                            <IconEditPen />\n                                        </div>\n                                    </div>\n                                    <div className=\"flex-sp-row row-ac3\">{t('new.by_granting')}</div>\n                                </div>\n                            )}\n                            {/* ERC1155_TRANFER || ERC721_TRANFER || SEAPORT_FULFILL_ORDER || SEAPORT_CANCEL_ORDER*/}\n                            {(transactionInfo?.type === TransactionSmartType.ERC1155_TRANFER ||\n                                transactionInfo?.type === TransactionSmartType.SEAPORT_FULFILL_ORDER ||\n                                transactionInfo?.type === TransactionSmartType.SEAPORT_CANCEL_ORDER ||\n                                transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING ||\n                                transactionInfo?.type === TransactionSmartType.ERC721_TRANFER) && (\n                                <>\n                                    <div className=\"flex-sp-row row3\">\n                                        <div className=\"left\">\n                                            <Image\n                                                width={32}\n                                                height={32}\n                                                src={ipfsToSrc(nftData?.image || '')}\n                                                fallback={require('../../../common/images/default_nft.png').default}\n                                                preview={false}\n                                                // preview={{\n                                                //     getContainer: () => {\n                                                //         return authCoreModal.rootBody as HTMLElement;\n                                                //     },\n                                                // }}\n                                            />\n                                        </div>\n                                        <div className=\"right\">\n                                            <div className=\"name\">{nftName}</div>\n                                        </div>\n                                    </div>\n                                    <div className=\"flex-sp-row row4\">{nftType}</div>\n                                    {transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING &&\n                                        NFTListingQuantity && (\n                                            <div className=\"flex-sp-row row5\">\n                                                <div className=\"left\">{t('new.amount')}</div>\n                                                <div className=\"right\">{NFTListingQuantity}</div>\n                                            </div>\n                                        )}\n                                    {nftPrice && (\n                                        <div className=\"flex-sp-row row6\">\n                                            <div className=\"left\">{t('new.nft_price')}</div>\n                                            <div className=\"right\">{nftPrice}</div>\n                                        </div>\n                                    )}\n                                </>\n                            )}\n                        </div>\n\n                        {/* ERC1155_TRANFER */}\n                        {transactionInfo?.type === TransactionSmartType.ERC1155_TRANFER && (\n                            <div className=\"item item2-0\">\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">{t('new.amount')}</div>\n                                    <div className=\"right\">\n                                        {isNullish(nftData?.amountChange)\n                                            ? t('program.unknown')\n                                            : Math.abs(nftData?.amountChange || 1)}\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n\n                        {transactionInfo?.type !== TransactionSmartType.SEAPORT_NFT_LISTING && (\n                            <div className=\"item item2\">\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">\n                                        <div className=\"pn-row pn-row1\">\n                                            {t('new.from')} ({t('new.you')})\n                                        </div>\n                                        <div className=\"pn-row pn-row2\">\n                                            {shortString(formatAddress(transactionInfo.data.from, chainInfo))}\n                                        </div>\n                                    </div>\n                                    <div className=\"middle\">\n                                        <div className=\"icon\">\n                                            <IconTo />\n                                        </div>\n                                    </div>\n                                    <div className=\"right\">\n                                        <div className=\"pn-row pn-row1\">\n                                            {t('new.to')}\n                                            {contractTag}\n                                        </div>\n                                        {/* <div className=\"pn-row pn-row2\">{shortString(transactionInfo.data.to)}</div> */}\n                                        <div className=\"pn-row pn-row2\">\n                                            {shortString(formatAddress(to, chainInfo))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n\n                        {!isTron(chainInfo) && transactionInfo?.type !== TransactionSmartType.SEAPORT_NFT_LISTING && (\n                            <div className=\"item item4\">\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">{t('new.network_fee')}</div>\n                                    {gasError ? (\n                                        <div className=\"gas-warning\">\n                                            <img\n                                                alt=\"\"\n                                                src={require('../../../common/images/no_warning.png').default}\n                                            />\n                                            <span>{t('sign.gas_fee_cannot')}</span>\n                                        </div>\n                                    ) : (\n                                        <div className=\"right\">\n                                            <div className=\"pn-row pn-row1\">\n                                                {gasFeeDisplay?.maxFee} {getNativeSymbol(chainInfo)}\n                                            </div>\n                                            <div className=\"pn-row pn-row2\">\n                                                {formatPrice({\n                                                    amount: gasFeeDisplay?.maxFee || '',\n                                                    price: nativeTokenPrice?.[0]?.currencies?.[0]?.price || 0,\n                                                    mantissa: 4,\n                                                    fiatCoin: modalOptions.fiatCoin ?? 'USD',\n                                                })}\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                        {transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING && (\n                            <div className=\"item item5\">\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">{t('new.seller')}</div>\n                                    <div className=\"right\">{NFTListingData.seller}</div>\n                                </div>\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">{t('new.price')}</div>\n                                    <div className=\"right\">{NFTListingData.price}</div>\n                                </div>\n                                <div className=\"flex-sp-row price-sub\">\n                                    <div className=\"left\">{t('new.seller_earnings')}</div>\n                                    <div className=\"right\">{NFTListingData.sellerEarnings}</div>\n                                </div>\n                                <div className=\"flex-sp-row price-sub\">\n                                    <div className=\"left\">{t('new.others')}</div>\n                                    <div className=\"right\">{NFTListingData.others}</div>\n                                </div>\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">{t('new.start_time')}</div>\n                                    <div className=\"right\">{NFTListingData.startTime}</div>\n                                </div>\n                                <div className=\"flex-sp-row\">\n                                    <div className=\"left\">{t('new.end_time')}</div>\n                                    <div className=\"right\">{NFTListingData.endTime}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )}\n            <div className=\"fold-content\">\n                <div\n                    className=\"wrap\"\n                    onClick={() => {\n                        setDisplayDetail(!displayDetail);\n                    }}\n                >\n                    {displayDetail ? (\n                        <div className=\"fold\" key=\"less\">\n                            <span>{t('new.less')}</span>\n                            <SVGIcon className=\"arrow-icon\" name=\"arrow_icon\" />\n                        </div>\n                    ) : (\n                        <div className=\"unfold\" key=\"more\">\n                            <span>{t('new.details')}</span>\n                            <SVGIcon className=\"arrow-icon\" name=\"arrow_icon\" />\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div\n                className=\"details-box\"\n                style={{\n                    display: displayDetail ? '' : 'none',\n                }}\n            >\n                {!gasError && !isTron(chainInfo) && transactionData && (\n                    <GasDisplay\n                        openGasDrawer={() => setGasVis(true)}\n                        signLoading={signLoading}\n                        chainInfo={chainInfo}\n                        signMethod={signMethod}\n                    />\n                )}\n                {gasError && !isTron(chainInfo) && <NoGas />}\n                <div className=\"mg-bottom-15\"></div>\n                <div>\n                    {/* function */}\n                    {transactionInfo && transactionInfo.data.function && (\n                        <div className=\"inner-instruction\" key={'instruction-function'}>\n                            <div className=\"inner-content\">\n                                <div className=\"content-item\">\n                                    <div className=\"item\">\n                                        <div className=\"item-0\">\n                                            {t('sign.function_type')} {formatFunction(transactionInfo.data.function)}\n                                        </div>\n\n                                        {transactionInfo.data.function.params.map((item) => (\n                                            <div className=\"item-1 mt10\" key={`instruction-function${item.name}`}>\n                                                {shortString(item.name)}\n                                                <span>{shortString(item.value)}</span>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {/* hex data */}\n                    {hexData && (\n                        <div className=\"inner-instruction\" key={'instruction-hex-data'}>\n                            <div className=\"inner-content\">\n                                <div className=\"content-item\">\n                                    <div className=\"item\">\n                                        <div className=\"item-0\">{t('sign.hex_data')}</div>\n                                        <div className=\"item-1 mt10\">\n                                            <div className=\"data\">{hexData}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {/* signMessage */}\n                    {transactionInfo?.type === TransactionSmartType.SEAPORT_NFT_LISTING &&\n                        !!props.signMessage &&\n                        props.signMessage()}\n                </div>\n            </div>\n            <Modal\n                title={t('new.edit_approve')}\n                open={visibleModal}\n                centered={true}\n                wrapClassName=\"edit-approve-amount-modal\"\n                okText={t('common.confirm')}\n                confirmLoading={changeApproveAmountLoading}\n                closeIcon={<CircleClose />}\n                onOk={() => {\n                    setChangeApproveAmountLoading(true);\n                    editApproveAmountForm\n                        .validateFields()\n                        .then((values) => {\n                            const amount = values?.amount?.replace?.(/\\.+$/g, '') || '';\n                            if (amount) {\n                                return setChangeApproveAmount(amount);\n                            }\n                        })\n                        .then(() => {\n                            setChangeApproveAmountLoading(false);\n                            setVisibleModal(false);\n                        })\n                        .catch((error) => {\n                            setChangeApproveAmountLoading(false);\n                            console.log('editApproveAmountForm', error);\n                        });\n                }}\n                onCancel={() => {\n                    setChangeApproveAmountLoading(false);\n                    setVisibleModal(false);\n                }}\n                getContainer={() => {\n                    return authCoreModal.rootBody as HTMLDivElement;\n                }}\n            >\n                <Form form={editApproveAmountForm} autoComplete=\"off\">\n                    <Form.Item\n                        label=\"\"\n                        name=\"amount\"\n                        rules={[\n                            {\n                                validator: (_, value) => {\n                                    if (\n                                        isNaN((value || '').replace(/\\.$/, '')) ||\n                                        !isFinite((value || '').replace(/\\.$/, ''))\n                                    ) {\n                                        return Promise.reject(t('new.please_enter'));\n                                    }\n                                    if (!value || (value && new BigNumber(value).lte(new BigNumber(0)))) {\n                                        return Promise.reject(t('new.the_amount'));\n                                    }\n                                    const amount = value?.replace?.(/\\.+$/g, '') || '';\n                                    const bn = new BigNumber(amount);\n                                    if ((bn.decimalPlaces() ?? 0) > tokenDecimals) {\n                                        return Promise.reject(t('new.please_enter'));\n                                    }\n                                    return Promise.resolve();\n                                },\n                            },\n                        ]}\n                    >\n                        <Input placeholder={t('new.please_enter') as string} />\n                    </Form.Item>\n                    <div className=\"icon\">\n                        <img src={tokenIcon} alt=\"\" />\n                    </div>\n                    <div className=\"symbol\">{tokenSymbol}</div>\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n\nexport default NewErcTransfers;\n", "import React from 'react';\n\nconst IconEditPen = () => {\n    return (\n        <svg width={10.577} height={10.492} viewBox=\"0 0 10.577 10.492\">\n            <defs>\n                <style>\n                    {\n                        '.cls-1{fill:currentColor;stroke-width:0.2px}.cls-1,.cls-2{stroke:currentColor}.cls-2{fill:none;stroke-width:0.8px}'\n                    }\n                </style>\n            </defs>\n            <g id=\"\u7EC4_120\" transform=\"translate(-869.458 -38.834)\">\n                <path\n                    id=\"Fill_583\"\n                    className=\"cls-1\"\n                    d=\"M2.337 10.292H.356A.356.356 0 0 1 0 9.936V7.955a1.29 1.29 0 0 1 .385-.924L7.033.382a1.3 1.3 0 0 1 1.843 0l1.035 1.031a1.311 1.311 0 0 1 0 1.847L3.262 9.909a1.306 1.306 0 0 1-.925.383Zm3.718-7.926L.888 7.534a.583.583 0 0 0-.176.421V9.58h1.625a.612.612 0 0 0 .423-.174l5.166-5.169-1.871-1.871Zm1.9-1.654a.583.583 0 0 0-.418.173l-.978.976 1.87 1.872.978-.976a.6.6 0 0 0 0-.84L8.373.886a.582.582 0 0 0-.418-.174Z\"\n                    transform=\"translate(869.558 38.934)\"\n                />\n\n                <path id=\"\u8DEF\u5F84_2122\" className=\"cls-2\" d=\"m0 0 2.389 2.389\" transform=\"translate(870.102 46.23)\" />\n            </g>\n        </svg>\n    );\n};\nexport default React.memo(IconEditPen);\n", "import React from 'react';\n\nconst IconTo = ({ width = '34.2', height = '12.632', ...other }) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            version=\"1.1\"\n            width=\"36\"\n            height=\"36\"\n            viewBox=\"0 0 36 36\"\n            {...other}\n        >\n            <g>\n                <g transform=\"matrix(0,-1,1,0,-36,36)\">\n                    <ellipse cx=\"18\" cy=\"54\" rx=\"18\" ry=\"18\" fill=\"currentColor\" fillOpacity=\"0.08\" />\n                </g>\n                <g>\n                    <g transform=\"matrix(0,1,-1,0,39.271209716796875,-15.271026611328125)\">\n                        <path\n                            d=\"M34.0711181640625,13.066761552734375L38.0711181640625,18.400091552734374C38.565518164062496,19.059331552734374,38.0951181640625,20.000091552734375,37.2711181640625,20.000091552734375L29.2711181640625,20.000091552734375C28.4470681640625,20.000091552734375,27.9766911640625,19.059331552734374,28.4711181640625,18.400091552734374L32.4711181640625,13.066761552734375C32.8711181640625,12.533424552734376,33.6711181640625,12.533424552734376,34.0711181640625,13.066761552734375\"\n                            fill=\"currentColor\"\n                            fillOpacity=\"1\"\n                        />\n                    </g>\n                    <g transform=\"matrix(0,1,-1,0,37.415496826171875,-1.415802001953125)\">\n                        <path d=\"\" fill=\"#181B1E\" fillOpacity=\"1\" />\n                        <path\n                            d=\"M18.5656494140625,28.686447412109374L18.5656494140625,24.011087412109376L18.5656494140625,22.638147412109376L18.5656494140625,17.999847412109375Q18.5656494140625,17.916129712109374,18.5819824140625,17.834020412109375Q18.5983144140625,17.751911412109376,18.6303514140625,17.674566412109375Q18.6623894140625,17.597221412109374,18.7089004140625,17.527612412109374Q18.7554114140625,17.458004412109375,18.8146084140625,17.398806412109376Q18.8738064140625,17.339609412109375,18.9434144140625,17.293098412109376Q19.0130234140625,17.246587412109374,19.0903684140625,17.214549412109374Q19.1677134140625,17.182512412109375,19.2498224140625,17.166180412109377Q19.3319317140625,17.149847412109374,19.4156494140625,17.149847412109374Q19.4993671140625,17.149847412109374,19.5814764140625,17.166180412109377Q19.6635854140625,17.182512412109375,19.7409304140625,17.214549412109374Q19.8182754140625,17.246587412109374,19.8878844140625,17.293098412109376Q19.9574924140625,17.339609412109375,20.0166904140625,17.398806412109376Q20.0758874140625,17.458004412109375,20.1223984140625,17.527612412109374Q20.1689094140625,17.597221412109374,20.2009474140625,17.674566412109375Q20.2329844140625,17.751911412109376,20.2493164140625,17.834020412109375Q20.2656494140625,17.916129712109374,20.2656494140625,17.999847412109375L20.2656494140625,22.638147412109376L20.2656494140625,24.011087412109376L20.2656494140625,28.686447412109374Q20.2656494140625,28.770247412109377,20.2493164140625,28.852347412109374Q20.2329844140625,28.934447412109375,20.2009474140625,29.011747412109376Q20.1689094140625,29.089147412109376,20.1223984140625,29.158747412109374Q20.0758874140625,29.228347412109375,20.0166904140625,29.287547412109376Q19.9574924140625,29.346747412109373,19.8878844140625,29.393247412109375Q19.8182754140625,29.439747412109377,19.7409304140625,29.471747412109373Q19.6635854140625,29.503847412109373,19.5814764140625,29.520147412109374Q19.4993671140625,29.536447412109375,19.4156494140625,29.536447412109375Q19.3319317140625,29.536447412109375,19.2498224140625,29.520147412109374Q19.1677134140625,29.503847412109373,19.0903684140625,29.471747412109373Q19.0130234140625,29.439747412109377,18.9434144140625,29.393247412109375Q18.8738064140625,29.346747412109373,18.8146084140625,29.287547412109376Q18.7554114140625,29.228347412109375,18.7089004140625,29.158747412109374Q18.6623894140625,29.089147412109376,18.6303514140625,29.011747412109376Q18.5983144140625,28.934447412109375,18.5819824140625,28.852347412109374Q18.5656494140625,28.770247412109377,18.5656494140625,28.686447412109374Z\"\n                            fillRule=\"evenodd\"\n                            fill=\"currentColor\"\n                            fillOpacity=\"1\"\n                        />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    );\n};\nexport default React.memo(IconTo);\n", "import { EvmRpcMethod, GasFeeMode, type EVMTransaction, type TokenPrice } from '@particle-network/auth-core';\nimport type { ChainInfo } from '@particle-network/chains';\nimport { useInterval } from 'ahooks';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport { useParticleAuth } from '../../../context';\nimport { getNativeSymbol } from '../../../utils/chain-utils';\nimport { formatPrice } from '../../../utils/number-utils';\nimport { useEVMTransaction } from '../evmContextProvider';\nimport styles from './info-sign.less';\n\ntype IProps = {\n    openGasDrawer: () => void;\n    signLoading: boolean;\n    chainInfo: ChainInfo;\n    signMethod: string;\n};\n\nfunction GasDisplay(props: IProps) {\n    const { openGasDrawer, signLoading, chainInfo, signMethod } = props;\n\n    const { t } = useTranslation();\n\n    const { gasFeeResult, gasFeeMode, fetchGasAsync, gasFeeDisplay, tokenPrice, totalAmountDisplay, transactionData } =\n        useEVMTransaction();\n\n    const [interval, setInterval] = useState<number | undefined>(undefined);\n\n    const [countdown, setCountdown] = useState(10);\n\n    const { modalOptions } = useParticleAuth();\n\n    useInterval(() => {\n        const result = countdown - 1;\n        if (result <= 0) {\n            setCountdown(10);\n            loadGasConfig();\n        } else {\n            setCountdown(result);\n        }\n    }, interval);\n\n    useEffect(() => {\n        if (signLoading) {\n            setInterval(undefined);\n            setCountdown(10);\n        } else {\n            setInterval(1000);\n            loadGasConfig();\n        }\n        return () => {\n            setInterval(undefined);\n            setCountdown(10);\n        };\n    }, [signLoading]);\n\n    const loadGasConfig = () => {\n        if (transactionData) {\n            fetchGasAsync({\n                addresses: ['native'],\n                from: transactionData.from,\n                to: transactionData.to,\n                value: transactionData.value,\n                data: transactionData.data,\n            });\n        }\n    };\n\n    const editGas = () => {\n        if (!gasFeeResult) {\n            return;\n        }\n        openGasDrawer();\n    };\n\n    const estimatedTime = (data?: EVMTransaction): string => {\n        if (!data || !gasFeeResult || !gasFeeMode) {\n            return '';\n        }\n        let time: number;\n        if (gasFeeMode == GasFeeMode.low) {\n            time = gasFeeResult.low.maxWaitTime;\n        } else if (gasFeeMode == GasFeeMode.medium) {\n            time = gasFeeResult.medium.maxWaitTime;\n        } else if (gasFeeMode == GasFeeMode.high) {\n            time = gasFeeResult.high.maxWaitTime;\n        } else {\n            time = gasFeeResult.low.maxWaitTime;\n        }\n        let displayTime: string;\n        if (time / 1000 >= 60) {\n            displayTime = `>${time / 1000 / 60}min`;\n        } else {\n            displayTime = `<${time / 1000}s`;\n        }\n\n        return displayTime;\n    };\n\n    const formatDisplayPrice = (fee: string, prices: TokenPrice[]): string => {\n        return prices.length > 0 && prices[0].currencies && prices[0].currencies.length > 0\n            ? formatPrice({\n                  amount: fee,\n                  price: prices[0].currencies[0].price,\n                  fiatCoin: modalOptions.fiatCoin || 'USD',\n              })\n            : '';\n    };\n\n    return (\n        <div>\n            <style>{styles as unknown as string}</style>\n            <div className=\"net-fee\" onClick={editGas}>\n                <div className=\"evm-fee\">\n                    <div className=\"fee-title\">\n                        {t('sign.evm_fee')}\n                        {gasFeeDisplay && interval && (\n                            <span>\n                                {' '}\n                                {t('sign.refresh_in')} {countdown}s\n                            </span>\n                        )}\n                    </div>\n\n                    {gasFeeDisplay && tokenPrice && (\n                        <div className=\"fee-row\">\n                            <div>\n                                {gasFeeDisplay.fee && (\n                                    <div>\n                                        {gasFeeDisplay.fee} {getNativeSymbol(chainInfo)}\n                                        <span className=\"approximately\">\n                                            {' '}\n                                            {formatDisplayPrice(gasFeeDisplay.fee, tokenPrice)}\n                                        </span>\n                                    </div>\n                                )}\n                                {t('sign.max_fee')}\n                                {gasFeeDisplay.maxFee} {getNativeSymbol(chainInfo)}\n                                <span className=\"approximately\">\n                                    {' '}\n                                    {formatDisplayPrice(gasFeeDisplay.maxFee, tokenPrice)}\n                                </span>\n                            </div>\n                            <div className=\"fee-right\">\n                                <div>\n                                    {gasFeeDisplay && <div className=\"fee-standard\">{t(`sign.gas_${gasFeeMode}`)}</div>}\n                                    <div\n                                        className=\"fee-time\"\n                                        style={\n                                            estimatedTime(transactionData).search('min') !== -1\n                                                ? { color: '#F55F0D' }\n                                                : {}\n                                        }\n                                    >\n                                        {estimatedTime(transactionData)}\n                                    </div>\n                                </div>\n                                <div>\n                                    <SVGIcon className=\"arrow-right-icon\" name=\"arrow_right_icon\" />\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {signMethod !== EvmRpcMethod.ethSendTransaction && (\n                <div className=\"total\">\n                    <div className=\"total-title\">{t('sign.total')}</div>\n                    {totalAmountDisplay && tokenPrice && (\n                        <div className=\"total-content mt8\">\n                            {totalAmountDisplay.amount && (\n                                <div>\n                                    {totalAmountDisplay.amount} {getNativeSymbol(chainInfo)}\n                                    <span> {formatDisplayPrice(totalAmountDisplay.amount, tokenPrice)}</span>\n                                </div>\n                            )}\n                            <div>\n                                {t('sign.max_amount')}: {totalAmountDisplay.maxAmount} {getNativeSymbol(chainInfo)}\n                                <span> {formatDisplayPrice(totalAmountDisplay.maxAmount, tokenPrice)}</span>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default GasDisplay;\n", "import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getNativeSymbol } from '../../../utils/chain-utils';\nimport { useEVMTransaction } from '../evmContextProvider';\nimport styles from './info-sign.less';\n\nfunction NoGas() {\n    const { t } = useTranslation();\n\n    const { totalAmountDisplay, currentChain: chainInfo } = useEVMTransaction();\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <div className=\"no-gas-fee\">\n                <div className=\"no-title\">{t('sign.network_fee')}</div>\n                <div className=\"no-warning\">\n                    <img alt=\"\" src={require('../../../common/images/no_warning.png').default} />\n                    <span>{t('sign.gas_fee_cannot')}</span>\n                </div>\n                {totalAmountDisplay && (\n                    <>\n                        <div className=\"data-title\">{t('sign.total')}</div>\n                        {totalAmountDisplay.amount && (\n                            <div className=\"data-item\">\n                                {totalAmountDisplay.amount} {getNativeSymbol(chainInfo)}\n                            </div>\n                        )}\n                        <div className=\"data-item\">\n                            {t('sign.max_amount')}:{' '}\n                            <span>\n                                {totalAmountDisplay.maxAmount} {getNativeSymbol(chainInfo)}\n                            </span>\n                        </div>\n                    </>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default NoGas;\n", "import { MinusCircleFilled, PlusCircleFilled } from '@ant-design/icons';\nimport type { PrefixedHexString } from '@ethereumjs/util';\nimport { addHexPrefix } from '@ethereumjs/util';\nimport { GasFeeMode, type GasFee, type TokenPrice } from '@particle-network/auth-core';\nimport { Button, Form, Input, Radio } from 'antd';\nimport { BigNumber } from 'bignumber.js';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ParticleDrawer from '../../..//components/particle-drawer';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport PowerFooter from '../../../components/power-footer';\nimport { useAuthCoreModal, useParticleAuth } from '../../../context';\nimport { getNativeSymbol } from '../../../utils/chain-utils';\nimport { bnToHex, toHexPrefixString } from '../../../utils/common-utils';\nimport { ethereumUtils } from '../../../utils/ethereumUtils';\nimport {\n    formatPrice,\n    fromWei,\n    fromWeiFormat,\n    toBigNumber,\n    toWei,\n    toWeiBigNumber,\n    trimDecimals,\n} from '../../../utils/number-utils';\nimport { isEIP1559Type } from '../../../utils/transaction-utils';\nimport { useEVMTransaction } from '../evmContextProvider';\nimport styles from './evm-gas.scss';\n\nfunction EvmGas(props: any) {\n    const { openGasDrawer, visible } = props;\n    const [moreDetails, setMoreDetails] = useState(false);\n    const [errorTip, setErrorTip] = useState(false);\n    const [errorTip1, setErrorTip1] = useState<string>();\n    const [errorTip2, setErrorTip2] = useState<string>();\n    const optionsForm = useRef<any>(null);\n    const { authCoreModal } = useAuthCoreModal();\n    const { t } = useTranslation();\n\n    const {\n        transactionData,\n        updateTransaction,\n        gasFeeMode,\n        setGasFeeMode,\n        gasFeeDisplay: gasFeeDisplayContext,\n        gasFeeResult,\n        tokenPrice,\n        latestGasLimit,\n        currentChain: chainInfo,\n    } = useEVMTransaction();\n\n    const [gasMode, setGasMode] = useState(gasFeeMode);\n    const [gasFeeDisplay, setGasFeeDisplay] = useState(gasFeeDisplayContext);\n    const [gasLimit, setGasLimit] = useState<string>(latestGasLimit || '');\n    const [maxPriorityFeePerGas, setMaxPriorityFeePerGas] = useState(transactionData?.maxPriorityFeePerGas);\n\n    const [maxFee, setMaxFee] = useState<string>('');\n\n    const [gasForm] = Form.useForm();\n\n    const { modalOptions } = useParticleAuth();\n\n    useEffect(() => {\n        if (gasFeeMode || visible) {\n            setGasMode(gasFeeMode);\n        }\n    }, [gasFeeMode, visible]);\n\n    useEffect(() => {\n        if (gasFeeDisplayContext || visible) {\n            setGasFeeDisplay(gasFeeDisplayContext);\n        }\n    }, [gasFeeDisplayContext, visible]);\n\n    useEffect(() => {\n        if (visible) {\n            setMaxPriorityFeePerGas(transactionData?.maxPriorityFeePerGas);\n        }\n    }, [transactionData?.maxPriorityFeePerGas, visible]);\n\n    useEffect(() => {\n        if (visible) {\n            setMaxFee(\n                (isEIP1559Type(transactionData?.type as string)\n                    ? transactionData?.maxFeePerGas\n                    : transactionData?.gasPrice) as string\n            );\n        }\n    }, [transactionData?.type, transactionData?.maxFeePerGas, transactionData?.gasPrice, visible]);\n\n    useEffect(() => {\n        if (transactionData?.gasLimit || visible) {\n            setGasLimit(transactionData?.gasLimit as any);\n        }\n    }, [transactionData?.gasLimit, visible]);\n\n    useEffect(() => {\n        if (transactionData && gasLimit) {\n            if (isEIP1559Type(transactionData.type)) {\n                setGasFeeDisplay(\n                    ethereumUtils.gasFee({\n                        gasLimit: gasLimit,\n                        baseFee: bnToHex(toWei(gasFeeResult?.baseFee, 'gwei')),\n                        maxFeePerGas: maxFee,\n                        maxPriorityFeePerGas,\n                    })\n                );\n            } else {\n                setGasFeeDisplay(\n                    ethereumUtils.gasFee({\n                        gasLimit: gasLimit,\n                        baseFee: bnToHex(toWei(gasFeeResult?.baseFee, 'gwei')),\n                        gasPrice: maxFee,\n                    })\n                );\n            }\n        } else if (gasFeeDisplayContext) {\n            setGasFeeDisplay(gasFeeDisplayContext);\n        }\n    }, [gasMode, transactionData, gasFeeDisplayContext, maxFee, visible, gasLimit, gasFeeResult, maxPriorityFeePerGas]);\n\n    const estimatedTime = (mode?: GasFeeMode): string => {\n        if (!tokenPrice || !gasFeeResult) {\n            return '';\n        }\n        let time: number;\n        if (mode == GasFeeMode.low) {\n            time = gasFeeResult.low.maxWaitTime;\n        } else if (mode == GasFeeMode.medium) {\n            time = gasFeeResult.medium.maxWaitTime;\n        } else if (mode == GasFeeMode.high) {\n            time = gasFeeResult.high.maxWaitTime;\n        } else {\n            time = gasFeeResult.low.maxWaitTime;\n        }\n        let displayTime: string;\n        if (time / 1000 >= 60) {\n            displayTime = `>${time / 1000 / 60}min`;\n        } else {\n            displayTime = `<${time / 1000}s`;\n        }\n\n        return displayTime;\n    };\n\n    const usdDisplay = (gasFee?: GasFee): string => {\n        if (!transactionData || !tokenPrice || !gasFee) {\n            return '';\n        }\n        if (isEIP1559Type(transactionData.type)) {\n            //Max Fee: 0.00032 ETH(\u22480.01 $)\n\n            const maxFeeFormat = `${t('sign.max_fee')} ${gasFee.maxFee} ${getNativeSymbol(chainInfo)}`;\n            const price = formatDisplayPrice(gasFee.maxFee, tokenPrice);\n            if (price === '') {\n                return maxFeeFormat;\n            }\n            return maxFeeFormat + `(${price})`;\n        } else {\n            return formatDisplayPrice(gasFee.maxFee, tokenPrice);\n        }\n    };\n\n    const formatDisplayPrice = (fee: string, prices: TokenPrice[]): string => {\n        return prices.length > 0 && prices[0].currencies && prices[0].currencies.length > 0\n            ? formatPrice({\n                  amount: fee,\n                  price: prices[0].currencies[0].price,\n                  fiatCoin: modalOptions.fiatCoin || 'USD',\n              })\n            : '';\n    };\n\n    const selectGasMode = (mode: GasFeeMode) => {\n        setErrorTip(false);\n        setErrorTip1(undefined);\n        setErrorTip2(undefined);\n        if (mode !== gasMode) {\n            setGasMode(mode);\n            applyGasMode(mode);\n        }\n    };\n\n    const applyGasMode = (mode: GasFeeMode) => {\n        if (gasFeeResult && mode != GasFeeMode.custom) {\n            const maxFeeValue = bnToHex(toWei(gasFeeResult[mode].maxFeePerGas, 'gwei'));\n            setMaxFee(maxFeeValue);\n            gasForm.setFieldsValue({ 'max-fee': feeDisplay(maxFeeValue) });\n            const maxPriorityFeePerGasValue = bnToHex(toWei(gasFeeResult[mode].maxPriorityFeePerGas, 'gwei'));\n            setMaxPriorityFeePerGas(maxPriorityFeePerGasValue);\n            gasForm.setFieldsValue({ 'max-priority-fee': feeDisplay(maxPriorityFeePerGasValue) });\n            if (latestGasLimit) {\n                setGasLimit(latestGasLimit);\n            }\n        }\n    };\n\n    const setCustomGasLimit = (value: string) => {\n        setErrorTip(false);\n        if (gasMode !== GasFeeMode.custom) {\n            setGasMode(GasFeeMode.custom);\n        }\n        const bn = Number(value);\n        value = isNaN(bn) ? '0x0' : toHexPrefixString(bn);\n        setGasLimit(value);\n        if (Number(value) < Number(latestGasLimit)) {\n            setErrorTip(true);\n        } else {\n            setErrorTip(false);\n        }\n    };\n\n    const setCustomMaxPriorityFee = (value: string) => {\n        setErrorTip1(undefined);\n        const bn = toBigNumber(value);\n        value = bn.isNaN() || value === '' ? '0' : bn.toString();\n        value = bnToHex(toWei(value, 'gwei'));\n        if (gasMode !== GasFeeMode.custom) {\n            setGasMode(GasFeeMode.custom);\n        }\n        setMaxPriorityFeePerGas(value);\n        maxPriorityFeeErrorTip(value);\n    };\n\n    const setCustomMaxFee = (value: string) => {\n        console.log('setCustomMaxFee', value);\n        setErrorTip2(undefined);\n        const bn = toBigNumber(value);\n        value = bn.isNaN() || value === '' ? '0' : bn.toString();\n        value = bnToHex(toWei(value, 'gwei'));\n        if (gasMode !== GasFeeMode.custom) {\n            setGasMode(GasFeeMode.custom);\n        }\n        setMaxFee(value);\n        maxFeeErrorTip(value);\n    };\n\n    const addGasLimit = () => {\n        if (latestGasLimit && Number(gasLimit) < Number(latestGasLimit)) {\n            setCustomGasLimit(Number(latestGasLimit).toString());\n        } else {\n            setCustomGasLimit((Number(gasLimit) + 1).toString());\n        }\n    };\n\n    const minusGasLimit = () => {\n        if (Number(gasLimit) >= Number(latestGasLimit) + 1) {\n            setCustomGasLimit((Number(gasLimit) - 1).toString());\n        }\n    };\n\n    const addMaxPriorityFee = () => {\n        const value = new BigNumber(maxPriorityFeePerGas ?? '0x0').plus(1000000000);\n        const hex = addHexPrefix(value.toString(16));\n        setCustomMaxPriorityFee(fromWei(hex, 'gwei'));\n        gasForm.setFieldsValue({ 'max-priority-fee': feeDisplay(hex) });\n    };\n\n    const minusMaxPriorityFee = () => {\n        let value = new BigNumber(maxPriorityFeePerGas ?? '0x0').minus(1000000000);\n        if (value.isNegative()) {\n            value = new BigNumber(0);\n        }\n        const hex = addHexPrefix(value.toString(16));\n        setCustomMaxPriorityFee(fromWei(hex, 'gwei'));\n        gasForm.setFieldsValue({ 'max-priority-fee': feeDisplay(hex) });\n    };\n\n    const addMaxFee = () => {\n        const value = new BigNumber(maxFee).plus(1000000000);\n        const hex = addHexPrefix(value.toString(16));\n        setCustomMaxFee(fromWei(hex, 'gwei'));\n        gasForm.setFieldsValue({ 'max-fee': feeDisplay(hex) });\n    };\n\n    const minusMaxFee = () => {\n        let value = new BigNumber(maxFee).minus(1000000000);\n        if (value.isNegative()) {\n            value = new BigNumber(0);\n        }\n        const hex = addHexPrefix(value.toString(16));\n        setCustomMaxFee(fromWei(hex, 'gwei'));\n        gasForm.setFieldsValue({ 'max-fee': feeDisplay(hex) });\n    };\n\n    useEffect(() => {\n        if (isEIP1559Type(transactionData?.type) && maxPriorityFeePerGas) {\n            maxPriorityFeeErrorTip(maxPriorityFeePerGas);\n        }\n\n        maxFeeErrorTip(maxFee);\n    }, []);\n\n    const maxPriorityFeeErrorTip = (value: PrefixedHexString) => {\n        if (!gasFeeResult) return;\n\n        if (\n            new BigNumber(value).isGreaterThan(\n                toWeiBigNumber(gasFeeResult.medium.maxPriorityFeePerGas, 'gwei').multipliedBy(2)\n            )\n        ) {\n            setErrorTip1(t('sign.pr_fee_is_high') as string);\n        } else if (new BigNumber(value).isLessThan(toWeiBigNumber(gasFeeResult.low.maxPriorityFeePerGas, 'gwei'))) {\n            setErrorTip1(t('sign.pr_fee_is_low') as string);\n        } else {\n            setErrorTip1(undefined);\n        }\n\n        if (toBigNumber(value).gte(toBigNumber(maxFee))) {\n            setErrorTip2(t('sign.fee_low_priority') as string);\n        } else {\n            if (toBigNumber(maxFee).gt(toWeiBigNumber(gasFeeResult.medium.maxFeePerGas, 'gwei').multipliedBy(2))) {\n                setErrorTip2(t('sign.fee_is_high') as string);\n            } else if (toBigNumber(maxFee).lt(toWeiBigNumber(gasFeeResult.low.maxFeePerGas, 'gwei'))) {\n                setErrorTip2(t('sign.fee_is_low') as string);\n            } else {\n                setErrorTip2(undefined);\n            }\n        }\n    };\n\n    const maxFeeErrorTip = (value: PrefixedHexString) => {\n        if (!gasFeeResult) return;\n\n        if (\n            isEIP1559Type(transactionData?.type) &&\n            maxPriorityFeePerGas &&\n            toBigNumber(value).lte(maxPriorityFeePerGas)\n        ) {\n            setErrorTip2(t('sign.fee_low_priority') as string);\n        } else if (toBigNumber(value).gt(toWeiBigNumber(gasFeeResult.medium.maxFeePerGas, 'gwei').multipliedBy(2))) {\n            setErrorTip2(t('sign.fee_is_high') as string);\n        } else if (toBigNumber(value).lt(toWeiBigNumber(gasFeeResult.low.maxFeePerGas, 'gwei'))) {\n            setErrorTip2(t('sign.fee_is_low') as string);\n        } else {\n            setErrorTip2(undefined);\n        }\n    };\n\n    const checkSaveBtEnable = (\n        minPriorityFee: BigNumber,\n        minFee: BigNumber,\n        maxPriorityFee: BigNumber,\n        maxFee: BigNumber\n    ): boolean => {\n        if ((errorTip && latestGasLimit) || errorTip1 || errorTip2) {\n            return false;\n        } else if (isEIP1559Type(transactionData?.type)) {\n            return maxFee.gte(minFee) && maxPriorityFee.gte(minPriorityFee) && maxFee.gt(maxPriorityFee);\n        } else {\n            return maxFee.gte(minFee);\n        }\n    };\n\n    const saveGas = (values: unknown) => {\n        console.log('saveGas', gasMode, gasLimit, maxPriorityFeePerGas, maxFee);\n        if (gasMode && gasMode !== gasFeeMode) {\n            setGasFeeMode(gasMode);\n        }\n        if (gasMode === GasFeeMode.custom && transactionData) {\n            if (isEIP1559Type(transactionData.type)) {\n                updateTransaction({\n                    maxPriorityFeePerGas,\n                    maxFeePerGas: maxFee,\n                    gasLimit: gasLimit,\n                });\n            } else {\n                updateTransaction({\n                    gasPrice: maxFee,\n                    gasLimit: gasLimit,\n                });\n            }\n        }\n\n        openGasDrawer();\n    };\n\n    const estimateFee = (limit: PrefixedHexString, fee: PrefixedHexString): string => {\n        return fromWeiFormat(addHexPrefix(toBigNumber(limit).multipliedBy(fee).toString(16)), 'ether', 6);\n    };\n\n    const feeDisplay = (weiFee: PrefixedHexString): string => {\n        return fromWeiFormat(weiFee, 'gwei', 9);\n    };\n\n    useEffect(() => {\n        if (gasMode && gasMode !== GasFeeMode.custom) {\n            applyGasMode(gasMode);\n        }\n    }, [gasFeeResult, latestGasLimit]);\n\n    useEffect(() => {\n        if (maxFee && visible) {\n            gasForm.setFieldsValue({ 'max-fee': feeDisplay(maxFee) });\n        }\n    }, [visible, maxFee]);\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <ParticleDrawer\n                title={t('sign.edit_priority') as string}\n                visible={visible && !!gasFeeResult && !!transactionData && !!gasFeeMode && !!gasFeeDisplay}\n                push={false}\n                forceRender={true}\n                placement=\"bottom\"\n                onClose={openGasDrawer}\n                className=\"evm-gas-drawer\"\n                contentWrapperStyle={{ height: 'auto' }}\n                destroyOnClose={true}\n                getContainer={() => {\n                    return authCoreModal.rootBody as HTMLElement;\n                }}\n            >\n                {!!gasFeeResult && !!transactionData && !!gasFeeMode && !!gasFeeDisplay && (\n                    <>\n                        <div className=\"gas-content-box\">\n                            <div className=\"eth-amount\">\n                                {gasFeeDisplay?.fee ?? gasFeeDisplay?.maxFee} {getNativeSymbol(chainInfo)}\n                            </div>\n\n                            <div className=\"eth-amount-about\">{usdDisplay(gasFeeDisplay)}</div>\n\n                            <div\n                                className=\"speed-time\"\n                                style={estimatedTime(gasMode).search('min') != -1 ? { color: '#F55F0D' } : {}}\n                            >\n                                {estimatedTime(gasMode)}\n                            </div>\n                            <div className=\"speed-situation\">\n                                <div className=\"situation-img\">\n                                    <Radio\n                                        className=\"radio-item\"\n                                        checked={gasMode === GasFeeMode.low}\n                                        onClick={() => selectGasMode(GasFeeMode.low)}\n                                    />\n                                    <Radio\n                                        className=\"radio-item\"\n                                        checked={gasMode === GasFeeMode.medium}\n                                        onClick={() => selectGasMode(GasFeeMode.medium)}\n                                    />\n                                    <Radio\n                                        className=\"radio-item\"\n                                        checked={gasMode === GasFeeMode.high}\n                                        onClick={() => selectGasMode(GasFeeMode.high)}\n                                    />\n                                </div>\n                                <div className=\"situation-line\" />\n                                <div className=\"situation-text\">\n                                    <span>{t('sign.gas_low')}</span>\n                                    <span>{t('sign.gas_medium')}</span>\n                                    <span>{t('sign.gas_high')}</span>\n                                </div>\n                            </div>\n                            <div className=\"more-details\" onClick={() => setMoreDetails(!moreDetails)}>\n                                {t('sign.advanced_options')}\n                                {moreDetails ? (\n                                    <SVGIcon className=\"arrow-icon\" name=\"arrow_icon\" data-fold=\"true\" />\n                                ) : (\n                                    <SVGIcon className=\"arrow-icon\" name=\"arrow_icon\" data-fold=\"false\" />\n                                )}\n                            </div>\n\n                            <div className=\"advanced-options\">\n                                <Form\n                                    className=\"options-form\"\n                                    onFinish={saveGas}\n                                    form={gasForm}\n                                    layout=\"vertical\"\n                                    ref={optionsForm}\n                                >\n                                    {moreDetails && (\n                                        <div className=\"form-son\">\n                                            <div>\n                                                <div className=\"img-box-minus\" onClick={minusGasLimit}>\n                                                    <MinusCircleFilled className=\"minus-icon\" />\n                                                </div>\n                                                <div className=\"img-box-add\" onClick={addGasLimit}>\n                                                    <PlusCircleFilled className=\"add-icon\" />\n                                                </div>\n                                                {errorTip && latestGasLimit && (\n                                                    <div className=\"error-tip mt-e0\">\n                                                        {t('sign.gas_limit_must').format(\n                                                            toBigNumber(latestGasLimit).toString()\n                                                        )}\n                                                    </div>\n                                                )}\n                                                <Form.Item\n                                                    label={t('sign.gas_limit')}\n                                                    getValueFromEvent={(event) => {\n                                                        return event.target.value\n                                                            .replace(/[^\\d.]/g, '')\n                                                            .replace(/(\\.)(\\d*)(\\1*)/g, '$1$2');\n                                                    }}\n                                                >\n                                                    <Input\n                                                        value={toBigNumber(gasLimit).toString()}\n                                                        maxLength={9}\n                                                        onChange={(e) => setCustomGasLimit(e.target.value)}\n                                                    />\n                                                </Form.Item>\n                                            </div>\n\n                                            {isEIP1559Type(transactionData?.type) && (\n                                                <div>\n                                                    <div className=\"estimate mt1\">\n                                                        {t('sign.estimate')}\n                                                        <span className=\"estimate-val\">\n                                                            {' '}\n                                                            {trimDecimals(\n                                                                gasFeeResult?.medium?.maxPriorityFeePerGas || 0,\n                                                                9\n                                                            )}{' '}\n                                                            GWEI\n                                                        </span>\n                                                    </div>\n                                                    <div className=\"about-val mt-a1\">\n                                                        {!!gasLimit && estimateFee(gasLimit, maxPriorityFeePerGas!)}{' '}\n                                                        {getNativeSymbol(chainInfo)}\n                                                    </div>\n                                                    <div className=\"img-box-minus\" onClick={minusMaxPriorityFee}>\n                                                        <MinusCircleFilled className=\"minus-icon\" />\n                                                    </div>\n                                                    <div className=\"img-box-add\" onClick={addMaxPriorityFee}>\n                                                        <PlusCircleFilled className=\"add-icon\" />\n                                                    </div>\n                                                    {errorTip1 && <div className=\"error-tip mt-e0\">{errorTip1}</div>}\n                                                    <Form.Item\n                                                        label={t('sign.max_priority_fee')}\n                                                        name=\"max-priority-fee\"\n                                                        getValueFromEvent={(event) => {\n                                                            return event.target.value\n                                                                .replace(/[^\\d.]/g, '')\n                                                                .replace(/(\\.)(\\d*)(\\1*)/g, '$1$2');\n                                                        }}\n                                                    >\n                                                        <Input\n                                                            maxLength={17}\n                                                            className=\"special-input\"\n                                                            defaultValue={feeDisplay(maxPriorityFeePerGas!)}\n                                                            onInput={(e: any) => {\n                                                                const value = e.target.value;\n                                                                e.target.value = value\n                                                                    .replace(/[^\\d.]/g, '')\n                                                                    .replace(/\\D*(\\d*)(\\.?)(\\d{0,9})\\d*/, '$1$2$3');\n                                                            }}\n                                                            onChange={(e) => setCustomMaxPriorityFee(e.target.value)}\n                                                        />\n                                                    </Form.Item>\n                                                </div>\n                                            )}\n\n                                            <div>\n                                                <div className=\"estimate mt1\">\n                                                    {t('sign.estimate')}\n                                                    <span className=\"estimate-val\">\n                                                        {' '}\n                                                        {trimDecimals(gasFeeResult?.medium?.maxFeePerGas || 0, 9)} GWEI\n                                                    </span>\n                                                </div>\n                                                <div className=\"about-val mt-a1\">\n                                                    {!!gasLimit && estimateFee(gasLimit, maxFee)}{' '}\n                                                    {getNativeSymbol(chainInfo)}\n                                                </div>\n                                                <div className=\"img-box-minus\" onClick={minusMaxFee}>\n                                                    <MinusCircleFilled className=\"minus-icon\" />\n                                                </div>\n                                                <div className=\"img-box-add\" onClick={addMaxFee}>\n                                                    <PlusCircleFilled className=\"add-icon\" />\n                                                </div>\n                                                {errorTip2 && <div className=\"error-tip mt-e0\">{errorTip2}</div>}\n                                                <Form.Item\n                                                    label={t('sign.max_fee')}\n                                                    name=\"max-fee\"\n                                                    getValueFromEvent={(event) => {\n                                                        return event.target.value\n                                                            .replace(/[^\\d.]/g, '')\n                                                            .replace(/(\\.)(\\d*)(\\1*)/g, '$1$2');\n                                                    }}\n                                                >\n                                                    <Input\n                                                        maxLength={17}\n                                                        className=\"special-input\"\n                                                        defaultValue={feeDisplay(maxFee)}\n                                                        onInput={(e: any) => {\n                                                            const value = e.target.value;\n                                                            e.target.value = value\n                                                                .replace(/[^\\d.]/g, '')\n                                                                .replace(/\\D*(\\d*)(\\.?)(\\d{0,9})\\d*/, '$1$2$3');\n                                                        }}\n                                                        onChange={(e) => setCustomMaxFee(e.target.value)}\n                                                    />\n                                                </Form.Item>\n                                            </div>\n                                        </div>\n                                    )}\n                                </Form>\n                            </div>\n                        </div>\n                        <div className=\"item-save-btn\">\n                            <Button\n                                className=\"save-btn\"\n                                type=\"primary\"\n                                disabled={\n                                    !checkSaveBtEnable(\n                                        toWeiBigNumber(gasFeeResult?.low.maxPriorityFeePerGas, 'gwei'),\n                                        toWeiBigNumber(gasFeeResult?.low.maxFeePerGas, 'gwei'),\n                                        toBigNumber(maxPriorityFeePerGas),\n                                        toBigNumber(maxFee)\n                                    ) || toBigNumber(gasLimit).lt(toBigNumber(latestGasLimit))\n                                }\n                                onClick={() => optionsForm.current.submit()}\n                            >\n                                {t('common.save')}\n                            </Button>\n                        </div>\n                        <PowerFooter className=\"footer-box-v2\" />\n                    </>\n                )}\n            </ParticleDrawer>\n        </>\n    );\n}\n\nexport default EvmGas;\n"],
  "mappings": "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",
  "names": ["syncUserInfo", "React", "useEffect", "addHexPrefix", "EvmEnhancedMethod", "EvmRpcMethod", "TransactionSmartType", "Button", "Image", "Modal", "BigNumber", "React", "useEffect", "useMemo", "useRef", "useState", "useTranslation", "React", "EvmRpcMethod", "EvmRpcMethod", "gasFeeDisplay", "totalAmountDisplay", "React", "React", "useEffect", "useState", "useTranslation", "React", "useTranslation", "useTranslation", "React", "riskTypography_default", "useTranslation", "useState", "useEffect", "React", "riskTypography_default", "riskReminder_default", "EvmEnhancedMethod", "Modal", "BigNumber", "React", "useEffect", "useMemo", "useState", "useTranslation", "React", "React", "EvmRpcMethod", "GasFeeMode", "React", "useEffect", "useState", "useTranslation", "useTranslation", "useState", "useEffect", "GasFeeMode", "React", "EvmRpcMethod", "React", "useTranslation", "useTranslation", "React", "trimDecimals", "useTranslation", "useState", "useMemo", "_a", "_b", "_c", "_d", "tokenIcon", "tokenSymbol", "tokenDecimals", "useEffect", "EvmEnhancedMethod", "tokenPrice", "_e", "_f", "_g", "_h", "_i", "_j", "amountChange", "BigNumber", "_k", "_l", "_m", "_n", "React", "Modal", "GasFeeMode", "Button", "Form", "Input", "BigNumber", "React", "useEffect", "useState", "useTranslation", "useState", "useTranslation", "Form", "useEffect", "GasFeeMode", "BigNumber", "maxFee", "React", "Input", "Button", "evm_gas_default", "useTranslation", "useState", "useRef", "_a", "useMemo", "EvmRpcMethod", "useEffect", "renderPageType", "TransactionSmartType", "EvmEnhancedMethod", "addHexPrefix", "Modal", "message", "_b", "React", "signMessage", "address", "BigNumber", "Image", "Button", "riskReminder_default", "riskTypography_default", "evm_gas_default", "useEffect", "syncUserInfo", "React"]
}
