{
  "version": 3,
  "sources": ["../src/components/react-auth-code-input/index.tsx"],
  "sourcesContent": ["import React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { isAutoFocusSupported } from '../../utils';\n\nconst allowedCharactersValues = ['alpha', 'numeric', 'alphanumeric'] as const;\n\nexport type AuthCodeProps = {\n    allowedCharacters?: (typeof allowedCharactersValues)[number];\n    ariaLabel?: string;\n    autoFocus?: boolean;\n    containerClassName?: string;\n    disabled?: boolean;\n    inputClassName?: string;\n    isPassword?: boolean;\n    length?: number;\n    placeholder?: string;\n    onChange: (res: string) => void;\n    code?: string;\n};\n\ntype InputMode = 'text' | 'numeric';\n\ntype InputType = 'text' | 'tel' | 'password';\n\ntype InputProps = {\n    type: InputType;\n    inputMode: InputMode;\n    pattern: string;\n    min?: string;\n    max?: string;\n};\n\nexport type AuthCodeRef = {\n    focus: () => void;\n    clear: () => void;\n};\n\nconst propsMap: { [key: string]: InputProps } = {\n    alpha: {\n        type: 'text',\n        inputMode: 'text',\n        pattern: '[a-zA-Z]{1}',\n    },\n\n    alphanumeric: {\n        type: 'text',\n        inputMode: 'text',\n        pattern: '[a-zA-Z0-9]{1}',\n    },\n\n    numeric: {\n        type: 'tel',\n        inputMode: 'numeric',\n        pattern: '[0-9]{1}',\n        min: '0',\n        max: '9',\n    },\n};\n\nconst AuthCode = forwardRef<AuthCodeRef, AuthCodeProps>(\n    (\n        {\n            allowedCharacters = 'alphanumeric',\n            ariaLabel,\n            autoFocus = true,\n            containerClassName,\n            disabled,\n            inputClassName,\n            isPassword = false,\n            length = 6,\n            placeholder,\n            onChange,\n            code = '',\n        },\n        ref\n    ) => {\n        if (isNaN(length) || length < 1) {\n            throw new Error('Length should be a number and greater than 0');\n        }\n\n        if (!allowedCharactersValues.some((value) => value === allowedCharacters)) {\n            throw new Error('Invalid value for allowedCharacters. Use alpha, numeric, or alphanumeric');\n        }\n\n        const inputsRef = useRef<Array<HTMLInputElement>>([]);\n        const inputProps = propsMap[allowedCharacters];\n\n        useImperativeHandle(ref, () => ({\n            focus: () => {\n                if (inputsRef.current) {\n                    inputsRef.current[0].focus();\n                }\n            },\n            clear: () => {\n                if (inputsRef.current) {\n                    for (let i = 0; i < inputsRef.current.length; i++) {\n                        inputsRef.current[i].value = '';\n                    }\n                    inputsRef.current[0].focus();\n                }\n                sendResult();\n            },\n        }));\n\n        useEffect(() => {\n            if (autoFocus && isAutoFocusSupported()) {\n                inputsRef.current[0].focus();\n            }\n        }, []);\n\n        useEffect(() => {\n            if (code) {\n                for (let i = 0; i < inputsRef.current.length; i++) {\n                    inputsRef.current[i].value = '';\n                }\n                for (let i = 0; i < code.length; i++) {\n                    inputsRef.current[i].value = code[i];\n                }\n                sendResult();\n            }\n        }, [code]);\n\n        let oldValue = inputsRef.current.map((input) => input.value).join('') || '';\n\n        const sendResult = () => {\n            const res = inputsRef.current.map((input) => input.value).join('');\n            if (oldValue !== res) {\n                console.log('sendResult', res);\n                onChange && onChange(res);\n                oldValue = res;\n            }\n        };\n\n        const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            const {\n                target: { value, nextElementSibling },\n            } = e;\n\n            if (value.length == 1) {\n                if (value.match(inputProps.pattern)) {\n                    if (nextElementSibling !== null) {\n                        (nextElementSibling as HTMLInputElement).focus();\n                    }\n                } else {\n                    e.target.value = '';\n                }\n            } else if (value.length > 1) {\n                const pastedValue = value;\n                let currentInput: number = Number(e.target.getAttribute('data-index')) || 0;\n                for (let i = 0; i < pastedValue.length; i++) {\n                    const pastedCharacter = pastedValue.charAt(i);\n                    if (pastedCharacter.match(inputProps.pattern) && inputsRef.current?.[currentInput]) {\n                        inputsRef.current[currentInput].value = pastedCharacter;\n                        if (inputsRef.current[currentInput].nextElementSibling !== null) {\n                            (inputsRef.current[currentInput].nextElementSibling as HTMLInputElement).focus();\n                            currentInput++;\n                        }\n                    }\n                }\n            }\n            setTimeout(() => {\n                sendResult();\n            });\n        };\n\n        const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n            const { key } = e;\n            const target = e.target as HTMLInputElement;\n            if (key === 'Backspace') {\n                if (target.value === '') {\n                    if (target.previousElementSibling !== null) {\n                        const t = target.previousElementSibling as HTMLInputElement;\n                        t.value = '';\n                        t.focus();\n                        e.preventDefault();\n                    }\n                } else {\n                    target.value = '';\n                }\n                setTimeout(() => {\n                    sendResult();\n                });\n            }\n        };\n\n        const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n            e.target.select();\n        };\n\n        const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n            let pastedValue = e.clipboardData.getData('Text') ?? '';\n            pastedValue = pastedValue.replace(/\\s/g, '').substring(0, 6);\n\n            let currentInput = 0;\n\n            for (let i = 0; i < pastedValue.length; i++) {\n                const pastedCharacter = pastedValue.charAt(i);\n                const currentValue = inputsRef.current[currentInput].value;\n                if (pastedCharacter.match(inputProps.pattern)) {\n                    if (!currentValue) {\n                        inputsRef.current[currentInput].value = pastedCharacter;\n                        if (inputsRef.current[currentInput].nextElementSibling !== null) {\n                            (inputsRef.current[currentInput].nextElementSibling as HTMLInputElement).focus();\n                            currentInput++;\n                        }\n                    }\n                }\n            }\n            sendResult();\n\n            e.preventDefault();\n        };\n\n        return (\n            <div className={containerClassName}>\n                {new Array(6).fill(0).map((_, i) => {\n                    return (\n                        <input\n                            key={i}\n                            data-index={i}\n                            onChange={handleOnChange}\n                            onKeyDown={handleOnKeyDown}\n                            onFocus={handleOnFocus}\n                            onPaste={handleOnPaste}\n                            {...inputProps}\n                            type={isPassword ? 'password' : inputProps.type}\n                            ref={(el: HTMLInputElement) => {\n                                inputsRef.current[i] = el;\n                            }}\n                            // maxLength={1}\n                            className={inputClassName}\n                            autoComplete={i === 0 ? 'one-time-code' : 'off'}\n                            aria-label={ariaLabel ? `${ariaLabel}. Character ${i + 1}.` : `Character ${i + 1}.`}\n                            disabled={disabled}\n                            placeholder={placeholder}\n                        />\n                    );\n                })}\n                <div\n                    className=\"input-code-mask\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        for (let i = inputsRef.current.length - 1; i >= 0; i--) {\n                            if (\n                                (i > 0 && !inputsRef.current[i].value && inputsRef.current[i - 1].value) ||\n                                (i === 0 && !inputsRef.current[i].value) ||\n                                (i == inputsRef.current.length - 1 && inputsRef.current[i].value)\n                            ) {\n                                inputsRef.current[i].focus();\n                                inputsRef.current[i].setSelectionRange(\n                                    inputsRef.current[i].value.length,\n                                    inputsRef.current[i].value.length\n                                );\n                                break;\n                            }\n                        }\n                    }}\n                />\n            </div>\n        );\n    }\n);\n\nexport default AuthCode;\n"],
  "mappings": "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",
  "names": []
}
