{
  "version": 3,
  "sources": ["../src/pages/login/index.tsx", "../src/pages/login/components/captcha-input.tsx", "../src/pages/login/components/email-login.tsx", "../src/pages/login/components/phone-login.tsx", "../src/pages/login/components/social-login.tsx"],
  "sourcesContent": ["import { LoadingOutlined } from '@ant-design/icons';\nimport {\n    AuthType,\n    getConnectCaptcha,\n    isNullish,\n    requireNotNullish,\n    type CaptchaRequest,\n    type ConnectParam,\n    type PhoneCaptchaRequest,\n    type SocialAuthType,\n} from '@particle-network/auth-core';\nimport { Image } from 'antd';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport logoImg from '../../common/images/logo.png';\nimport PowerFooter from '../../components/power-footer';\nimport { useParticleAuth } from '../../context';\nimport useLogin from '../../context/hooks/useLogin';\nimport { type ConnectOptions } from '../../types/connectOptions';\nimport { EmailRegExp, isValidE164PhoneNumber } from '../../utils';\nimport CaptchaInput from './components/captcha-input';\nimport EmailLogin from './components/email-login';\nimport loginStyles from './components/login.less';\nimport PhoneLogin from './components/phone-login';\nimport SocialLogin from './components/social-login';\nimport styles from './index.less';\n\nfunction Login(props?: ConnectOptions) {\n    // @ts-ignore\n    const { email, phone, code, jwt, socialType, nonce, prompt, authorization, chain } = props || {};\n\n    const { modalOptions, setLoginAuthorization } = useParticleAuth();\n    const { loginHandler, socialAuthLogin } = useLogin();\n\n    const getDefaultLoginType = () => {\n        const indexPhone = modalOptions.authTypes?.indexOf(AuthType.phone) ?? -1;\n        const indexEmail = modalOptions.authTypes?.indexOf(AuthType.email) ?? -1;\n        if (socialType) {\n            return socialType;\n        } else if (\n            (!isNullish(phone) && (indexPhone >= 0 || !modalOptions.authTypes?.length)) ||\n            (!email &&\n                ((indexPhone >= 0 && indexEmail < 0) ||\n                    (indexPhone >= 0 && indexEmail >= 0 && indexPhone < indexEmail)))\n        ) {\n            return AuthType.phone;\n        } else {\n            return AuthType.email;\n        }\n    };\n\n    const [loginType, setLoginType] = useState<AuthType>(getDefaultLoginType()); // email or phone\n\n    const { t } = useTranslation();\n\n    const [account, setAccount] = useState<string | undefined>('');\n\n    const [showInputCaptcha, setShowInputCaptcha] = useState(false);\n\n    const [loginWithAccount, setLoginWithAccount] = useState(false);\n\n    const [supportAuthTypes, setSupportAuthTypes] = useState<AuthType[]>(modalOptions.authTypes || []);\n\n    const displayInputCaptcha = (visible: boolean) => {\n        setShowInputCaptcha(visible);\n    };\n\n    useEffect(() => {\n        document.documentElement.setAttribute('data-login-type', loginType || '');\n    }, [loginType]);\n\n    useEffect(() => {\n        if (!loginWithAccount) {\n            const allTypes = Object.values(AuthType).filter((authType) => authType !== AuthType.jwt);\n            if (!modalOptions.authTypes) {\n                setSupportAuthTypes(allTypes);\n            } else {\n                const types = modalOptions.authTypes.filter(\n                    (authType) => authType !== AuthType.jwt && allTypes.includes(authType)\n                );\n                if (socialType && !types.includes(socialType)) {\n                    types.push(socialType);\n                }\n                if (!types.includes(AuthType.email) && !types.includes(AuthType.phone) && types.length > 0) {\n                    types.unshift(AuthType.email);\n                }\n                if (types.length === 1 && (types[0] === AuthType.email || types[0] === AuthType.phone)) {\n                    //clear all\n                    types.length = 0;\n                }\n                setSupportAuthTypes(types);\n            }\n        } else {\n            setSupportAuthTypes([]);\n        }\n    }, [loginWithAccount, modalOptions.authTypes]);\n\n    useEffect(() => {\n        if (authorization) {\n            setLoginAuthorization({ authorization, chain: requireNotNullish(chain) });\n        } else {\n            setLoginAuthorization(undefined);\n        }\n\n        loginDirectly();\n    }, []);\n\n    //\u53D1\u9001\u9A8C\u8BC1\u7801\n    const sendCaptcha = async (data: CaptchaRequest): Promise<boolean> => {\n        setAccount('email' in data && data.email ? data.email : (data as PhoneCaptchaRequest).phone);\n        const result = await getConnectCaptcha(data).then((result) => {\n            console.log(`request captcha success: ${result}`);\n            return result;\n        });\n        return result;\n    };\n\n    const isValidCode = () => {\n        return code && code.match(/^\\d{6}$/);\n    };\n\n    // login directly\n    const loginDirectly = () => {\n        if (email && loginType === AuthType.email) {\n            if (EmailRegExp.test(email)) {\n                if (isValidCode()) {\n                    loginImpl({ email, code, chain });\n                } else {\n                    setLoginWithAccount(true);\n                    setAccount(email);\n                }\n            }\n        } else if (phone && loginType === AuthType.phone) {\n            const e164Phone = isValidE164PhoneNumber(phone);\n            if (e164Phone) {\n                if (isValidCode()) {\n                    loginImpl({ phone: e164Phone, code, chain });\n                } else {\n                    setLoginWithAccount(true);\n                    setAccount(e164Phone);\n                }\n            }\n        } else if (jwt) {\n            setLoginType(AuthType.jwt);\n            setLoginWithAccount(true);\n            loginImpl({ jwt, chain });\n        } else if (socialType) {\n            // social login\n            if (code && nonce) {\n                loginImpl({ socialType, code, nonce, chain });\n            } else {\n                // redirect to get code.\n                thirdpartyAuthLogin(socialType);\n            }\n        }\n    };\n\n    const loginImpl = useCallback(\n        (data: ConnectParam) => {\n            loginHandler(data);\n        },\n        [loginHandler]\n    );\n\n    const thirdpartyAuthLogin = (authType: AuthType) => {\n        setLoginType(authType);\n        socialAuthLogin({\n            socialType: authType as SocialAuthType,\n            prompt,\n            authorization,\n            chain,\n        });\n    };\n\n    const loginContent = () => {\n        if (showInputCaptcha) {\n            return (\n                <CaptchaInput\n                    sendCaptcha={sendCaptcha}\n                    setShowInputCaptcha={displayInputCaptcha}\n                    account={account}\n                    loginWithAccount={loginWithAccount}\n                    chain={chain}\n                />\n            );\n        } else if (loginType === AuthType.email && !isValidCode()) {\n            return (\n                <EmailLogin\n                    sendCaptcha={sendCaptcha}\n                    setShowInputCaptcha={displayInputCaptcha}\n                    setLoginType={changeLoginType}\n                    account={email || account}\n                    supportAuthTypes={supportAuthTypes}\n                    loginWithAccount={!!email || loginWithAccount}\n                />\n            );\n        } else if (loginType === AuthType.phone && !isValidCode()) {\n            return (\n                <PhoneLogin\n                    sendCaptcha={sendCaptcha}\n                    setShowInputCaptcha={displayInputCaptcha}\n                    setLoginType={changeLoginType}\n                    account={phone || account}\n                    supportAuthTypes={supportAuthTypes}\n                    loginWithAccount={!!phone || loginWithAccount}\n                />\n            );\n        }\n    };\n\n    const changeLoginType = (type: AuthType) => {\n        setLoginType(type);\n    };\n\n    const authTypeDisplayed = (type: AuthType): string => {\n        if (type === AuthType.jwt) {\n            return 'JWT';\n        } else {\n            return type.titleCase();\n        }\n    };\n\n    const loggingHint = (loginType: AuthType): string => {\n        if (loginType === AuthType.jwt) {\n            return t('login.create_wallet');\n        } else {\n            return t('login.social_login').format(authTypeDisplayed(loginType));\n        }\n    };\n\n    const projectLogo: string = useMemo(() => {\n        let img = modalOptions.customStyle?.logo;\n        if (!img) {\n            img = logoImg;\n        }\n        return (img || '') as string;\n    }, [modalOptions.customStyle?.logo]);\n\n    return (\n        <div className=\"login-container-box\">\n            <style>{loginStyles as unknown as string}</style>\n            <style>{styles as unknown as string}</style>\n            <div className=\"wrap\">\n                <div className=\"login-logo\">\n                    <Image\n                        className=\"product-logo\"\n                        preview={false}\n                        height={64}\n                        src={projectLogo}\n                        key={projectLogo}\n                        placeholder={\n                            <div className=\"placeholder-wrap\">\n                                <LoadingOutlined style={{ fontSize: 24 }} spin />\n                            </div>\n                        }\n                        fallback={logoImg}\n                        onError={(e) => {\n                            e.currentTarget.src = logoImg;\n                        }}\n                    />\n                </div>\n                <div className=\"login-header0\">\n                    {modalOptions.customStyle?.projectName ?? t('common.particle_auth')}\n                </div>\n\n                {showInputCaptcha ? (\n                    <div className=\"login-des\">{account}</div>\n                ) : (\n                    <div className=\"login-des\">\n                        {(loginType === AuthType.email || loginType === AuthType.phone) && !isValidCode() ? (\n                            modalOptions.customStyle?.subtitle ?? t('login.to_continue').format('App')\n                        ) : (\n                            <div className=\"third-party-des\">{loggingHint(loginType)}</div>\n                        )}\n                    </div>\n                )}\n\n                {loginContent()}\n\n                {!showInputCaptcha &&\n                    !loginWithAccount &&\n                    (loginType === AuthType.email || loginType === AuthType.phone) &&\n                    !isValidCode() && (\n                        <SocialLogin\n                            supportAuthTypes={supportAuthTypes}\n                            preferredAuthType={loginType}\n                            onPreferredAuthTypeChange={setLoginType}\n                            thirdpartyAuthLogin={thirdpartyAuthLogin}\n                        />\n                    )}\n            </div>\n            <PowerFooter className=\"footer-box-v2\" />\n        </div>\n    );\n}\n\nexport default Login;\n", "import { ApiError, getCloudflareTurnstileResponse, isApiError, type CaptchaRequest } from '@particle-network/auth-core';\nimport { useInterval } from 'ahooks';\nimport { Button } from 'antd';\nimport throttle from 'lodash/throttle.js';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport AuthCode from '../../../components/react-auth-code-input';\nimport { useParticleAuth } from '../../../context';\nimport { useCustomize } from '../../../context/hooks/useCustomize';\nimport useLogin from '../../../context/hooks/useLogin';\nimport useMessage from '../../../context/hooks/useMessage';\nimport styles from './captcha-input.less';\n\nfunction CaptchaInput(props: any) {\n    const { sendCaptcha, setShowInputCaptcha, account, loginWithAccount, chain } = props;\n\n    const [loading, setLoading] = useState(false);\n\n    const { themeType, language } = useCustomize();\n    const [codeVal, setCodeVal] = useState<string>('');\n    const { loginHandler } = useLogin();\n    const [noInput, setNoInput] = useState(false);\n    const [wrongInput, setWrongInput] = useState(false);\n    const [invalidInput, setInvalidInput] = useState(false);\n    const [resendTip, setResendTip] = useState(false);\n    const [confirmBtn, setConfirmBtn] = useState(false);\n    const { authCoreModal } = useParticleAuth();\n    const { t } = useTranslation();\n    const message = useMessage();\n    const codeInput = useRef<any>(null);\n    const codePattern = /^\\d{6}$/;\n    const [interval, setInterval] = useState<number | undefined>(1000);\n\n    const [countdown, setCountdown] = useState(60);\n\n    useInterval(() => {\n        if (countdown > 0) {\n            const result = countdown - 1;\n            setCountdown(result);\n            if (result === 0) {\n                setInterval(undefined);\n            }\n        }\n    }, interval);\n\n    const startCountdown = () => {\n        setCountdown(60);\n        setInterval(1000);\n    };\n\n    const getCaptcha = () => {\n        if (account.includes('@')) {\n            sendCaptchaImpl({ email: account });\n        } else {\n            getCloudflareTurnstileResponse({\n                theme: themeType,\n                language,\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n            })\n                .then((token) => {\n                    sendCaptchaImpl({\n                        phone: account,\n                        // eslint-disable-next-line camelcase\n                        cf_turnstile_response: token,\n                    });\n                })\n                .catch(() => {\n                    message.error(t('error.server_20112'));\n                });\n        }\n    };\n\n    const sendCaptchaImpl = (param: CaptchaRequest) => {\n        sendCaptcha(param)\n            .then(() => {\n                console.log('send captcha success');\n                startCountdown();\n                setConfirmBtn(false);\n                setResendTip(false);\n            })\n            .catch(() => {\n                setCountdown(0);\n                setInterval(undefined);\n            });\n    };\n\n    const codeChange = (value: any) => {\n        setWrongInput(false);\n        // const code = value.join(\"\");\n        const code = value;\n        const patt = /^[0-9]+$/g;\n        if (code.length === 0) {\n            setWrongInput(false);\n            setNoInput(true);\n        } else {\n            if (!patt.test(code)) {\n                setNoInput(false);\n                setWrongInput(true);\n            } else {\n                setNoInput(false);\n                setWrongInput(false);\n            }\n        }\n    };\n\n    const login = (code?: string) => {\n        setNoInput(false);\n        setWrongInput(false);\n        setInvalidInput(false);\n        code = code || codeVal;\n        console.log(`code --> ${code}`);\n        if (noInput || wrongInput) {\n            return;\n        }\n        if (codePattern.test(code)) {\n            throttleLoginImpl(code);\n        } else {\n            if ((code.length > 0 && code.length < 6) || !codePattern.test(code)) {\n                setWrongInput(true);\n                setNoInput(false);\n            }\n            if (code.length === 0) {\n                setWrongInput(false);\n                setNoInput(true);\n            }\n        }\n    };\n\n    const loginImpl = async (code: string) => {\n        if (resendTip) {\n            return;\n        }\n        setLoading(true);\n        let data;\n        if (account.includes('@')) {\n            data = {\n                code: code,\n                email: account,\n                chain,\n            };\n        } else {\n            data = {\n                code: code,\n                phone: account,\n                chain,\n            };\n        }\n        try {\n            await loginHandler(data, false);\n        } catch (error) {\n            handleLoginError(error);\n        }\n    };\n\n    const handleLoginError = (error: any) => {\n        console.log('login error', error);\n        setLoading(false);\n        if (isApiError(error)) {\n            const errorCode = error.error_code;\n            if (errorCode === ApiError.InvalidCode) {\n                setInvalidInput(true);\n            } else if (errorCode === ApiError.ResendCode) {\n                setResendTip(true);\n                setConfirmBtn(true);\n            }\n        }\n    };\n\n    const onCodeInputChange = (codeArray: string) => {\n        codeChange(codeArray);\n        setCodeVal(codeArray);\n        setNoInput(false);\n        setWrongInput(false);\n        setInvalidInput(false);\n        setResendTip(false);\n        if (codePattern.test(codeArray)) {\n            throttleLoginImpl(codeArray);\n        }\n    };\n\n    const throttleLoginImpl = useCallback(\n        throttle(\n            (code) => {\n                loginImpl(code);\n            },\n            1000,\n            {\n                leading: true,\n                trailing: false,\n            }\n        ),\n        []\n    );\n\n    const handleCodeInputFocus = () => {\n        const elements = document.getElementsByClassName('input-code-item');\n        //@ts-ignore\n        elements[Math.min(codeVal.length, 5)]?.focus();\n    };\n\n    const verifyCodeErrorMessage = useMemo(() => {\n        const error = [\n            noInput ? t('login.enter_captcha') : '',\n            wrongInput ? t('login.captcha_input_error') : '',\n            invalidInput ? t('login.invalid_code') : '',\n            resendTip ? t('login.please_send_again') : '',\n        ]\n            .map((val) => val.trim())\n            .filter((val) => !!val)\n            .join(',');\n\n        return error.includes(',') ? error + '.' : error;\n    }, [noInput, wrongInput, invalidInput, resendTip]);\n\n    useEffect(() => {\n        const elements = document.getElementsByClassName('react-input-code');\n        const contextmenuEvent = (e: any) => e.preventDefault();\n        elements[0]?.addEventListener('contextmenu', contextmenuEvent);\n        return () => {\n            elements[0]?.removeEventListener('contextmenu', contextmenuEvent);\n        };\n    }, []);\n\n    return (\n        <div className=\"captcha-box\">\n            <style>{styles as unknown as string}</style>\n            <div className=\"captcha-form\">\n                <div className=\"input-code-content\">\n                    <div onClick={handleCodeInputFocus}>\n                        <AuthCode\n                            containerClassName=\"react-input-code\"\n                            inputClassName=\"input-code-item\"\n                            allowedCharacters=\"numeric\"\n                            length={6}\n                            ref={codeInput}\n                            placeholder={' '}\n                            onChange={onCodeInputChange}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className=\"error-tip\">{verifyCodeErrorMessage}</div>\n\n            <div className=\"btn-box\">\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    className=\"primary-antd-btn submit-btn\"\n                    onClick={() => login()}\n                    disabled={confirmBtn}\n                    loading={loading}\n                >\n                    {t('common.confirm')}\n                </Button>\n\n                <Button className=\"get-btn\" disabled={countdown > 0} type=\"link\" onClick={getCaptcha}>\n                    {t('login.send_again')} {countdown > 0 ? `(${countdown}s)` : ''}\n                </Button>\n\n                {!loginWithAccount && (\n                    <div\n                        className=\"back-box\"\n                        onClick={() => {\n                            setShowInputCaptcha(false);\n                        }}\n                    >\n                        <SVGIcon className=\"arrow1-icon\" name=\"arrow1_icon\" />\n                        <span>{t('login.back')}</span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default CaptchaInput;\n", "import { Button, Form, Input } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EmailRegExp } from '../../../utils';\nimport styles from './login.less';\n\nfunction EmailLogin(props: any) {\n    const { t } = useTranslation();\n\n    const { sendCaptcha, setShowInputCaptcha, account, supportAuthTypes, loginWithAccount } = props;\n\n    const [form] = Form.useForm();\n    const [errorTip, setErrorTip] = useState(false);\n    const [noInputTip, setNoInputTip] = useState(false);\n\n    const [loading, setLoading] = useState(false);\n    const emailBoxRef = useRef<any>(null);\n    const emailInput = useRef<any>(null);\n\n    useEffect(() => {\n        if (loginWithAccount && account && sendCaptcha) {\n            form.setFieldsValue({\n                email: account,\n            });\n            getCaptcha(account);\n        }\n    }, []);\n\n    const getCaptcha = (email: string) => {\n        emailInput.current.focus();\n        if (!email) {\n            setNoInputTip(true);\n            setErrorTip(false);\n        } else if (!EmailRegExp.test(email)) {\n            setErrorTip(true);\n        } else {\n            sendCaptchaImpl(email);\n        }\n    };\n\n    const sendCaptchaImpl = (email: string) => {\n        setLoading(true);\n        sendCaptcha({\n            email: email,\n        })\n            .then((result: boolean) => {\n                setShowInputCaptcha(result);\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <div className=\"login-style\">\n                <Form\n                    name=\"login-form\"\n                    onFinish={(values) => getCaptcha(values.email.trim())}\n                    className=\"form-box\"\n                    requiredMark={false}\n                    form={form}\n                    labelCol={{\n                        style: { textAlign: 'left' },\n                    }}\n                >\n                    <div className=\"email-box\" ref={emailBoxRef}>\n                        <Form.Item\n                            name=\"email\"\n                            label=\"\"\n                            className=\"form-item\"\n                            initialValue={account?.includes('@') ? account : ''}\n                        >\n                            <Input\n                                className=\"email-input\"\n                                placeholder={t('login.email_address') || undefined}\n                                ref={emailInput}\n                                onChange={() => {\n                                    setErrorTip(false);\n                                    setNoInputTip(false);\n                                }}\n                                readOnly={loginWithAccount}\n                                onFocus={() => {\n                                    emailBoxRef.current.setAttribute('data-focus', 'true');\n                                }}\n                                onBlur={() => {\n                                    emailBoxRef.current.removeAttribute('data-focus');\n                                }}\n                            />\n                        </Form.Item>\n                    </div>\n\n                    <div className=\"error-tip\">{errorTip && t('login.email_format_error')}</div>\n                    <div className=\"error-tip\">{noInputTip && t('login.input_email_holder')}</div>\n\n                    <Form.Item className=\"form-item\">\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            className=\"primary-antd-btn submit-btn\"\n                            loading={loading}\n                        >\n                            {t('login.get_captcha')}\n                        </Button>\n                    </Form.Item>\n\n                    {!loginWithAccount && supportAuthTypes.length > 0 && (\n                        <div className=\"login-or\">\n                            <div className=\"or-line\"></div>\n                            {t('login.or')}\n                            <div className=\"or-line\"></div>\n                        </div>\n                    )}\n                </Form>\n            </div>\n        </>\n    );\n}\n\nexport default EmailLogin;\n", "import { DownOutlined } from '@ant-design/icons';\nimport { getCloudflareTurnstileResponse } from '@particle-network/auth-core';\nimport { Button, Form, Input } from 'antd';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nimport type { CountryCode } from 'libphonenumber-js/max';\nimport { isValidPhoneNumber, parsePhoneNumber, parsePhoneNumberWithError } from 'libphonenumber-js/max';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { defaultCountriesData } from '../../../api/model/all-countries';\nimport { useAuthCoreModal } from '../../../context';\nimport { useCustomize } from '../../../context/hooks/useCustomize';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { isPhoneValid } from '../../../utils';\nimport styles from './login.less';\n\nfunction PhoneLogin(props: any) {\n    const { t } = useTranslation();\n\n    const { sendCaptcha, setShowInputCaptcha, account, supportAuthTypes, loginWithAccount } = props;\n\n    const [selectVisible, setSelectVisible] = useState(false);\n\n    const { themeType, language } = useCustomize();\n\n    const [countryData, setCountryData] = useState(['United States', 'us', '1']);\n\n    const [form] = Form.useForm();\n\n    const clickRef = useRef<any>();\n    const { authCoreModal } = useAuthCoreModal();\n    const [errorTip, setErrorTip] = useState(false);\n    const [noInputTip, setNoInputTip] = useState(false);\n\n    const [loading, setLoading] = useState(false);\n    const message = useMessage();\n    const phoneInput = useRef<any>(null);\n\n    const [phoneValue, setPhoneValue] = useState<string>();\n\n    useEffect(() => {\n        if (selectVisible) {\n            document.addEventListener('click', clickCallback, true);\n            return () => {\n                document.removeEventListener('click', clickCallback, true);\n            };\n        }\n    }, [selectVisible]);\n\n    useEffect(() => {\n        let currentCountry;\n        if (account && !account.includes('@')) {\n            if (isValidPhoneNumber(account)) {\n                const phoneNumber = parsePhoneNumber(account);\n                const countryCode = phoneNumber.countryCallingCode.toString();\n                const regionCode = phoneNumber.country;\n                form.setFieldsValue({\n                    phone: phoneNumber.nationalNumber,\n                });\n                if (countryCode && regionCode) {\n                    const items = defaultCountriesData.filter(\n                        (item) =>\n                            item[2].toString() === countryCode && item[1].toLowerCase() === regionCode.toLowerCase()\n                    );\n                    if (items && items.length > 0) {\n                        currentCountry = items[items.length - 1];\n                    }\n                }\n            }\n        }\n        if (!currentCountry) {\n            const language =\n                navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n            const locales = language.split('-');\n            const region = locales.length > 1 ? locales[1] : locales[0];\n            if (region && region.length > 0) {\n                currentCountry = defaultCountriesData.find((item) => item[1].toUpperCase() === region);\n            }\n        }\n        if (currentCountry) {\n            setCountryData(currentCountry);\n        }\n\n        if (loginWithAccount && account && sendCaptcha && isValidPhoneNumber(account)) {\n            getCaptcha(account, currentCountry ? currentCountry[1].toUpperCase() : undefined);\n        }\n    }, []);\n\n    const clickCallback = (event: any) => {\n        setTimeout(() => {\n            if (clickRef.current?.contains(event.target)) {\n                return;\n            }\n            setSelectVisible(false);\n        });\n    };\n\n    // \u9A8C\u8BC1 form\n    const validateForm = (phoneValue: string, regionCode: string, isValidateEmpty = true) => {\n        if (!phoneValue && isValidateEmpty) {\n            setNoInputTip(true);\n            return;\n        }\n\n        if (phoneValue?.length === 1) {\n            setErrorTip(true);\n            return;\n        }\n\n        if (!isPhoneValid(phoneValue, regionCode)) {\n            setErrorTip(true);\n            return false;\n        } else {\n            setErrorTip(false);\n            return true;\n        }\n    };\n\n    const getCaptcha = (phone: string, regionCode?: string) => {\n        phoneInput.current.focus();\n        if (!phone) {\n            setNoInputTip(true);\n            return;\n        }\n        if (phone.length === 1) {\n            setErrorTip(true);\n            return;\n        }\n\n        if (!regionCode) {\n            regionCode = countryData[1].toUpperCase();\n        }\n        if (isPhoneValid(phone, regionCode)) {\n            const countryCode = regionCode.toUpperCase() as CountryCode;\n            const phoneE164 = parsePhoneNumber(phone, countryCode).format('E.164');\n            console.log('login phone: ' + phoneE164);\n            setPhoneValue(phoneE164);\n            setLoading(true);\n            getCloudflareTurnstileResponse({\n                theme: themeType,\n                language,\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n            })\n                .then((token) => {\n                    sendCaptchaImpl(token, phoneE164);\n                })\n                .catch(() => {\n                    setLoading(false);\n                    message.error(t('error.server_20112'));\n                });\n        } else {\n            setErrorTip(true);\n        }\n    };\n\n    const sendCaptchaImpl = (token: string, phoneValue: string) => {\n        setLoading(true);\n        sendCaptcha({\n            phone: phoneValue,\n            // eslint-disable-next-line camelcase\n            cf_turnstile_response: token,\n        })\n            .then((result: boolean) => {\n                setShowInputCaptcha(result);\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n    };\n\n    const initialAccountValue = () => {\n        try {\n            if (account?.includes('@')) {\n                return '';\n            } else if (account?.length > 0) {\n                const phoneNumber = parsePhoneNumberWithError(account);\n                return phoneNumber.nationalNumber;\n            }\n        } catch (error) {\n            console.log('initialAccountValue', error);\n        }\n        return '';\n    };\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <div className=\"login-style\">\n                {selectVisible && (\n                    <div className=\"select-country\" ref={clickRef}>\n                        {defaultCountriesData.map((item, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className=\"country-item\"\n                                    onClick={() => {\n                                        setCountryData(item);\n                                        setSelectVisible(false);\n\n                                        setTimeout(() => {\n                                            const phoneValue = form.getFieldsValue().phone;\n                                            if (phoneValue) {\n                                                validateForm(phoneValue, item[1].toUpperCase(), false);\n                                            }\n                                        });\n                                    }}\n                                >\n                                    <div className=\"country-box\">\n                                        <div className=\"country-flag\">{getUnicodeFlagIcon(`${item[1]}`)}</div>\n                                        <span className=\"country-name\">{item[0]}</span>\n                                    </div>\n                                    <div className=\"country-code\">{'+' + item[2]}</div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                )}\n                <Form\n                    name=\"login-form\"\n                    onFinish={(values) => getCaptcha(values.phone, undefined)}\n                    className=\"form-box\"\n                    requiredMark={false}\n                    form={form}\n                    labelCol={{\n                        style: { textAlign: 'left' },\n                    }}\n                >\n                    <div className=\"phone-box\">\n                        <div\n                            className=\"phone-select\"\n                            defaultValue={`+${countryData[2]}`}\n                            onClick={() => {\n                                if (!loading) {\n                                    setSelectVisible(true);\n                                }\n                            }}\n                        >\n                            {getUnicodeFlagIcon(`${countryData[1]}`)}\n                            <DownOutlined className=\"down-more\" />\n                        </div>\n                        <div className=\"country-code\">+{countryData[2]}</div>\n                        <Form.Item\n                            name=\"phone\"\n                            // label={t(\"login.enter_phone\")}\n                            label=\"\"\n                            className=\"form-item\"\n                            getValueFromEvent={(event) => {\n                                return event.target.value.replace(/\\D+/g, '');\n                            }}\n                            initialValue={initialAccountValue()}\n                        >\n                            <Input\n                                type=\"text\"\n                                className=\"phone-input\"\n                                placeholder={t('login.mobile_number') || undefined}\n                                ref={phoneInput}\n                                onChange={() => {\n                                    setErrorTip(false);\n                                    setNoInputTip(false);\n                                }}\n                                readOnly={loginWithAccount}\n                                onFocus={() => {\n                                    document.querySelector('.phone-box')?.setAttribute('data-focus', 'true');\n                                }}\n                                onBlur={() => {\n                                    document.querySelector('.phone-box')?.removeAttribute('data-focus');\n                                }}\n                            />\n                        </Form.Item>\n                    </div>\n\n                    <div className=\"error-tip\">{errorTip && t('login.phone_format_error')}</div>\n                    <div className=\"error-tip\">{noInputTip && t('login.input_phone_holder')}</div>\n\n                    <Form.Item className=\"form-item\">\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            className=\"primary-antd-btn submit-btn\"\n                            loading={loading}\n                        >\n                            {t('login.get_captcha')}\n                        </Button>\n                    </Form.Item>\n                </Form>\n                {!loginWithAccount && supportAuthTypes.length > 0 && (\n                    <div className=\"login-or\">\n                        <div className=\"or-line\"></div>\n                        {t('login.or')}\n                        <div className=\"or-line\"></div>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default PhoneLogin;\n", "import { AuthType } from '@particle-network/auth-core';\nimport React, { useMemo, useState } from 'react';\nimport apple from '../../../common/images/apple_icon.png';\nimport discord from '../../../common/images/discord_icon.png';\nimport email from '../../../common/images/email_icon.png';\nimport facebook from '../../../common/images/facebook_icon.png';\nimport github from '../../../common/images/github_icon.png';\nimport google from '../../../common/images/google_icon.png';\nimport jwt from '../../../common/images/jwt_icon.png';\nimport linkedin from '../../../common/images/linkedin_icon.png';\nimport microsoft from '../../../common/images/microsoft_icon.png';\nimport passkeys from '../../../common/images/passkeys_icon.png';\nimport phone from '../../../common/images/phone_icon.png';\nimport twitch from '../../../common/images/twitch_icon.png';\nimport twitter from '../../../common/images/twitter_icon.png';\nimport SVGIcon from '../../../components/icon/svg-icon';\n\ninterface Props {\n    supportAuthTypes: AuthType[];\n    preferredAuthType?: AuthType;\n    onPreferredAuthTypeChange?: (authType: AuthType) => void;\n    thirdpartyAuthLogin: (authType: AuthType) => void;\n}\nconst SocialLogin = (props: Props) => {\n    const { supportAuthTypes, preferredAuthType, onPreferredAuthTypeChange, thirdpartyAuthLogin } = props;\n\n    const [collapse, setCollapse] = useState(true);\n\n    const authLogin = (authType: AuthType) => {\n        thirdpartyAuthLogin(authType);\n    };\n\n    const toggleEmailOrPhone = (authType: AuthType) => {\n        onPreferredAuthTypeChange?.(authType);\n    };\n\n    const imgs = {\n        email,\n        phone,\n        facebook,\n        google,\n        apple,\n        twitter,\n        discord,\n        github,\n        twitch,\n        microsoft,\n        linkedin,\n        jwt,\n        passkeys,\n    };\n\n    const items = useMemo(() => {\n        const authTypes = supportAuthTypes as AuthType[];\n        const hasEmailAndPhone = authTypes.includes(AuthType.email) && authTypes.includes(AuthType.phone);\n        const items: React.ReactNode[] = [];\n        if (hasEmailAndPhone) {\n            if (preferredAuthType === AuthType.phone) {\n                items.push(\n                    <img key=\"email-login\" src={email} alt=\"\" onClick={() => toggleEmailOrPhone(AuthType.email)} />\n                );\n            } else {\n                items.push(\n                    <img key=\"phone-login\" src={phone} alt=\"\" onClick={() => toggleEmailOrPhone(AuthType.phone)} />\n                );\n            }\n        }\n        const displayAuthTypes = authTypes.filter(\n            (authType) => authType !== AuthType.email && authType !== AuthType.phone\n        );\n\n        items.push(\n            ...displayAuthTypes.map((authType) => (\n                <img\n                    key={`${authType}-login`}\n                    src={imgs[authType]}\n                    alt=\"\"\n                    onClick={() => authLogin(authType as AuthType)}\n                />\n            ))\n        );\n\n        const collapseIcon = (\n            <div\n                key=\"collapse-login\"\n                className=\"collapse-login-icon\"\n                onClick={() => setCollapse(!collapse)}\n                data-is-collapse={collapse}\n            >\n                <SVGIcon className=\"collapse-icon\" name=\"collapse_icon\" />\n            </div>\n        );\n\n        if (items.length > 5) {\n            items.splice(4, 0, collapseIcon);\n        }\n\n        if (collapse) {\n            items.splice(5, items.length - 5);\n        }\n\n        return items;\n    }, [collapse, preferredAuthType, supportAuthTypes]);\n\n    return (\n        <div className=\"change-login-mode\" data-collapse={!!collapse}>\n            <div className=\"change-social\">{items}</div>\n        </div>\n    );\n};\n\nexport default SocialLogin;\n"],
  "mappings": "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",
  "names": ["AuthType", "React", "useCallback", "useEffect", "useMemo", "useState", "useTranslation", "_a", "captcha_input_default", "Button", "React", "useEffect", "useRef", "useState", "useTranslation", "useTranslation", "useState", "useRef", "useEffect", "React", "Button", "getCloudflareTurnstileResponse", "Button", "Form", "Input", "React", "useEffect", "useRef", "useState", "useTranslation", "useTranslation", "useState", "Form", "useRef", "useEffect", "language", "phoneValue", "getCloudflareTurnstileResponse", "React", "Input", "Button", "React", "useMemo", "useState", "useState", "useMemo", "items", "React", "_a", "_b", "_c", "_d", "_e", "AuthType", "useState", "useTranslation", "useEffect", "result", "useCallback", "React", "captcha_input_default", "loginType", "useMemo", "login_default"]
}
