"use client";
import {
  useAuthCore,
  useConnect,
  useEthereum,
  useSolana
} from "./chunk-6H6GFT5Q.js";
import "./chunk-4QYUCQME.js";
import {
  useModalOptions
} from "./chunk-YSYCTV4K.js";
import "./chunk-LQ53OFQ3.js";

// src/context/iframeWalletPlugin.tsx
import { AuthCoreEvent, getUserInfo, isConnected } from "@particle-network/auth-core";
import { walletEntryPlugin } from "@particle-network/wallet";
import React, { useCallback, useEffect } from "react";
var IframeWalletPlugin = () => {
  const { provider } = useEthereum();
  const { wallet } = useSolana();
  const { openAccountAndSecurity } = useAuthCore();
  const { modalOptions } = useModalOptions();
  const { connected } = useConnect();
  const customEventHandler = useCallback(
    async (messageType) => {
      if (messageType === "open-account-and-security" /* OpenAccountAndSecurity */) {
        openAccountAndSecurity();
      } else if (messageType === "get-user-info" /* GetUserInfo */) {
        return getUserInfo();
      }
    },
    [openAccountAndSecurity]
  );
  useEffect(() => {
    var _a, _b;
    const walletOptions = {
      ...modalOptions.wallet,
      erc4337: modalOptions.erc4337,
      language: modalOptions.language
    };
    walletEntryPlugin.init(
      {
        projectId: modalOptions.projectId,
        clientKey: modalOptions.clientKey,
        appId: modalOptions.appId
      },
      walletOptions
    );
    const onConnected = () => {
      walletEntryPlugin.walletEntryCreate();
    };
    const onDisconnect = () => {
      walletEntryPlugin.walletEntryDestroy();
    };
    if (typeof window !== "undefined") {
      (_a = window.particleAuth) == null ? void 0 : _a.on(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);
      (_b = window.particleAuth) == null ? void 0 : _b.on(AuthCoreEvent.ParticleAuthConnect, onConnected);
    }
    if (isConnected()) {
      walletEntryPlugin.walletEntryCreate();
    }
    return () => {
      var _a2, _b2;
      if (typeof window !== "undefined") {
        (_a2 = window.particleAuth) == null ? void 0 : _a2.off(AuthCoreEvent.ParticleAuthDisconnect, onDisconnect);
        (_b2 = window.particleAuth) == null ? void 0 : _b2.off(AuthCoreEvent.ParticleAuthConnect, onConnected);
      }
    };
  }, [
    modalOptions.projectId,
    modalOptions.clientKey,
    modalOptions.appId,
    modalOptions.wallet,
    modalOptions.erc4337,
    modalOptions.language
  ]);
  useEffect(() => {
    if (connected) {
      walletEntryPlugin.setWalletCore(
        {
          ethereum: provider,
          solana: wallet
        },
        customEventHandler
      );
    }
  }, [connected, provider, wallet, customEventHandler]);
  return /* @__PURE__ */ React.createElement("div", { id: "auth-core-modal-wallet-plugin", style: { display: "none" } }, "Wallet Plugin");
};
var iframeWalletPlugin_default = IframeWalletPlugin;
export {
  iframeWalletPlugin_default as default
};
//# sourceMappingURL=iframeWalletPlugin-5OGZICWR.js.map
