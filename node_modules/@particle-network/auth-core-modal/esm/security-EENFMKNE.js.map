{
  "version": 3,
  "sources": ["../src/pages/account/security/index.tsx", "../src/pages/account/bindSecurityAccountPrompt/index.tsx"],
  "sourcesContent": ["import {\n    AuthType,\n    hasMasterPassword as checkHasMasterPassword,\n    deletePaymentPassword,\n    getLatestAuthType,\n    syncUserInfo,\n} from '@particle-network/auth-core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport apple from '../../../common/images/apple_icon.png';\nimport discord from '../../../common/images/discord_icon.png';\nimport email from '../../../common/images/email_icon.png';\nimport facebook from '../../../common/images/facebook_icon.png';\nimport github from '../../../common/images/github_icon.png';\nimport google from '../../../common/images/google_icon.png';\nimport jwt from '../../../common/images/jwt_icon.png';\nimport linkedin from '../../../common/images/linkedin_icon.png';\nimport microsoft from '../../../common/images/microsoft_icon.png';\nimport phone from '../../../common/images/phone_icon.png';\nimport twitch from '../../../common/images/twitch_icon.png';\nimport twitter from '../../../common/images/twitter_icon.png';\nimport Header from '../../../components/header';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport PowerFooter from '../../../components/power-footer';\nimport { useCustomNavigate, useModalOptions, useParticleAuth } from '../../../context';\nimport { useUserInfo } from '../../../context/hooks';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { displayEmail, displayPhone, shortString } from '../../../utils/common-utils';\nimport { PageType } from '../accountVerify/config';\nimport BindSecurityAccountPrompt from '../bindSecurityAccountPrompt';\nimport styles from './index.less';\n\nconst AccountAndSecurity = () => {\n    const { t } = useTranslation();\n    const navigate = useCustomNavigate();\n    const [promptSecurityAccount, setPromptSecurityAccount] = useState(false);\n    const { setPaymentVerify, showSelectSecurityAccount, setPaymentPassword } = useParticleAuth();\n    const { userInfo } = useUserInfo();\n    const { modalOptions } = useModalOptions();\n    const message = useMessage();\n\n    const hasMasterPassword = useMemo(() => {\n        return checkHasMasterPassword();\n    }, [userInfo]);\n\n    const formatId = (id?: string) => {\n        const provider = userInfo?.thirdparty_user_info?.provider;\n        if (provider === AuthType.jwt) {\n            return id?.replace(`${modalOptions.projectId}:`, '');\n        }\n        return id;\n    };\n\n    const icons = {\n        email,\n        phone,\n        facebook,\n        google,\n        apple,\n        twitter,\n        twitterv1: twitter,\n        discord,\n        github,\n        twitch,\n        microsoft,\n        linkedin,\n        jwt,\n    };\n\n    // \u5F53\u524D\u767B\u5F55\u8D26\u53F7\u7C7B\u578B\n    const currentAuthType = useMemo(() => {\n        let authType = getLatestAuthType();\n        if (!authType) {\n            authType = (userInfo?.thirdparty_user_info?.provider as AuthType) || 'email';\n        }\n        if ((authType as string) === 'twitterv1') {\n            authType = AuthType.twitter;\n        }\n        return authType as AuthType;\n    }, [userInfo]);\n\n    // \u5F53\u524D\u767B\u5F55\u8D26\u53F7\n    const currentAccount = useMemo(() => {\n        let result = '';\n        if (currentAuthType && userInfo) {\n            result =\n                // @ts-ignore\n                userInfo[`${currentAuthType}`] ||\n                // @ts-ignore\n                userInfo[`${currentAuthType}_email`] ||\n                // @ts-ignore\n                shortString(formatId(userInfo[`${currentAuthType}_id`]));\n        }\n        return (\n            result ||\n            userInfo?.email ||\n            userInfo?.phone ||\n            userInfo?.thirdparty_user_info?.user_info?.email ||\n            shortString(formatId(userInfo?.thirdparty_user_info?.user_info?.id || ''))\n        );\n    }, [currentAuthType, userInfo]);\n\n    const setSecurityAccount = (type: 'phone' | 'email') => {\n        if (\n            (userInfo?.security_account?.email && !userInfo?.security_account?.phone) ||\n            (!userInfo?.security_account?.email && userInfo?.security_account?.phone)\n        ) {\n            // \u8BBE\u7F6E\u5B89\u5168\u8D26\u53F7,\u9700\u5148\u9A8C\u8BC1\u53E6\u4E00\u4E2A\u5B89\u5168\u8D26\u53F7\n            navigate('/account/verify', {\n                state: {\n                    account: userInfo?.security_account?.email || userInfo.security_account?.phone,\n                    authType: type,\n                    redirectUrl: '/account/security',\n                    pageType: PageType.VerifySecurityAccount_SetSecurityAccount,\n                },\n            });\n        } else {\n            navigate('/account/bind', {\n                state: {\n                    accountType: type,\n                    redirectUrl: '/account/security',\n                },\n            });\n        }\n    };\n\n    const chooseVerifyType = () => {\n        if (userInfo?.security_account?.email && userInfo?.security_account?.phone) {\n            showSelectSecurityAccount(true);\n        } else {\n            navigate('/account/set-password', {\n                state: {\n                    account: userInfo?.security_account?.email || userInfo?.security_account?.phone,\n                },\n            });\n        }\n    };\n\n    /**\n     * \u5173\u95ED\u652F\u4ED8\u5BC6\u7801\n     */\n    const closePaymentPassword = () => {\n        setPaymentVerify({\n            visible: true,\n            type: 'close',\n            onVerifyCompleted: (password) => {\n                deletePaymentPassword(password)\n                    .then((result) => {\n                        message.success(t('account.close_success'));\n                        syncUserInfo();\n                    })\n                    .catch((error) => {\n                        error.message && message.error(error.message);\n                        console.log('closePaymentPassword Error', error);\n                    });\n            },\n        });\n    };\n\n    const isCanBack = useMemo(() => {\n        return true;\n    }, []);\n\n    const goBack = () => {\n        navigate(-1);\n    };\n\n    const changeMasterPassword = () => {\n        navigate('/account/master-password/change');\n    };\n\n    const setMasterPassword = () => {\n        navigate('/account/master-password');\n    };\n\n    const aboutMasterPassword = () => {\n        navigate('/account/master-password/description');\n    };\n\n    const hasSecurityAccount = useMemo(\n        () => userInfo?.security_account?.email || userInfo?.security_account?.phone,\n        [userInfo?.security_account?.email, userInfo?.security_account?.phone]\n    );\n\n    useEffect(() => {\n        syncUserInfo().catch((e) => console.log('syncUserInfo', e));\n    }, []);\n\n    return (\n        <div className=\"account-and-security\">\n            <style>{styles as unknown as string}</style>\n            {isCanBack && <Header onBack={goBack}>{t('account.account_and_security')}</Header>}\n            {!isCanBack && <Header>{t('account.account_and_security')}</Header>}\n            <div className=\"scroll-content\">\n                <div className=\"category-title\">{t('account.account')}</div>\n                <div className=\"account-box\">\n                    <img className=\"account-avatar\" src={icons[currentAuthType]} />\n                    <div className=\"account\">{currentAccount}</div>\n                    <div\n                        className=\"more-account\"\n                        onClick={() => {\n                            if (hasSecurityAccount) {\n                                navigate('/login-account');\n                            } else {\n                                setPromptSecurityAccount(true);\n                            }\n                        }}\n                    >\n                        {t('account.more_login_account')}\n                    </div>\n                </div>\n\n                <div className=\"payment-security authorization-item\">\n                    <div\n                        className=\"label-item hover\"\n                        onClick={() => {\n                            navigate('/manageDevices/deviceList');\n                        }}\n                    >\n                        <div className=\"label-item-name\">{t('new.authorization')}</div>\n                        <SVGIcon className=\"arrow-right-icon\" name=\"arrow_right_icon\" />\n                    </div>\n                </div>\n\n                <div className=\"category-title\">{t('account.security')}</div>\n\n                {/* master password */}\n                <div className=\"master-password-item\">\n                    <div className=\"mp-header\">\n                        <div className=\"mp-title\">{t('account.master_password')}</div>\n                        <div className=\"mp-learn-more\" onClick={aboutMasterPassword}>\n                            {t('account.learn_more')}\n                        </div>\n                    </div>\n                    <div className=\"mp-content\">\n                        <div className=\"mp-desc\">{t('account.master_password_tip')}</div>\n                        {!hasMasterPassword && (\n                            <div className=\"mp-set\" onClick={setMasterPassword}>\n                                {t('account.set')}\n                            </div>\n                        )}\n                    </div>\n                    {hasMasterPassword && (\n                        <div className=\"label-item hover\" onClick={changeMasterPassword}>\n                            <div className=\"label-item-name\">{t('account.change_master_password')}</div>\n                            <SVGIcon className=\"arrow-right-icon\" name=\"arrow_right_icon\" />\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"verification-security\">\n                    <h3>{t('account.verification_security')}</h3>\n                    <p>{t('account.verification_security_tip')}</p>\n\n                    <div className=\"label-item\">\n                        <div className=\"label-item-name\">{t('account.email')}</div>\n\n                        {displayEmail(userInfo?.security_account?.email || '') || (\n                            <div className=\"label-item-btn\" onClick={() => setSecurityAccount('email')}>\n                                {t('account.set')}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"label-item\">\n                        <div className=\"label-item-name\">{t('account.mobile')}</div>\n                        {displayPhone(userInfo?.security_account?.phone || '') || (\n                            <div className=\"label-item-btn\" onClick={() => setSecurityAccount('phone')}>\n                                {t('account.set')}\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"payment-security\">\n                    <h3>{t('account.payment_security')}</h3>\n                    <p>{t('account.payment_password_hint')}</p>\n\n                    {userInfo?.security_account?.has_set_payment_password ? (\n                        <>\n                            <div className=\"label-item hover\" onClick={() => navigate('/account/change-password')}>\n                                <div className=\"label-item-name\">{t('account.change_payment_password')}</div>\n                                <SVGIcon className=\"arrow-right-icon\" name=\"arrow_right_icon\" />\n                            </div>\n                            <div className=\"label-item hover\" onClick={chooseVerifyType}>\n                                <div className=\"label-item-name\">{t('account.forgot_payment_password')}</div>\n                                <SVGIcon className=\"arrow-right-icon\" name=\"arrow_right_icon\" />\n                            </div>\n                            <div className=\"label-item hover\" onClick={closePaymentPassword}>\n                                <div className=\"label-item-name\">{t('account.close_payment_password')}</div>\n                                <SVGIcon className=\"arrow-right-icon\" name=\"arrow_right_icon\" />\n                            </div>\n                        </>\n                    ) : (\n                        <div className=\"label-item\">\n                            <div className=\"label-item-name\">{t('account.payment_password')}</div>\n                            <div\n                                className=\"label-item-btn\"\n                                onClick={() => {\n                                    if (hasSecurityAccount) {\n                                        setPaymentPassword();\n                                    } else {\n                                        setPromptSecurityAccount(true);\n                                    }\n                                }}\n                            >\n                                {t('account.set')}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <PowerFooter className=\"footer-box-v2\" />\n            <BindSecurityAccountPrompt\n                visible={promptSecurityAccount}\n                setVisible={setPromptSecurityAccount}\n                onBind={() => {\n                    navigate('/account/bind', {\n                        state: {\n                            accountType: userInfo?.email ? 'phone' : 'email',\n                            showSwitch: true,\n                            redirectUrl: '/account/security',\n                        },\n                    });\n                }}\n            />\n        </div>\n    );\n};\n\nexport default AccountAndSecurity;\n", "import { Button, Modal } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport CircleClose from '../../../components/icon/circle-close';\nimport { useAuthCoreModal } from '../../../context';\nimport styles from './index.less';\n\ninterface Prop {\n    visible: boolean;\n    setVisible: (visible: boolean) => void;\n    onBind: () => void;\n}\n\nconst BindSecurityAccountPrompt = (prop: Prop) => {\n    const { visible, setVisible, onBind } = prop;\n    const { t } = useTranslation();\n    const { authCoreModal } = useAuthCoreModal();\n    const onClose = () => {\n        setVisible(false);\n    };\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <Modal\n                className=\"bind-security-account-prompt\"\n                open={visible}\n                maskClosable={false}\n                onCancel={onClose}\n                closeIcon={<CircleClose />}\n                centered\n                getContainer={() => {\n                    return authCoreModal.rootBody as HTMLElement;\n                }}\n            >\n                <div className=\"bind-hint-content\">{t('account.security_account_bind_hint')}</div>\n                <div className=\"prompt-bottom-btn-box\">\n                    <Button className=\"primary-antd-btn secondary particle-cancel-button\" onClick={onClose}>\n                        {t('common.cancel')}\n                    </Button>\n                    <Button\n                        className=\"primary-antd-btn\"\n                        onClick={() => {\n                            setVisible(false);\n                            onBind();\n                        }}\n                    >\n                        {t('common.bind')}\n                    </Button>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default BindSecurityAccountPrompt;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACI;AAAA,EACA,qBAAqB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,OACG;AACP,OAAOA,UAAS,WAAW,SAAS,gBAAgB;AACpD,SAAS,kBAAAC,uBAAsB;;;ACR/B,SAAS,QAAQ,aAAa;AAC9B,OAAO,WAAW;AAClB,SAAS,sBAAsB;;;;;;AAW/B,IAAM,4BAA4B,CAAC,SAAe;AAC9C,QAAM,EAAE,SAAS,YAAY,OAAO,IAAI;AACxC,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,EAAE,cAAc,IAAI,iBAAiB;AAC3C,QAAM,UAAU,MAAM;AAClB,eAAW,KAAK;AAAA,EACpB;AAEA,SACI,0DACI,oCAAC,eAAO,iCAA4B,GACpC;AAAA,IAAC;AAAA;AAAA,MACG,WAAU;AAAA,MACV,MAAM;AAAA,MACN,cAAc;AAAA,MACd,UAAU;AAAA,MACV,WAAW,oCAAC,0BAAY;AAAA,MACxB,UAAQ;AAAA,MACR,cAAc,MAAM;AAChB,eAAO,cAAc;AAAA,MACzB;AAAA;AAAA,IAEA,oCAAC,SAAI,WAAU,uBAAqB,EAAE,oCAAoC,CAAE;AAAA,IAC5E,oCAAC,SAAI,WAAU,2BACX,oCAAC,UAAO,WAAU,qDAAoD,SAAS,WAC1E,EAAE,eAAe,CACtB,GACA;AAAA,MAAC;AAAA;AAAA,QACG,WAAU;AAAA,QACV,SAAS,MAAM;AACX,qBAAW,KAAK;AAChB,iBAAO;AAAA,QACX;AAAA;AAAA,MAEC,EAAE,aAAa;AAAA,IACpB,CACJ;AAAA,EACJ,CACJ;AAER;AAEA,IAAOC,qCAAQ;;;;;;ADvBf,IAAM,qBAAqB,MAAM;AAhCjC;AAiCI,QAAM,EAAE,EAAE,IAAIC,gBAAe;AAC7B,QAAM,WAAW,kBAAkB;AACnC,QAAM,CAAC,uBAAuB,wBAAwB,IAAI,SAAS,KAAK;AACxE,QAAM,EAAE,kBAAkB,2BAA2B,mBAAmB,IAAI,gBAAgB;AAC5F,QAAM,EAAE,SAAS,IAAI,YAAY;AACjC,QAAM,EAAE,aAAa,IAAI,gBAAgB;AACzC,QAAM,UAAU,mBAAW;AAE3B,QAAM,oBAAoB,QAAQ,MAAM;AACpC,WAAO,uBAAuB;AAAA,EAClC,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,WAAW,CAAC,OAAgB;AA7CtC,QAAAC;AA8CQ,UAAM,YAAWA,MAAA,qCAAU,yBAAV,gBAAAA,IAAgC;AACjD,QAAI,aAAa,SAAS,KAAK;AAC3B,aAAO,yBAAI,QAAQ,GAAG,aAAa,cAAc;AAAA,IACrD;AACA,WAAO;AAAA,EACX;AAEA,QAAM,QAAQ;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAGA,QAAM,kBAAkB,QAAQ,MAAM;AAtE1C,QAAAA;AAuEQ,QAAI,WAAW,kBAAkB;AACjC,QAAI,CAAC,UAAU;AACX,mBAAYA,MAAA,qCAAU,yBAAV,gBAAAA,IAAgC,aAAyB;AAAA,IACzE;AACA,QAAK,aAAwB,aAAa;AACtC,iBAAW,SAAS;AAAA,IACxB;AACA,WAAO;AAAA,EACX,GAAG,CAAC,QAAQ,CAAC;AAGb,QAAM,iBAAiB,QAAQ,MAAM;AAlFzC,QAAAA,KAAAC,KAAAC,KAAAC;AAmFQ,QAAI,SAAS;AACb,QAAI,mBAAmB,UAAU;AAC7B,eAEI,SAAS,GAAG,sBAEZ,SAAS,GAAG,4BAEZ,YAAY,SAAS,SAAS,GAAG,qBAAqB,CAAC;AAAA,IAC/D;AACA,WACI,WACA,qCAAU,WACV,qCAAU,YACVF,OAAAD,MAAA,qCAAU,yBAAV,gBAAAA,IAAgC,cAAhC,gBAAAC,IAA2C,UAC3C,YAAY,WAASE,OAAAD,MAAA,qCAAU,yBAAV,gBAAAA,IAAgC,cAAhC,gBAAAC,IAA2C,OAAM,EAAE,CAAC;AAAA,EAEjF,GAAG,CAAC,iBAAiB,QAAQ,CAAC;AAE9B,QAAM,qBAAqB,CAAC,SAA4B;AAtG5D,QAAAH,KAAAC,KAAAC,KAAAC,KAAAC,KAAA;AAuGQ,UACKJ,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,UAAS,GAACC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,UAClE,GAACC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,YAASC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,QACrE;AAEE,eAAS,mBAAmB;AAAA,QACxB,OAAO;AAAA,UACH,WAASC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,YAAS,cAAS,qBAAT,mBAA2B;AAAA,UACzE,UAAU;AAAA,UACV,aAAa;AAAA,UACb;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL,OAAO;AACH,eAAS,iBAAiB;AAAA,QACtB,OAAO;AAAA,UACH,aAAa;AAAA,UACb,aAAa;AAAA,QACjB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,QAAM,mBAAmB,MAAM;AA9HnC,QAAAJ,KAAAC,KAAAC,KAAAC;AA+HQ,UAAIH,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,YAASC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,QAAO;AACxE,gCAA0B,IAAI;AAAA,IAClC,OAAO;AACH,eAAS,yBAAyB;AAAA,QAC9B,OAAO;AAAA,UACH,WAASC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,YAASC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B;AAAA,QAC9E;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAKA,QAAM,uBAAuB,MAAM;AAC/B,qBAAiB;AAAA,MACb,SAAS;AAAA,MACT,MAAM;AAAA,MACN,mBAAmB,CAAC,aAAa;AAC7B,8BAAsB,QAAQ,EACzB,KAAK,CAAC,WAAW;AACd,kBAAQ,QAAQ,EAAE,uBAAuB,CAAC;AAC1C,uBAAa;AAAA,QACjB,CAAC,EACA,MAAM,CAAC,UAAU;AACd,gBAAM,WAAW,QAAQ,MAAM,MAAM,OAAO;AAC5C,kBAAQ,IAAI,8BAA8B,KAAK;AAAA,QACnD,CAAC;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,QAAM,YAAY,QAAQ,MAAM;AAC5B,WAAO;AAAA,EACX,GAAG,CAAC,CAAC;AAEL,QAAM,SAAS,MAAM;AACjB,aAAS,EAAE;AAAA,EACf;AAEA,QAAM,uBAAuB,MAAM;AAC/B,aAAS,iCAAiC;AAAA,EAC9C;AAEA,QAAM,oBAAoB,MAAM;AAC5B,aAAS,0BAA0B;AAAA,EACvC;AAEA,QAAM,sBAAsB,MAAM;AAC9B,aAAS,sCAAsC;AAAA,EACnD;AAEA,QAAM,qBAAqB;AAAA,IACvB,MAAG;AApLX,UAAAH,KAAAC;AAoLc,eAAAD,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B,YAASC,MAAA,qCAAU,qBAAV,gBAAAA,IAA4B;AAAA;AAAA,IACvE,EAAC,0CAAU,qBAAV,mBAA4B,QAAO,0CAAU,qBAAV,mBAA4B,KAAK;AAAA,EACzE;AAEA,YAAU,MAAM;AACZ,iBAAa,EAAE,MAAM,CAAC,MAAM,QAAQ,IAAI,gBAAgB,CAAC,CAAC;AAAA,EAC9D,GAAG,CAAC,CAAC;AAEL,SACI,gBAAAI,OAAA,cAAC,SAAI,WAAU,0BACX,gBAAAA,OAAA,cAAC,eAAO,gBAA4B,GACnC,aAAa,gBAAAA,OAAA,cAAC,kBAAO,QAAQ,UAAS,EAAE,8BAA8B,CAAE,GACxE,CAAC,aAAa,gBAAAA,OAAA,cAAC,sBAAQ,EAAE,8BAA8B,CAAE,GAC1D,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBAAkB,EAAE,iBAAiB,CAAE,GACtD,gBAAAA,OAAA,cAAC,SAAI,WAAU,iBACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,kBAAiB,KAAK,MAAM,kBAAkB,GAC7D,gBAAAA,OAAA,cAAC,SAAI,WAAU,aAAW,cAAe,GACzC,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,WAAU;AAAA,MACV,SAAS,MAAM;AACX,YAAI,oBAAoB;AACpB,mBAAS,gBAAgB;AAAA,QAC7B,OAAO;AACH,mCAAyB,IAAI;AAAA,QACjC;AAAA,MACJ;AAAA;AAAA,IAEC,EAAE,4BAA4B;AAAA,EACnC,CACJ,GAEA,gBAAAA,OAAA,cAAC,SAAI,WAAU,yCACX,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,WAAU;AAAA,MACV,SAAS,MAAM;AACX,iBAAS,2BAA2B;AAAA,MACxC;AAAA;AAAA,IAEA,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,mBAAmB,CAAE;AAAA,IACzD,gBAAAA,OAAA,cAAC,oBAAQ,WAAU,oBAAmB,MAAK,oBAAmB;AAAA,EAClE,CACJ,GAEA,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBAAkB,EAAE,kBAAkB,CAAE,GAGvD,gBAAAA,OAAA,cAAC,SAAI,WAAU,0BACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,eACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,cAAY,EAAE,yBAAyB,CAAE,GACxD,gBAAAA,OAAA,cAAC,SAAI,WAAU,iBAAgB,SAAS,uBACnC,EAAE,oBAAoB,CAC3B,CACJ,GACA,gBAAAA,OAAA,cAAC,SAAI,WAAU,gBACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,aAAW,EAAE,6BAA6B,CAAE,GAC1D,CAAC,qBACE,gBAAAA,OAAA,cAAC,SAAI,WAAU,UAAS,SAAS,qBAC5B,EAAE,aAAa,CACpB,CAER,GACC,qBACG,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBAAmB,SAAS,wBACvC,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,gCAAgC,CAAE,GACtE,gBAAAA,OAAA,cAAC,oBAAQ,WAAU,oBAAmB,MAAK,oBAAmB,CAClE,CAER,GAEA,gBAAAA,OAAA,cAAC,SAAI,WAAU,2BACX,gBAAAA,OAAA,cAAC,YAAI,EAAE,+BAA+B,CAAE,GACxC,gBAAAA,OAAA,cAAC,WAAG,EAAE,mCAAmC,CAAE,GAE3C,gBAAAA,OAAA,cAAC,SAAI,WAAU,gBACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,eAAe,CAAE,GAEpD,eAAa,0CAAU,qBAAV,mBAA4B,UAAS,EAAE,KACjD,gBAAAA,OAAA,cAAC,SAAI,WAAU,kBAAiB,SAAS,MAAM,mBAAmB,OAAO,KACpE,EAAE,aAAa,CACpB,CAER,GACA,gBAAAA,OAAA,cAAC,SAAI,WAAU,gBACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,gBAAgB,CAAE,GACrD,eAAa,0CAAU,qBAAV,mBAA4B,UAAS,EAAE,KACjD,gBAAAA,OAAA,cAAC,SAAI,WAAU,kBAAiB,SAAS,MAAM,mBAAmB,OAAO,KACpE,EAAE,aAAa,CACpB,CAER,CACJ,GAEA,gBAAAA,OAAA,cAAC,SAAI,WAAU,sBACX,gBAAAA,OAAA,cAAC,YAAI,EAAE,0BAA0B,CAAE,GACnC,gBAAAA,OAAA,cAAC,WAAG,EAAE,+BAA+B,CAAE,KAEtC,0CAAU,qBAAV,mBAA4B,4BACzB,gBAAAA,OAAA,cAAAA,OAAA,gBACI,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBAAmB,SAAS,MAAM,SAAS,0BAA0B,KAChF,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,iCAAiC,CAAE,GACvE,gBAAAA,OAAA,cAAC,oBAAQ,WAAU,oBAAmB,MAAK,oBAAmB,CAClE,GACA,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBAAmB,SAAS,oBACvC,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,iCAAiC,CAAE,GACvE,gBAAAA,OAAA,cAAC,oBAAQ,WAAU,oBAAmB,MAAK,oBAAmB,CAClE,GACA,gBAAAA,OAAA,cAAC,SAAI,WAAU,oBAAmB,SAAS,wBACvC,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,gCAAgC,CAAE,GACtE,gBAAAA,OAAA,cAAC,oBAAQ,WAAU,oBAAmB,MAAK,oBAAmB,CAClE,CACJ,IAEA,gBAAAA,OAAA,cAAC,SAAI,WAAU,gBACX,gBAAAA,OAAA,cAAC,SAAI,WAAU,qBAAmB,EAAE,0BAA0B,CAAE,GAChE,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,WAAU;AAAA,MACV,SAAS,MAAM;AACX,YAAI,oBAAoB;AACpB,6BAAmB;AAAA,QACvB,OAAO;AACH,mCAAyB,IAAI;AAAA,QACjC;AAAA,MACJ;AAAA;AAAA,IAEC,EAAE,aAAa;AAAA,EACpB,CACJ,CAER,CACJ,GACA,gBAAAA,OAAA,cAAC,wBAAY,WAAU,iBAAgB,GACvC,gBAAAA,OAAA;AAAA,IAACC;AAAA,IAAA;AAAA,MACG,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ,MAAM;AACV,iBAAS,iBAAiB;AAAA,UACtB,OAAO;AAAA,YACH,cAAa,qCAAU,SAAQ,UAAU;AAAA,YACzC,YAAY;AAAA,YACZ,aAAa;AAAA,UACjB;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA,EACJ,CACJ;AAER;AAEA,IAAOC,oBAAQ;",
  "names": ["React", "useTranslation", "bindSecurityAccountPrompt_default", "useTranslation", "_a", "_b", "_c", "_d", "_e", "React", "bindSecurityAccountPrompt_default", "security_default"]
}
