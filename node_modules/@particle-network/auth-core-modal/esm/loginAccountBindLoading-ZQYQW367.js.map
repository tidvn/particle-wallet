{
  "version": 3,
  "sources": ["../src/pages/account/loginAccountBindLoading/index.tsx"],
  "sourcesContent": ["import { bindLoginAccount } from '@particle-network/auth-core';\nimport { Button } from 'antd';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Header from '../../../components/header';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport { useCustomNavigate } from '../../../context';\nimport { useUserInfo } from '../../../context/hooks';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { getAccountList } from '../../loginAccount';\nimport styles from './index.less';\n\nconst LoginAccountBindLoading = (props: any) => {\n    const state = props;\n    const { authType = 'google', verifyToken, code } = state;\n    const navigate = useCustomNavigate();\n    const { t } = useTranslation();\n    const [loading, setLoading] = useState(true);\n    const { userInfo } = useUserInfo();\n    const message = useMessage();\n    const accountList = useMemo(() => {\n        return getAccountList({ userInfo, t });\n    }, [userInfo]);\n\n    const authItem = useMemo(() => {\n        const item = (accountList.find((item) => item.type.replace(/v1$/, '') == authType) || {}) as any;\n        return {\n            ...item,\n        };\n    }, [accountList, state]);\n\n    useEffect(() => {\n        if (authType && verifyToken) {\n            bindLoginAccount({\n                provider: authType,\n                // eslint-disable-next-line camelcase\n                thirdparty_code: code,\n                // eslint-disable-next-line camelcase\n                security_account_verify_token: verifyToken,\n                version: 'v2',\n            })\n                .then((res) => {\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    message.error(error.message);\n                    setTimeout(() => {\n                        navigate('/account/security', { replace: true });\n                    });\n                });\n        }\n    }, [authType, verifyToken]);\n\n    return (\n        <div className=\"account-bind-container\">\n            <style>{styles as unknown as string}</style>\n            <Header displayBackBtn={true}></Header>\n            <div className=\"particle-connect-form-contaier center-center flex-column\">\n                {loading ? (\n                    <div className=\"particle-loading\">\n                        <SVGIcon name={authItem.type + '_icon'} className=\"logo-img logo-img-2\" />\n                        <p>\n                            <img\n                                className=\"particle-loading-img\"\n                                width={30}\n                                height={30}\n                                src={require('../../../common/images/loading.png').default}\n                                alt=\"\"\n                            />\n                        </p>\n                    </div>\n                ) : (\n                    <div className=\"result-content resultsuccess\">\n                        <img src={authItem?.icon} alt=\"\" />\n                        <div className=\"info\">Binding succeeded\uFF01</div>\n                        <div className=\"back\">\n                            <Button\n                                type=\"primary\"\n                                onClick={() => {\n                                    navigate('/account/security', { replace: true });\n                                }}\n                            >\n                                Back\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default LoginAccountBindLoading;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,wBAAwB;AACjC,SAAS,cAAc;AACvB,OAAO,SAAS,WAAW,SAAS,gBAAgB;AACpD,SAAS,sBAAsB;;;;;;AAS/B,IAAM,0BAA0B,CAAC,UAAe;AAC5C,QAAM,QAAQ;AACd,QAAM,EAAE,WAAW,UAAU,aAAa,KAAK,IAAI;AACnD,QAAM,WAAW,kBAAkB;AACnC,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,IAAI;AAC3C,QAAM,EAAE,SAAS,IAAI,YAAY;AACjC,QAAM,UAAU,mBAAW;AAC3B,QAAM,cAAc,QAAQ,MAAM;AAC9B,WAAO,eAAe,EAAE,UAAU,EAAE,CAAC;AAAA,EACzC,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,WAAW,QAAQ,MAAM;AAC3B,UAAM,OAAQ,YAAY,KAAK,CAACA,UAASA,MAAK,KAAK,QAAQ,OAAO,EAAE,KAAK,QAAQ,KAAK,CAAC;AACvF,WAAO;AAAA,MACH,GAAG;AAAA,IACP;AAAA,EACJ,GAAG,CAAC,aAAa,KAAK,CAAC;AAEvB,YAAU,MAAM;AACZ,QAAI,YAAY,aAAa;AACzB,uBAAiB;AAAA,QACb,UAAU;AAAA,QAEV,iBAAiB;AAAA,QAEjB,+BAA+B;AAAA,QAC/B,SAAS;AAAA,MACb,CAAC,EACI,KAAK,CAAC,QAAQ;AACX,mBAAW,KAAK;AAAA,MACpB,CAAC,EACA,MAAM,CAAC,UAAU;AACd,gBAAQ,MAAM,MAAM,OAAO;AAC3B,mBAAW,MAAM;AACb,mBAAS,qBAAqB,EAAE,SAAS,KAAK,CAAC;AAAA,QACnD,CAAC;AAAA,MACL,CAAC;AAAA,IACT;AAAA,EACJ,GAAG,CAAC,UAAU,WAAW,CAAC;AAE1B,SACI,oCAAC,SAAI,WAAU,4BACX,oCAAC,eAAO,+BAA4B,GACpC,oCAAC,kBAAO,gBAAgB,MAAM,GAC9B,oCAAC,SAAI,WAAU,8DACV,UACG,oCAAC,SAAI,WAAU,sBACX,oCAAC,oBAAQ,MAAM,SAAS,OAAO,SAAS,WAAU,uBAAsB,GACxE,oCAAC,WACG;AAAA,IAAC;AAAA;AAAA,MACG,WAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,KAAK,gDAA8C;AAAA,MACnD,KAAI;AAAA;AAAA,EACR,CACJ,CACJ,IAEA,oCAAC,SAAI,WAAU,kCACX,oCAAC,SAAI,KAAK,qCAAU,MAAM,KAAI,IAAG,GACjC,oCAAC,SAAI,WAAU,UAAO,yBAAkB,GACxC,oCAAC,SAAI,WAAU,UACX;AAAA,IAAC;AAAA;AAAA,MACG,MAAK;AAAA,MACL,SAAS,MAAM;AACX,iBAAS,qBAAqB,EAAE,SAAS,KAAK,CAAC;AAAA,MACnD;AAAA;AAAA,IACH;AAAA,EAED,CACJ,CACJ,CAER,CACJ;AAER;AAEA,IAAOC,mCAAQ;",
  "names": ["item", "loginAccountBindLoading_default"]
}
