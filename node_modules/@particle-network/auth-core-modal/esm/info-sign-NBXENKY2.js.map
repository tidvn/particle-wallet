{
  "version": 3,
  "sources": ["../src/pages/sign/components/info-sign.tsx", "../src/utils/solana-utils.ts"],
  "sourcesContent": ["import { RecordType } from '@particle-network/analytics';\nimport {\n    SolanaEnhancedMethod,\n    SolanaRpcMethod,\n    analyticsRecord,\n    isNeedRestoreWallet,\n    particleAuth,\n    syncUserInfo,\n    type SolanaDeserializeTransactionResult,\n    type SplTokenChangeInfo,\n    type TokenChangeInfo,\n} from '@particle-network/auth-core';\nimport type { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { Button, Modal, Tabs } from 'antd';\nimport bs58 from 'bs58';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { useTranslation } from 'react-i18next';\nimport { AuthError } from '../../../api/model/authError';\nimport { PromptSettingType } from '../../../api/model/bundle';\nimport { AuthPage } from '../../../components/customRouter';\nimport IconCopy from '../../../components/icon/icon-copy';\nimport PowerFooter from '../../../components/power-footer';\nimport { useAuthCoreModal, useCustomNavigate, useEvents, useModalOptions, useParticleAuth } from '../../../context';\nimport { useError } from '../../../context/hooks/useError';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { usePaymentPassword } from '../../../context/hooks/usePaymentPassword';\nimport { AuthCoreModalEvent } from '../../../context/types';\nimport { getChainDisplayName, getChainIcon } from '../../../utils/chain-utils';\nimport { shortString } from '../../../utils/common-utils';\nimport { formatTokenAmount } from '../../../utils/number-utils';\nimport solana from '../../../utils/solana-utils';\nimport styles from './info-sign.less';\nimport Menu from './menu';\n\ninterface IProps {\n    param: unknown;\n    method: SolanaRpcMethod;\n    chainId?: number;\n}\nfunction InfoSign(props: IProps) {\n    const { method, param, chainId } = props;\n    const { t } = useTranslation();\n    const navigate = useCustomNavigate();\n    const { setPaymentVerify, userInfo, setPaymentPassword } = useParticleAuth();\n    const { events } = useEvents();\n    const { modalOptions } = useModalOptions();\n    const { authCoreModal } = useAuthCoreModal();\n    const { errorHandle } = useError();\n\n    const [loading, setLoading] = useState(false);\n    const message = useMessage();\n    const [transactionInfo, setTransactionInfo] = useState<SolanaDeserializeTransactionResult>();\n\n    const [nftChanges, setNftChanges] = useState<TokenChangeInfo[]>();\n\n    const [tokenChanges, setTokenChanges] = useState<SplTokenChangeInfo[]>();\n\n    const [headerTitle, setHeaderTitle] = useState<string>('');\n    const [headerDes, setHeaderDes] = useState<string>('');\n\n    const { hasSetPaymentPassword, showSetPaymentPasswordOrConfirm } = usePaymentPassword();\n\n    const chain = useMemo(() => {\n        return {\n            id: chainId || particleAuth.solana.chainId,\n            name: 'Solana',\n        };\n    }, []);\n\n    const shortAddress = useMemo(() => {\n        const address = particleAuth.solana.selectedAddress as string;\n        return shortString(address);\n    }, []);\n\n    useEffect(() => {\n        syncUserInfo().catch((e) => console.log('syncUserInfo', e));\n        if (isNeedRestoreWallet()) {\n            navigate(AuthPage.MasterPasswordVerify);\n        }\n    }, [navigate]);\n\n    const loadsecurityAccounts = () => {\n        syncUserInfo()\n            .then(() => {\n                approveSign();\n            })\n            .catch((error) => {\n                setLoading(false);\n                message.error(error.message ?? 'Sign Error');\n            });\n    };\n\n    const finallyHandle = (result: any, error?: any) => {\n        events.emit(AuthCoreModalEvent.SignResponse, {\n            result,\n            error,\n        });\n    };\n\n    async function asyncFilter<T>(predicate: (indo: T) => Promise<boolean>, arr?: T[]): Promise<T[]> {\n        if (!arr) {\n            return [];\n        }\n        const results = await Promise.all(arr.map(predicate));\n        return arr.filter((_v, index) => results[index]);\n    }\n\n    const approveSign = async () => {\n        if (!method) return;\n\n        analyticsRecord({\n            // eslint-disable-next-line camelcase\n            record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK, // confirm\u6309\u94AE\u70B9\u51FB\n        });\n\n        if (userInfo?.security_account?.has_set_payment_password) {\n            setPaymentVerify({\n                visible: true,\n                onVerifyCompleted: approveSignImpl,\n            });\n        } else if (\n            method === SolanaRpcMethod.signAndSendTransaction ||\n            method === SolanaRpcMethod.signTransaction ||\n            method === SolanaRpcMethod.signAllTransactions ||\n            modalOptions?.promptSettingConfig?.promptPaymentPasswordSettingWhenSign ===\n                PromptSettingType.everyAndNotSkip\n        ) {\n            // \u663E\u793A\u8BBE\u7F6E\u652F\u4ED8\u5BC6\u7801\n            showSetPaymentPasswordOrConfirm(approveSignImpl);\n        } else {\n            approveSignImpl();\n        }\n    };\n\n    const approveSignImpl = async () => {\n        if (!method) return;\n        setLoading(true);\n        let signed;\n        try {\n            if (method === SolanaRpcMethod.signMessage) {\n                signed = await particleAuth.solana.signMessage(param as Uint8Array);\n            } else if (method === SolanaRpcMethod.signAndSendTransaction) {\n                signed = await particleAuth.solana.signAndSendTransaction(\n                    param as Transaction | VersionedTransaction,\n                    chain.id\n                );\n            } else if (method === SolanaRpcMethod.signTransaction) {\n                signed = await particleAuth.solana.signTransaction(\n                    param as Transaction | VersionedTransaction,\n                    chain.id\n                );\n            } else if (method === SolanaRpcMethod.signAllTransactions) {\n                signed = await particleAuth.solana.signAllTransactions(\n                    param as (Transaction | VersionedTransaction)[],\n                    chain.id\n                );\n            } else {\n                throw new Error('Unknown method');\n            }\n\n            analyticsRecord({\n                // eslint-disable-next-line camelcase\n                record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_SUCCESS, // confirm\u6210\u529F\n            });\n        } catch (e: any) {\n            console.error('approveSignImpl error', method, e);\n            analyticsRecord({\n                // eslint-disable-next-line camelcase\n                record_type: RecordType.PAGE_SIGN_CONFIRM_BUTTON_CLICK_FAILURE, // confirm\u5931\u8D25\n            });\n\n            if (e?.error_code === 50103 && !userInfo?.security_account?.has_set_payment_password) {\n                loadsecurityAccounts();\n            } else if (e?.message === 'Local Key not found' || e?.message === 'Master password decryption error') {\n                navigate(AuthPage.MasterPasswordVerify);\n            } else {\n                errorHandle(e);\n            }\n        } finally {\n            setLoading(false);\n        }\n\n        if (signed) {\n            finallyHandle(signed);\n        }\n    };\n\n    useEffect(() => {\n        if (method === SolanaRpcMethod.signMessage) {\n            setHeaderTitle(t('sign.signature_message') as string);\n            setHeaderDes(t('sign.signature_title') as string);\n        } else if (method === SolanaRpcMethod.signAndSendTransaction) {\n            setHeaderTitle(t('sign.send_transaction') as string);\n            setHeaderDes(t('sign.approve_and').format(getChainDisplayName(chain)));\n            const serializeTx = (param as Transaction | VersionedTransaction).serialize({\n                requireAllSignatures: false,\n                verifySignatures: false,\n            });\n            deserializeTransaction([bs58.encode(serializeTx)]);\n        } else if (method === SolanaRpcMethod.signTransaction) {\n            setHeaderTitle(t('sign.sign_transaction') as string);\n            setHeaderDes(t('sign.sign_but') as string);\n            const serializeTx = (param as Transaction | VersionedTransaction).serialize({\n                requireAllSignatures: false,\n                verifySignatures: false,\n            });\n            deserializeTransaction([bs58.encode(serializeTx)]);\n        } else if (method === SolanaRpcMethod.signAllTransactions) {\n            setHeaderTitle(t('sign.sign_transaction') as string);\n            setHeaderDes(t('sign.sign_but') as string);\n            const serializeTxs = (param as (Transaction | VersionedTransaction)[]).map((tx) =>\n                bs58.encode(\n                    tx.serialize({\n                        requireAllSignatures: false,\n                        verifySignatures: false,\n                    })\n                )\n            );\n            deserializeTransaction(serializeTxs);\n        } else {\n            throw new Error('Unknown method');\n        }\n    }, [param]);\n\n    useEffect(() => {\n        // init connect();\n        particleAuth.solana.connect();\n    }, []);\n\n    const deserializeTransaction = (messages: string[]) => {\n        particleAuth.solana\n            .request({\n                chainId: chain.id,\n                method: SolanaEnhancedMethod.enhancedDeserializeTransaction,\n                params: messages,\n            })\n            .then((result) => {\n                setTransactionInfo(result);\n                asyncFilter(async (info: any) => {\n                    const associatedTokenAddress = await solana.findAssociatedTokenAddress(\n                        particleAuth.solana.selectedAddress as string,\n                        info.mint\n                    );\n                    return info.associatedTokenAddress === associatedTokenAddress.toBase58();\n                }, result?.estimatedChanges?.nfts).then((results) => {\n                    console.log('NFTChanges', results.length);\n                    setNftChanges(results);\n                });\n\n                asyncFilter(async (info: any) => {\n                    const associatedTokenAddress = await solana.findAssociatedTokenAddress(\n                        particleAuth.solana.selectedAddress as string,\n                        info.mint\n                    );\n                    return info.associatedTokenAddress === associatedTokenAddress.toBase58();\n                }, result?.estimatedChanges?.tokens).then((results) => {\n                    console.log('TokenChanges', results.length);\n                    setTokenChanges(results);\n                });\n            })\n            .catch((error) => {\n                console.log('deserializeTransaction error', error);\n                Modal.error({\n                    title: error.message ?? 'Deserialize Transaction Error',\n                    okCancel: true,\n                    cancelText: t('common.cancel'),\n                    okText: t('common.retry'),\n                    wrapClassName: 'auth-core-modal-error',\n                    getContainer: () => {\n                        return authCoreModal.rootBody as HTMLElement;\n                    },\n                    onOk: () => {\n                        deserializeTransaction(messages);\n                    },\n                });\n            });\n    };\n\n    const signMessage = () => {\n        const textDecoder = new TextDecoder();\n        const decodedString = textDecoder.decode(param as any);\n        return (\n            <div className=\"sign-message\">\n                <div className={'message' + (hasSetPaymentPassword ? '' : ' no-password-tip')}>\n                    <div className=\"pre-wrap personal-message\">{decodedString}</div>\n                </div>\n            </div>\n        );\n    };\n\n    const signTransaction = () => {\n        return (\n            <Tabs\n                defaultActiveKey=\"1\"\n                items={[\n                    {\n                        label: t('sign.details'),\n                        key: '1',\n                        children: (\n                            <>\n                                <div className=\"balance-change\">\n                                    <div className=\"title\">{t('sign.estimated_balance_change')}</div>\n                                    <div className=\"change-body\">\n                                        {transactionInfo?.estimatedChanges?.sols\n                                            .filter(\n                                                (info) =>\n                                                    info.address === (particleAuth?.solana?.selectedAddress as string)\n                                            )\n                                            .map((info, index) => {\n                                                return (\n                                                    <div className=\"change-title\" key={`sol-change-${index}`}>\n                                                        SOL\n                                                        <div\n                                                            className=\"change-val\"\n                                                            style={info.lamportsChange < 0 ? { color: '#ea4335' } : {}}\n                                                        >\n                                                            {info.lamportsChange < 0 ? '' : '+'}\n                                                            {formatTokenAmount(info.lamportsChange, 9)}\n                                                        </div>\n                                                    </div>\n                                                );\n                                            })}\n\n                                        {nftChanges?.map((info, index) => {\n                                            return (\n                                                <div className=\"change-title\" key={`nft-change-${index}`}>\n                                                    {info.name ? info.name : 'Unknown NFT'}\n                                                    <div\n                                                        className=\"change-val\"\n                                                        style={info.amountChange < 0 ? { color: '#ea4335' } : {}}\n                                                    >\n                                                        {info.amountChange < 0 ? '' : '+'}\n                                                        {info.amountChange}\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n\n                                        {tokenChanges?.map((info, index) => {\n                                            return (\n                                                <div className=\"change-title\" key={`token-change-${index}`}>\n                                                    {info.name ? info.name : 'Unknown Token'}\n                                                    <div\n                                                        className=\"change-val\"\n                                                        style={info.amountChange < 0 ? { color: '#ea4335' } : {}}\n                                                    >\n                                                        {info.amountChange < 0 ? '' : '+'}\n                                                        {formatTokenAmount(info.amountChange, info.decimals)}\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n\n                                <div className=\"net-fee solana\">\n                                    <div className=\"title\">\n                                        {t('sign.network_fee')}\n                                        {transactionInfo && (\n                                            <div className=\"fee-val\">\n                                                {formatTokenAmount(transactionInfo.estimatedLamportsFee, 9)} SOL\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </>\n                        ),\n                    },\n                    {\n                        label: t('sign.data'),\n                        key: '2',\n                        children: (\n                            <div>\n                                {transactionInfo?.instructions.map((instruction, index) => {\n                                    return (\n                                        <div className=\"inner-instruction\" key={`instruction-${index}`}>\n                                            <div className=\"inner-content\">\n                                                <div className=\"content-item\">\n                                                    <div className=\"item\">\n                                                        <div className=\"item-0\">\n                                                            #{index + 1} - {t(`program.${instruction.type}`)}\n                                                        </div>\n                                                        <div className=\"item-1 mt10\">\n                                                            {t('sign.program_id')}\n                                                            <span>{shortString(instruction.programId)}</span>\n                                                        </div>\n                                                        <div className=\"item-1 mt15\">\n                                                            {t('sign.data')}\n                                                            <span>{shortString(instruction.data)}</span>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ),\n                    },\n                ]}\n            />\n        );\n    };\n\n    return (\n        <div className=\"info-sign\">\n            <style>{styles as unknown as string}</style>\n            {!hasSetPaymentPassword && (\n                <div className=\"has-payment-password\">\n                    <div className=\"has-payment-password-icon\"></div>\n                    <div className=\"has-payment-password-tip\">{t('account.waring_tip1')}</div>\n                    <div className=\"has-payment-password-set\" onClick={setPaymentPassword}>\n                        {t('account.set')}\n                    </div>\n                </div>\n            )}\n            <div className={'scroll-part' + (hasSetPaymentPassword ? '' : ' no-password-tip')}>\n                <Menu userInfo={userInfo} transactionInfo={transactionInfo} />\n                <div className=\"info-request\">{headerTitle}</div>\n                <div className=\"info-title\">\n                    <img src={getChainIcon(chain)} alt=\"\" />\n                    {getChainDisplayName(chain)}\n                </div>\n                <CopyToClipboard\n                    text={particleAuth.solana.selectedAddress as string}\n                    onCopy={() => message.success(t('new.copied_to'))}\n                >\n                    <div className=\"info-address\">\n                        {shortAddress}\n                        <div className=\"copy-icon\">\n                            <IconCopy />\n                        </div>\n                    </div>\n                </CopyToClipboard>\n                <div className=\"info-des\">{headerDes}</div>\n                <div className=\"apart-line\"></div>\n                {method === SolanaRpcMethod.signMessage && signMessage()}\n                {method !== SolanaRpcMethod.signMessage && signTransaction()}\n            </div>\n\n            <div className=\"btn-box\">\n                <div>\n                    <Button\n                        className=\"btn-cancel\"\n                        onClick={() => {\n                            if (!loading) {\n                                finallyHandle(undefined, AuthError.userRejectedRequest());\n                            }\n                        }}\n                    >\n                        {t('common.cancel')}\n                    </Button>\n                    <Button className=\"btn-approve\" onClick={approveSign} loading={loading}>\n                        {t('common.confirm')}\n                    </Button>\n                </div>\n                <PowerFooter></PowerFooter>\n            </div>\n        </div>\n    );\n}\n\nexport default InfoSign;\n", "import type { PublicKey } from '@solana/web3.js';\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';\n\nconst solana = {\n    async findAssociatedTokenAddress(walletAddress: string, tokenMintAddress: string): Promise<PublicKey> {\n        const { TOKEN_PROGRAM_ID } = await import('@solana/spl-token');\n        const { PublicKey } = await import('@solana/web3.js');\n        return PublicKey.findProgramAddressSync(\n            [\n                new PublicKey(walletAddress).toBuffer(),\n                TOKEN_PROGRAM_ID.toBuffer(),\n                new PublicKey(tokenMintAddress).toBuffer(),\n            ],\n            new PublicKey(SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID)\n        )[0];\n    },\n};\n\nexport default solana;\n"],
  "mappings": "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",
  "names": ["_a", "info_sign_default"]
}
