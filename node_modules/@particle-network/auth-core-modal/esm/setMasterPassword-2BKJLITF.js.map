{
  "version": 3,
  "sources": ["../src/pages/account/setMasterPassword/index.tsx", "../src/pages/account/setMasterPasswordSuccess/index.tsx", "../src/pages/account/setMasterPassword/masterPasswordLoading.tsx"],
  "sourcesContent": ["import { RecordType } from '@particle-network/analytics';\nimport { analyticsRecord, setMastersPassword } from '@particle-network/auth-core';\nimport { useRequest } from 'ahooks';\nimport { Button, Form, Modal, Space, Typography } from 'antd';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PromptSettingType } from '../../../api/model/bundle';\nimport SVGIcon from '../../../components/icon/svg-icon';\nimport InputPassword from '../../../components/input-password';\nimport PowerFooter from '../../../components/power-footer';\nimport { useAuthCoreModal, useCustomNavigate, useModalOptions, useParticleAuth } from '../../../context';\nimport { useConnect } from '../../../context/hooks/useConnect';\nimport useMessage from '../../../context/hooks/useMessage';\nimport { isAutoFocusSupported } from '../../../utils';\nimport SetMasterPasswordSuccess from '../setMasterPasswordSuccess';\nimport styles from './index.less';\nimport MasterPasswordLoading from './masterPasswordLoading';\n\nconst SetMasterPassword = (props: any) => {\n    const navigate = useCustomNavigate();\n\n    const { t } = useTranslation();\n\n    const { Text, Link } = Typography;\n    const message = useMessage();\n    const state = props;\n\n    const [digitsError, setDigitsError] = useState(false);\n\n    const [matchError, setMatchError] = useState(false);\n\n    const [passwordStep, setPasswordStep] = useState<'unset' | 'loading' | 'success' | 'failure'>('unset');\n\n    const { authCoreModal } = useAuthCoreModal();\n\n    const [passwordForm] = Form.useForm();\n\n    const [passwordValue, setPasswordValue] = useState('');\n\n    const [disableSubmit, setDisableSubmit] = useState(true);\n\n    const { loginSuccessRedirectToApp } = useParticleAuth();\n\n    const { modalOptions } = useModalOptions();\n\n    const { disconnect } = useConnect();\n\n    const { setAuthCoreModal } = useAuthCoreModal();\n\n    const changePassword = useMemo(() => (state as any)?.setNewMasterPassword, [state]);\n\n    const loginSetMasterPassword = useMemo(() => (state as any)?.loginSetMasterPassword, [state]);\n\n    useEffect(() => {\n        if (\n            modalOptions?.promptSettingConfig?.promptMasterPasswordSettingWhenLogin ===\n                PromptSettingType.everyAndNotSkip &&\n            loginSetMasterPassword\n        ) {\n            setAuthCoreModal({\n                closable: false,\n            });\n            return () => {\n                setAuthCoreModal({\n                    closable: true,\n                });\n            };\n        }\n    }, [loginSetMasterPassword, modalOptions?.promptSettingConfig?.promptMasterPasswordSettingWhenLogin]);\n\n    const { run: runSetMasterPassword } = useRequest(setMastersPassword, {\n        manual: true,\n        onBefore: () => {\n            setPasswordStep('loading');\n        },\n        onSuccess: async (result) => {\n            console.log('set master password success', result);\n            if (!changePassword) {\n                analyticsRecord({\n                    // eslint-disable-next-line camelcase\n                    record_type: RecordType.PAGE_SETTING_MASTER_PASSWORD_SET, // \u4E3B\u5BC6\u7801\u8BBE\u7F6E\u6210\u529F\n                });\n            } else {\n                analyticsRecord({\n                    // eslint-disable-next-line camelcase\n                    record_type: RecordType.PAGE_SETTING_MASTER_PASSWORD_CHANGE, // \u4E3B\u5BC6\u7801\u4FEE\u6539\u6210\u529F\n                });\n            }\n\n            setPasswordStep('success');\n        },\n        onError: (error) => {\n            console.log('set master password error', error);\n            setPasswordStep('failure');\n            message.error(t('account.master_password_set_failed'));\n        },\n    });\n\n    const toDescription = () => {\n        navigate('/account/master-password/description');\n    };\n\n    const onInputFinish = ({\n        password,\n        confirmPassword,\n    }: {\n        password: string | undefined;\n        confirmPassword: string | undefined;\n    }) => {\n        if (password && password.length >= 6 && password.length <= 20 && password === confirmPassword) {\n            setPasswordValue(password);\n            runSetMasterPassword(password);\n        } else {\n            setDigitsError(!password || password.length < 6 || password.length > 20);\n            setMatchError(Boolean(password && confirmPassword && password !== confirmPassword));\n        }\n    };\n\n    const onPasswordInputBlur = (event: any) => {\n        const password: string | undefined = passwordForm.getFieldValue('password');\n        const confirmPassword: string | undefined = passwordForm.getFieldValue('confirmPassword');\n        setDigitsError(!password || password.length < 6 || password.length > 20);\n        if (password && confirmPassword) {\n            setMatchError(password !== confirmPassword);\n        }\n    };\n    const onConfirmPasswordInputBlur = (event: any) => {\n        const password: string | undefined = passwordForm.getFieldValue('password');\n        const confirmPassword: string | undefined = passwordForm.getFieldValue('confirmPassword');\n        setMatchError(Boolean(password && confirmPassword && password !== confirmPassword));\n    };\n\n    const onPasswordInputChange = () => {\n        setDigitsError(false);\n    };\n\n    const onConfirmPasswordInputChange = () => {\n        setMatchError(false);\n    };\n\n    const warningModalRef = React.useRef<any>();\n\n    const onBack = () => {\n        if (\n            modalOptions?.promptSettingConfig?.promptMasterPasswordSettingWhenLogin ===\n            PromptSettingType.everyAndNotSkip\n        ) {\n            warningModalRef.current = Modal.warning({\n                className: 'm-warning-modal',\n                wrapClassName: 'auth-core-modal-error set-mp-warning-modal',\n                getContainer: () => {\n                    return authCoreModal.rootBody as HTMLElement;\n                },\n                content: (\n                    <div className=\"content-wrap\">\n                        <div className=\"content\">{t('account.unset_the_master_password')}</div>\n                        <div className=\"footer-btns\">\n                            <Button\n                                className=\"cancel-btn\"\n                                onClick={() => {\n                                    disconnect().finally(() => {\n                                        warningModalRef.current.destroy();\n                                        setAuthCoreModal({\n                                            particleModalVisible: false,\n                                        });\n                                    });\n                                }}\n                            >\n                                {t('account.exit')}\n                            </Button>\n                            <Button\n                                className=\"confirm-btn\"\n                                onClick={() => {\n                                    warningModalRef.current.destroy();\n                                }}\n                            >\n                                {t('new.continue')}\n                            </Button>\n                        </div>\n                    </div>\n                ),\n                closable: true,\n                maskClosable: false,\n            });\n        } else if (loginSetMasterPassword) {\n            loginSuccessRedirectToApp();\n        } else {\n            navigate(-1);\n        }\n    };\n\n    const onValuesChange = () => {\n        const password = passwordForm.getFieldValue('password');\n        const confirmPassword = passwordForm.getFieldValue('confirmPassword');\n        setDisableSubmit(!password || !confirmPassword);\n    };\n\n    useEffect(() => {\n        // biRecords({\n        //     record_type: RecordType.PAGE_SETTING_MASTER_PASSWORD_ENTER, // \u8FDB\u5165\u4E3B\u5BC6\u7801\u8BBE\u7F6E\u9875\u9762\n        // });\n    }, []);\n\n    return (\n        <div className=\"set-mp-container\">\n            <style>{styles as unknown as string}</style>\n            <div className=\"set-mp-title\">\n                {changePassword ? t('account.new_master_password') : t('account.master_password')}\n            </div>\n\n            {/* set master password */}\n            {(passwordStep === 'unset' || passwordStep === 'failure') && (\n                <div className=\"form-wrap\">\n                    <Form\n                        onFinish={onInputFinish}\n                        form={passwordForm}\n                        layout=\"vertical\"\n                        onValuesChange={onValuesChange}\n                    >\n                        <div className=\"account-header\">\n                            <SVGIcon className=\"icon-navigation-back\" name=\"circle_back\" onClick={onBack} />\n                        </div>\n                        <div className=\"scroll-content\">\n                            <div className=\"mp-input-name padding-top-16\">\n                                {changePassword ? t('account.new_master_password') : t('account.master_password')}\n                            </div>\n                            <Form.Item name=\"password\" initialValue={passwordValue}>\n                                <InputPassword\n                                    className=\"mp-input\"\n                                    onBlur={onPasswordInputBlur}\n                                    onChange={onPasswordInputChange}\n                                    autoFocus={isAutoFocusSupported()}\n                                />\n                            </Form.Item>\n\n                            {digitsError && <div className=\"mp-input-error\">{t('account.password_digits_hint')}</div>}\n\n                            <div className=\"mp-confirm-input-name\">\n                                {changePassword\n                                    ? t('account.confirm_new_master_password')\n                                    : t('account.confirm_master_password')}\n                            </div>\n\n                            <Form.Item name=\"confirmPassword\" initialValue={passwordValue}>\n                                <InputPassword\n                                    className=\"mp-input\"\n                                    onBlur={onConfirmPasswordInputBlur}\n                                    onChange={onConfirmPasswordInputChange}\n                                    autoFocus={false}\n                                />\n                            </Form.Item>\n\n                            {matchError && (\n                                <div className=\"mp-input-error\">{t('account.master_password_not_match')}</div>\n                            )}\n\n                            <Space className=\"description-space\" direction=\"vertical\">\n                                <Text>\n                                    * {t('account.master_password_use1')}{' '}\n                                    <Link onClick={toDescription} className=\"more-text-btn\">\n                                        {t('account.learn_more_period')}\n                                    </Link>\n                                </Text>\n                                <Text strong>* {t('account.master_password_store_hint')}</Text>\n                                <Text>{t('account.master_password_note')}</Text>\n                            </Space>\n                        </div>\n                        <Form.Item>\n                            <div className=\"set-mp-footer\">\n                                <Button\n                                    className=\"primary-antd-btn set-mp-btn\"\n                                    htmlType=\"submit\"\n                                    disabled={disableSubmit}\n                                >\n                                    {changePassword\n                                        ? t('account.set_new_master_password')\n                                        : t('account.set_master_password')}\n                                </Button>\n                                <PowerFooter />\n                            </div>\n                        </Form.Item>\n                    </Form>\n                </div>\n            )}\n\n            {/* set master password loading */}\n            {passwordStep === 'loading' && <MasterPasswordLoading />}\n\n            {/* set master password success */}\n            {passwordStep === 'success' && <SetMasterPasswordSuccess loginSetMasterPassword={loginSetMasterPassword} />}\n        </div>\n    );\n};\n\nexport default SetMasterPassword;\n", "import { useInterval } from 'ahooks';\nimport { Button, Space, Typography } from 'antd';\nimport { useLottie } from 'lottie-react';\nimport React, { Suspense, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport PowerFooter from '../../../components/power-footer';\nimport { useCustomNavigate, useParticleAuth } from '../../../context';\nimport styles from './index.less';\nconst rightData = require('../../../common/lottie/right.json');\n\nconst SetMasterPasswordSuccess = (props: any) => {\n    const { loginSetMasterPassword } = props;\n    const { loginSuccessRedirectToApp } = useParticleAuth();\n    const { Text } = Typography;\n    const { t } = useTranslation();\n    const navigate = useCustomNavigate();\n\n    const [interval, setInterval] = useState<number | undefined>(1000);\n\n    const [countdown, setCountdown] = useState(3);\n\n    const { View } = useLottie({\n        animationData: rightData,\n        loop: false,\n    });\n\n    useInterval(() => {\n        if (countdown > 0) {\n            const result = countdown - 1;\n            setCountdown(result);\n            if (result === 0) {\n                setInterval(undefined);\n                backOnClick();\n            }\n        }\n    }, interval);\n\n    const backOnClick = () => {\n        if (loginSetMasterPassword) {\n            loginSuccessRedirectToApp();\n        } else {\n            navigate('/account/security', { replace: true, back: true });\n        }\n    };\n\n    return (\n        <>\n            <style>{styles as unknown as string}</style>\n            <div className=\"set-mp-success-container\">\n                <Suspense fallback={<></>}>\n                    <div className=\"set-mp-success-icon\">{View}</div>\n                </Suspense>\n                <div className=\"set-mp-success\">{t('account.setting_successed')}</div>\n                <Space className=\"set-mp-success-tip\" direction=\"vertical\">\n                    <Text>{t('account.master_password_successed')}</Text>\n                    <Text strong>{t('account.master_password_store_hint')}</Text>\n                </Space>\n\n                <Button className=\"primary-antd-btn back-btn\" onClick={backOnClick}>\n                    {t('login.back') + ` (${countdown})`}\n                </Button>\n                <PowerFooter />\n            </div>\n        </>\n    );\n};\n\nexport default SetMasterPasswordSuccess;\n", "import { Space, Typography } from 'antd';\nimport { useLottie } from 'lottie-react';\nimport React, { Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport PowerFooter from '../../../components/power-footer';\nimport { useCustomize } from '../../../context/hooks';\n\nconst walletEncryptLight = require('../../../common/lottie/wallet_encrypt_fff.json');\nconst walletEncryptDark = require('../../../common/lottie/wallet_encrypt_000.json');\n\nconst MasterPasswordLoading = () => {\n    const { t } = useTranslation();\n    const { themeType } = useCustomize();\n\n    const { View } = useLottie({\n        animationData: themeType === 'dark' ? walletEncryptDark : walletEncryptLight,\n        loop: true,\n    });\n\n    return (\n        <div className=\"mp-loading-container\" data-theme={themeType}>\n            <div className=\"scroll-content\">\n                <Suspense fallback={<></>}>\n                    <div className=\"mp-icon-loading\">{View}</div>\n                </Suspense>\n                <Space className=\"loading-tip\" direction=\"vertical\">\n                    <Typography.Text>{t('account.master_password_loading_tip1')}</Typography.Text>\n                    <Typography.Text>{t('account.master_password_loading_tip2')}</Typography.Text>\n                    <Typography.Text>{t('account.master_password_loading_tip3')}</Typography.Text>\n                </Space>\n            </div>\n            <PowerFooter />\n        </div>\n    );\n};\n\nexport default MasterPasswordLoading;\n"],
  "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",
  "names": ["Button", "Space", "Typography", "React", "useState", "useTranslation", "setMasterPasswordSuccess_default", "Space", "Typography", "useLottie", "React", "Suspense", "useTranslation", "useTranslation", "useLottie", "React", "Suspense", "Space", "Typography", "useTranslation", "Typography", "useState", "_a", "React", "Button", "Space", "setMasterPasswordSuccess_default", "setMasterPassword_default"]
}
