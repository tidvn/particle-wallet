/// <reference types="node" />
import type { PrefixedHexString, ToBufferInputTypes } from '@ethereumjs/util';
import type BN from 'bn.js';
export declare function shortString(str: any): string;
export declare const displayEmail: (email: string) => string;
export declare const displayPhone: (phone: string) => string;
declare global {
    interface String {
        format(...params: string[]): string;
        titleCase(): string;
    }
}
export declare function assert(condition: any, message?: any): void;
export declare function isSocialLogin(type: string): boolean;
/**
 * Returns `true` if the given value is nullish.
 *
 * @param value - The value being checked.
 * @returns Whether the value is nullish.
 */
export declare function isNullish(value: any): boolean;
/**
 * Convert a value to a Buffer.
 *
 * @param value - The value to convert to a Buffer.
 * @returns The given value as a Buffer.
 */
export declare function legacyToBuffer(value: ToBufferInputTypes): Buffer;
export declare function toHexPrefixString(value: ToBufferInputTypes): PrefixedHexString;
/**
 * Convert BN to 0x-prefixed hex string.
 */
export declare function bnToHex(value: BN): PrefixedHexString;
export declare function popupwindow(url: string, title: string, w: number, h: number): Window | null;
export declare function popupwindowNoLimit(url: string, title: string, w: number, h: number): Window | null;
export declare function getVersion(): string;
export declare function isInIframe(): boolean;
/**
 * 窗口信息传递
 */
export declare function authPostMessage(key: string, data: any): void;
/**
 * 口信息接收
 * @param key
 * @param cb
 * @returns
 */
export declare function authReceiveMessage(key: string, cb: any): {
    destroyMessage(): void;
};
