import { type EIP1193Provider, type EIP1559TxData, type MessageTypes, type PrefixedHexString, type RpcInput, type SignTypedDataVersion, type TxData, type TypedDataV1, type TypedMessage } from '@particle-network/auth-core';
export declare class EVMProvider implements EIP1193Provider {
    #private;
    signMessage: (message: PrefixedHexString | string, uniq?: boolean) => Promise<string>;
    sendTransaction: (transaction: Omit<TxData | EIP1559TxData, 'from'>) => Promise<string>;
    signTypedData: <V extends SignTypedDataVersion, T extends MessageTypes>({ data, version, uniq, }: {
        data: V extends "V1" ? TypedDataV1 : TypedMessage<T>;
        version: V;
        uniq?: boolean | undefined;
    }) => Promise<string>;
    get selectedAddress(): string | null;
    get chainId(): string;
    isConnected(): boolean;
    on(event: string, listener: (...args: any[]) => void): this;
    once(event: string, listener: (...args: any[]) => void): this;
    off(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
    /**
     * @deprecated user `request` instead
     */
    enable(): Promise<string[]>;
    disconnect(): Promise<void>;
    request(data: Partial<RpcInput>): Promise<any>;
}
