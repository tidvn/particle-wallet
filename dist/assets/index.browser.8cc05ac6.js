import{_ as f}from"./index.fbf0f355.js";import{t as P,i as R,a as _,s as E,H as O,l as k,F as x}from"./lazy-json.dc83719e.js";const I="The stream has already been transformed.",N=e=>{if(!b(e)&&!S(e)){const o=e?.__proto__?.constructor?.name||e;throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${o}`)}let t=!1;const r=async()=>{if(t)throw new Error(I);return t=!0,await E(e)},n=o=>{if(typeof o.stream!="function")throw new Error(`Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.
If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body`);return o.stream()};return Object.assign(e,{transformToByteArray:r,transformToString:async o=>{const s=await r();if(o==="base64")return P(s);if(o==="hex")return R(s);if(o===void 0||o==="utf8"||o==="utf-8")return _(s);if(typeof TextDecoder=="function")return new TextDecoder(o).decode(s);throw new Error("TextDecoder is not available, please make sure polyfill is provided.")},transformToWebStream:()=>{if(t)throw new Error(I);if(t=!0,b(e))return n(e);if(S(e))return e;throw new Error(`Cannot transform payload to web stream, got ${e}`)}})},b=e=>typeof Blob=="function"&&e instanceof Blob,S=e=>typeof ReadableStream=="function"&&e instanceof ReadableStream;class p extends Error{constructor(t,r=!0){super(t),this.tryNextLink=r,this.name="ProviderError",Object.setPrototypeOf(this,p.prototype)}static from(t,r=!0){return Object.assign(new this(t.message,r),t)}}class a extends p{constructor(t,r=!0){super(t,r),this.tryNextLink=r,this.name="CredentialsProviderError",Object.setPrototypeOf(this,a.prototype)}}function C(e){return Promise.all(Object.keys(e).reduce((t,r)=>{const n=e[r];return typeof n=="string"?t.push([r,n]):t.push(n().then(o=>[r,o])),t},[])).then(t=>t.reduce((r,[n,o])=>(r[n]=o,r),{}))}function T(e){return async()=>{e.logger?.debug("@aws-sdk/credential-provider-cognito-identity","fromCognitoIdentity");const{GetCredentialsForIdentityCommand:t,CognitoIdentityClient:r}=await f(()=>import("./loadCognitoIdentity.eed41784.js"),["assets/loadCognitoIdentity.eed41784.js","assets/GetIdCommand.237ec2b1.js","assets/index.81aff34b.js","assets/lazy-json.dc83719e.js","assets/index.fbf0f355.js","assets/index.30c5a70a.css","assets/noAuth.8534d4ce.js","assets/serde-json.b3c27c2b.js"]),{Credentials:{AccessKeyId:n=K(),Expiration:o,SecretKey:s=j(),SessionToken:i}=D()}=await(e.client??new r(Object.assign({},e.clientConfig??{},{region:e.clientConfig?.region??e.parentClientConfig?.region}))).send(new t({CustomRoleArn:e.customRoleArn,IdentityId:e.identityId,Logins:e.logins?await C(e.logins):void 0}));return{identityId:e.identityId,accessKeyId:n,secretAccessKey:s,sessionToken:i,expiration:o}}}function K(){throw new a("Response from Amazon Cognito contained no access key ID")}function D(){throw new a("Response from Amazon Cognito contained no credentials")}function j(){throw new a("Response from Amazon Cognito contained no secret key")}const h="IdentityIds";class H{constructor(t="aws:cognito-identity-ids"){this.dbName=t}getItem(t){return this.withObjectStore("readonly",r=>{const n=r.get(t);return new Promise(o=>{n.onerror=()=>o(null),n.onsuccess=()=>o(n.result?n.result.value:null)})}).catch(()=>null)}removeItem(t){return this.withObjectStore("readwrite",r=>{const n=r.delete(t);return new Promise((o,s)=>{n.onerror=()=>s(n.error),n.onsuccess=()=>o()})})}setItem(t,r){return this.withObjectStore("readwrite",n=>{const o=n.put({id:t,value:r});return new Promise((s,i)=>{o.onerror=()=>i(o.error),o.onsuccess=()=>s()})})}getDb(){const t=self.indexedDB.open(this.dbName,1);return new Promise((r,n)=>{t.onsuccess=()=>{r(t.result)},t.onerror=()=>{n(t.error)},t.onblocked=()=>{n(new Error("Unable to access DB"))},t.onupgradeneeded=()=>{const o=t.result;o.onerror=()=>{n(new Error("Failed to create object store"))},o.createObjectStore(h,{keyPath:"id"})}})}withObjectStore(t,r){return this.getDb().then(n=>{const o=n.transaction(h,t);return o.oncomplete=()=>n.close(),new Promise((s,i)=>{o.onerror=()=>i(o.error),s(r(o.objectStore(h)))}).catch(s=>{throw n.close(),s})})}}class M{constructor(t={}){this.store=t}getItem(t){return t in this.store?this.store[t]:null}removeItem(t){delete this.store[t]}setItem(t,r){this.store[t]=r}}const B=new M;function q(){return typeof self=="object"&&self.indexedDB?new H:typeof window=="object"&&window.localStorage?window.localStorage:B}function L({accountId:e,cache:t=q(),client:r,clientConfig:n,customRoleArn:o,identityPoolId:s,logins:i,userIdentifier:l=!i||Object.keys(i).length===0?"ANONYMOUS":void 0,logger:d,parentClientConfig:m}){d?.debug("@aws-sdk/credential-provider-cognito-identity","fromCognitoIdentity");const c=l?`aws:cognito-identity-credentials:${s}:${l}`:void 0;let w=async()=>{const{GetIdCommand:y,CognitoIdentityClient:A}=await f(()=>import("./loadCognitoIdentity.eed41784.js"),["assets/loadCognitoIdentity.eed41784.js","assets/GetIdCommand.237ec2b1.js","assets/index.81aff34b.js","assets/lazy-json.dc83719e.js","assets/index.fbf0f355.js","assets/index.30c5a70a.css","assets/noAuth.8534d4ce.js","assets/serde-json.b3c27c2b.js"]),g=r??new A(Object.assign({},n??{},{region:n?.region??m?.region}));let u=c&&await t.getItem(c);if(!u){const{IdentityId:v=W()}=await g.send(new y({AccountId:e,IdentityPoolId:s,Logins:i?await C(i):void 0}));u=v,c&&Promise.resolve(t.setItem(c,u)).catch(()=>{})}return w=T({client:g,customRoleArn:o,logins:i,identityId:u}),w()};return()=>w().catch(async y=>{throw c&&Promise.resolve(t.removeItem(c)).catch(()=>{}),y})}function W(){throw new a("Response from Amazon Cognito contained no identity ID")}const Z=e=>T({...e}),ee=e=>L({...e}),$="169.254.170.2",U="169.254.170.23",z="[fd00:ec2::23]",F=e=>{if(e.protocol!=="https:"&&!(e.hostname===$||e.hostname===U||e.hostname===z)){if(e.hostname.includes("[")){if(e.hostname==="[::1]"||e.hostname==="[0000:0000:0000:0000:0000:0000:0000:0001]")return}else{if(e.hostname==="localhost")return;const t=e.hostname.split("."),r=n=>{const o=parseInt(n,10);return 0<=o&&o<=255};if(t[0]==="127"&&r(t[1])&&r(t[2])&&r(t[3])&&t.length===4)return}throw new a(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`)}};function G(e){return new O({protocol:e.protocol,hostname:e.hostname,port:Number(e.port),path:e.pathname,query:Array.from(e.searchParams.entries()).reduce((t,[r,n])=>(t[r]=n,t),{}),fragment:e.hash})}async function V(e){const t=e?.headers["content-type"]??e?.headers["Content-Type"]??"";t.includes("json")||console.warn("HTTP credential provider response header content-type was not application/json. Observed: "+t+".");const n=await N(e.body).transformToString();if(e.statusCode===200){const o=JSON.parse(n);if(typeof o.AccessKeyId!="string"||typeof o.SecretAccessKey!="string"||typeof o.Token!="string"||typeof o.Expiration!="string")throw new a("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }");return{accessKeyId:o.AccessKeyId,secretAccessKey:o.SecretAccessKey,sessionToken:o.Token,expiration:k(o.Expiration)}}if(e.statusCode>=400&&e.statusCode<500){let o={};try{o=JSON.parse(n)}catch{}throw Object.assign(new a(`Server responded with status: ${e.statusCode}`),{Code:o.Code,Message:o.Message})}throw new a(`Server responded with status: ${e.statusCode}`)}const J=(e,t,r)=>async()=>{for(let n=0;n<t;++n)try{return await e()}catch{await new Promise(s=>setTimeout(s,r))}return await e()},te=e=>{e.logger?.debug("@aws-sdk/credential-provider-http","fromHttp");let t;const r=e.credentialsFullUri;if(r)t=r;else throw new a("No HTTP credential provider host provided.");const n=new URL(t);F(n);const o=new x;return J(async()=>{const s=G(n);e.authorizationToken&&(s.headers.Authorization=e.authorizationToken);const i=await o.handle(s);return V(i.response)},e.maxRetries??3,e.timeout??1e3)},oe=e=>{let t;return async()=>{e.logger?.debug("@aws-sdk/credential-providers","fromTemporaryCredentials (STS)");const r={...e.params,RoleSessionName:e.params.RoleSessionName??"aws-sdk-js-"+Date.now()};if(r?.SerialNumber){if(!e.mfaCodeProvider)throw new a("Temporary credential requires multi-factor authentication, but no MFA code callback was provided.",!1);r.TokenCode=await e.mfaCodeProvider(r?.SerialNumber)}const{AssumeRoleCommand:n,STSClient:o}=await f(()=>import("./loadSts.118f4386.js"),["assets/loadSts.118f4386.js","assets/lazy-json.dc83719e.js","assets/index.81aff34b.js","assets/index.fbf0f355.js","assets/index.30c5a70a.css","assets/Aws_query.65bbd608.js","assets/noAuth.8534d4ce.js","assets/constants.a65d2e67.js"]);if(t||(t=new o({...e.clientConfig,credentials:e.masterCredentials})),e.clientPlugins)for(const i of e.clientPlugins)t.middlewareStack.use(i);const{Credentials:s}=await t.send(new n(r));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new a(`Invalid response from STS.assumeRole call with role ${r.RoleArn}`);return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration,credentialScope:s.CredentialScope}}},Y=e=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity","fromWebToken");const{roleArn:t,roleSessionName:r,webIdentityToken:n,providerId:o,policyArns:s,policy:i,durationSeconds:l}=e;let{roleAssumerWithWebIdentity:d}=e;if(!d){const{getDefaultRoleAssumerWithWebIdentity:m}=await f(()=>import("./loadSts.99d7c1dd.js"),["assets/loadSts.99d7c1dd.js","assets/lazy-json.dc83719e.js","assets/index.81aff34b.js","assets/index.fbf0f355.js","assets/index.30c5a70a.css","assets/Aws_query.65bbd608.js","assets/noAuth.8534d4ce.js","assets/constants.a65d2e67.js"]);d=m({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:e.parentClientConfig},e.clientPlugins)}return d({RoleArn:t,RoleSessionName:r??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:n,ProviderId:o,PolicyArns:s,Policy:i,DurationSeconds:l})},re=e=>Y({...e});export{Z as fromCognitoIdentity,ee as fromCognitoIdentityPool,te as fromHttp,oe as fromTemporaryCredentials,re as fromWebToken};
