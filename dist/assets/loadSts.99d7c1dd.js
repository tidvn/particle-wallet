import"./lazy-json.dc83719e.js";import{Q as u,R as m,T as g}from"./index.81aff34b.js";import{c as S,a as f,b as y,e as W,f as p,S as C}from"./Aws_query.65bbd608.js";import"./index.fbf0f355.js";import"./noAuth.8534d4ce.js";import"./constants.a65d2e67.js";class A extends u.classBuilder().ep({...S}).m(function(s,i,n,t){return[m(n,this.serialize,this.deserialize),g(n,s.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(f,y).ser(W).de(p).build(){}const o="us-east-1",R=async(e,s,i)=>{const n=typeof e=="function"?await e():e,t=typeof s=="function"?await s():s;return i?.debug?.("@aws-sdk/client-sts::resolveRegion","accepting first of:",`${n} (provider)`,`${t} (parent client)`,`${o} (STS default)`),n??t??o},I=(e,s)=>{let i;return async n=>{if(!i){const{logger:r=e?.parentClientConfig?.logger,region:a,requestHandler:l=e?.parentClientConfig?.requestHandler,credentialProviderLogger:c}=e,d=await R(a,e?.parentClientConfig?.region,c);i=new s({region:d,requestHandler:l,logger:r})}const{Credentials:t}=await i.send(new A(n));if(!t||!t.AccessKeyId||!t.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${n.RoleArn}`);return{accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,sessionToken:t.SessionToken,expiration:t.Expiration,credentialScope:t.CredentialScope}}},h=(e,s)=>s?class extends e{constructor(n){super(n);for(const t of s)this.middlewareStack.use(t)}}:e,x=(e={},s)=>I(e,h(C,s));export{x as getDefaultRoleAssumerWithWebIdentity};
